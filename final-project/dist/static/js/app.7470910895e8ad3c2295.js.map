{"version":3,"sources":["webpack:///./src/js/data/memories.json","webpack:///./src/js/shaders/glow.frag","webpack:///./src/js/services/chunks.js","webpack:///./src/js/shaders/flashing.frag","webpack:///./src/js/views/AbstractApplication.js","webpack:///./src/js/shaders/flashing.vert","webpack:///./src/js/shaders/xRay.frag","webpack:///./src/js/chunks/noise.raw.xml","webpack:///./src/js/MainBrain.js","webpack:///./src/js/services/bubblesAnimation.js","webpack:///./src/js/data/memoryMaping.json","webpack:///./src/js/services/gui.js","webpack:///./src/js/chunks/random.raw.xml","webpack:///./src/js/data/testPayload.json","webpack:///./src/js/shaders/xRay.vert","webpack:///./src/app.js","webpack:///./src/js/data/flashingCoordinates.json","webpack:///./src/js/chunks/rotate.raw.xml","webpack:///./src/js/Loaders/Loaders.js","webpack:///./src/js/services/font.js","webpack:///./src/js/services/particlesSystem.js","webpack:///./src/js/shaders/glow.vert","webpack:///./src/js/services/thinkingAnimation.js"],"names":["module","exports","affective","analytic","process","semantic","episodic","cerebellum","bridge","amygdala","lines","__webpack_require__","noise","random","rotate","THREE","_postprocessing","AbstractApplication","_classCallCheck3","default","this","a_camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","a_scene","Scene","background","Color","a_blurScene","a_bloomScene","fog","Fog","a_renderer","WebGLRenderer","antialias","alpha","preserveDrawingBuffer","logarithmicDepthBuffer","setPixelRatio","devicePixelRatio","setSize","sortObjects","setClearColor","shadowMap","enabled","type","PCFSoftShadowMap","gammaInput","gammaOutput","shadowDepthMaterialSide","BackSide","composer","EffectComposer","stencilBuffer","depthTexture","renderPass","RenderPass","scene","camera","addPass","bloomPass","BloomPass","resolutionScale","resolution","intensity","distinction","blend","renderToScreen","blurMask","MaskPass","blurScene","renderPass2","document","body","appendChild","domElement","stats","initStats","orbitControls","OrbitControls","enableDamping","dampingFactor","enableZoom","zoomSpeed","panSpeed","minDistance","maxDistance","autoRotate","autoRotateSpeed","rotateSpeed","screenSpacePanning","addEventListener","onWindowResize","bind","onMouseMove","aspect","updateProjectionMatrix","timestamp","requestAnimationFrame","animate","render","_stats2","setMode","style","left","tip","e","_gsap","MainBrain","_this","_possibleConstructorReturn3","__proto__","_getPrototypeOf2","call","clock","Clock","addBrain","addFloor","addIllumination","deltaTime","particlesColor","particlesStartColor","loaders","_Loaders2","runAnimation","memories","_memories2","memorySelected","frame","frameName","isRecording","setTimeout","startIntro","geometry","PlaneBufferGeometry","material","MeshPhongMaterial","opacity","transparent","plane","Mesh","receiveShadow","y","rotation","x","Math","PI","add","ambienlight","AmbientLight","spotLight","SpotLight","set","castShadow","shadow","LightShadow","bias","mapSize","width","height","spotLightHelper","SpotLightHelper","_this2","brainBufferGeometries","BRAIN_MODEL","traverse","child","LineSegments","_extends3","addLinesPath","verticesNeedUpdate","push","storeBrainVertices","endPointsCollections","BufferGeometryUtils","mergeBufferGeometries","_this3","progress","p","TweenMax","fromTo","ease","Power4","easeInOut","onUpdate","onStart","particlesSystem","transform","onComplete","xRay","uniforms","c","value","startAutoDemo","_this4","memoryCount","memoryTimer","isXRayActive","setInterval","bubblesAnimation","updateSubSystem","clearInterval","gui","_gui2","addParticlesSystem","font","_font2","_bubblesAnimation2","initAnimation","thinkingAnimation","_thinkingAnimation2","update","controls","rotationSpeed","getDelta","facingToCamera","flashing","attributes","needsUpdate","socket","emit","file","querySelector","toDataURL","event","clientY","clientX","_particlesSystem2","particles","mesh","_keys2","map","l","name","includes","array","m","length","r","u","randFloat","v","theta","phi","acos","sin","cos","BubblesAnimation","mainBrain","isFlashing","isBubblesInserted","winner","winnerGroup","fistCameraReposition","bubbles","subsystem","bubbleList","console","log","subsystemResults","forEach","memoryGroup","getSubsystemGroup","memory","randomPos","randInt","parent","SphereGeometry","MeshNormalMaterial","group","Object3D","memoryPos","i","w","status","_loop","Power1","uWinnerAlpha","uWinnerSelected","isWinnerActive","_mainBrain","BufferGeometry","sizes","positions","delay","mSelector","altitude","addAttribute","Float32BufferAttribute","computeBoundingSphere","customMaterial","ShaderMaterial","glowColor","viewVector","uTime","uSlowTime","uBubblesUp","uIsFlashing","uFlashingAlpha","uMouse","Vector2","vertexShader","fragmentShader","flatShading","SmoothShading","blending","AdditiveBlending","side","DoubleSide","depthTest","vertexColors","Points","subsystemPayload","payload","processSubsystemResponses","isActive","target","bubblesAttr","removeText","updateBurbleUp","getBubblesSelected","Vector3","subVectors","val","coordinates","_this5","cameraPos","flashingAnimation","memoryNumber","arguments","undefined","response","floor","_testPayload2","winningSubsystem","_lodash2","head","filter","_memoryMaping2","id","has","dat","GUI","props","initGui","transitioning","lightIntensity","lightDistance","lightHelper","angle","uBurbleUp","burbleProgress","showBubbles","particleGlow","thinking","recording","cameraAnimation","offsetY","showXray","onChange","remove","onFinishChange","animationCamera","addColor","color","easeIn","updateTransitioning","messageId","conversationId","inResponseToMessageId","sourceSessionId","sourceClass","messageText","inboundText","preProcessors","time","processor","initialContext","dialogState","contextId","preferredResponder","result","responses","finalContext","fromUserDisplayName","secureResponse","messageType","translated","voice","_MainBrain","size","semanticRight","analityc","afective","semanticLeft","Loaders","startAnimation","brainXRayLight","FONT","assets","_map2","models","loadingManager","LoadingManager","onLoad","handlerLoad","onProgress","handlerProgress","onError","handlerError","handlerStart","setModel","loadBrainTextures","loadOBJs","loadTextures","loadFont","loadSceneBackground","model","XRAY_MODEL","loader","OBJLoader","load","TextureLoader","t","spark","path","urls","CubeTextureLoader","textureCube","FontLoader","url","itemsLoaded","itemsTotal","Font","_message","_parentObject","_position","message","parentObject","Group","textMaterial","MeshBasicMaterial","wireframe","textShapes","generateShapes","text3d","ShapeGeometry","computeBoundingBox","text","centerOffset","boundingBox","max","TweenLite","to","Power2","easeOut","parentGroup","obj","lookAt","BAS","ParticleSystem","brainParticles","chuncks","_chunks2","_init","init","xRayEffect","systemPoints","brainPoints","count","me","PointBufferGeometry","loadingCircle","getLoadingPoints","createAttribute","data","index","num","startVec3","toArray","_me$particlesStartCol","g","b","setRGB","_me$particlesStartCol2","totalDuration","duration","PointsAnimationMaterial","VertexColors","deptWrite","uProgress","uAngle","uPointSizeEffect","uColor","defines","uniformValues","scale","vertexFunctions","ShaderChunk","ease_expo_in_out","quaternion_rotation","vertexParameters","varyingParameters","vertexInit","vertexPosition","vertexColor","fragmentParameters","fragmentShape","xRayMaterial","lightningTexture","depthWrite","error","xRayGeometry","Geometry","fromBufferGeometry","computeFaceNormals","mergeVertices","computeVertexNormals","frustumCulled","customDistanceMaterial","Utils","createDistanceAnimationMaterial","customDepthMaterial","brain","RingBufferGeometry","ThinkingAnimation","alphaAnimation","secuenceAnimation","_flashingCoordinates2","light","uFadeTime","isCustomAlpha","uAlpha","uResolution","selectMemoryThinking","thinkingFadeIn","setDrawRange","locations","delta","_this6","_this7"],"mappings":"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","file":"static/js/app.7470910895e8ad3c2295.js","sourcesContent":["module.exports = {\"affective\":[],\"analytic\":[],\"process\":[],\"semantic\":[],\"episodic\":[],\"cerebellum\":[],\"bridge\":[],\"amygdala\":[],\"lines\":{\"affective\":[],\"analytic\":[],\"process\":[],\"semantic\":[],\"episodic\":[]}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/data/memories.json\n// module id = 2J3f\n// module chunks = 1","module.exports = \"#define GLSLIFY 1\\nuniform vec3 glowColor;\\nvarying float intensity;\\nvarying float alpha;\\nuniform float uFlashingAlpha;\\nuniform bool uIsFlashing;\\nvarying vec4 vBubbles;\\nvarying vec4 vMemory;\\nuniform bool isWinnerActive;\\nuniform float uWinnerSelected;\\nvoid main()\\n{\\n\\n        float distanceToCenter = distance(gl_PointCoord, vec2(0.5));\\n        float pct = 1.0 - smoothstep(0.0, 0.5, distanceToCenter);\\n        vec3 color = vec3(1.0) * gl_FragColor.rgb;\\n\\n        vec3 glow = glowColor * intensity;\\n        if(vBubbles.w == 3.0){ //Winner Bubble\\n            // glow = vec3(0.0,0.9,0.0) * intensity;\\n        }\\n\\n        if(alpha == 5.0) {\\n            //discard;\\n        }\\n\\n        gl_FragColor = vec4(glow, clamp(alpha, 0.0, 1.0));\\n        gl_FragColor = vec4(glow, pct * gl_FragColor.a);\\n\\n        if(uIsFlashing){\\n             gl_FragColor = vec4(glow, pct * gl_FragColor.a * uFlashingAlpha);\\n        }\\n\\n        //Show only the brain section activate\\n        if(vMemory.w == uWinnerSelected && isWinnerActive){\\n            gl_FragColor += vec4(glow,pct * gl_FragColor.a);\\n        }\\n\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/shaders/glow.frag\n// module id = 6KJG\n// module chunks = 1","import noise from '../chunks/noise.raw.xml';\nimport random from '../chunks/random.raw.xml';\nimport rotate from '../chunks/rotate.raw.xml';\n\nexport default () => ({\n    noise,\n    random,\n    rotate,\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/services/chunks.js","module.exports = \"#define GLSLIFY 1\\nuniform vec3 glowColor;\\nuniform float uFadeTime;\\nvarying float intensity;\\nvarying float alpha;\\n\\nvoid main()\\n{\\n\\n float distanceToCenter = distance(gl_PointCoord, vec2(0.5));\\n        float pct = 1.0 - smoothstep(0.0, 0.5, distanceToCenter);\\n        vec3 color = vec3(1.0) * gl_FragColor.rgb;\\n\\n        vec3 glow = glowColor * intensity;\\n\\n        gl_FragColor = vec4(glow, clamp(alpha, 0.0, uFadeTime));\\n\\n        gl_FragColor = vec4(glow, pct * gl_FragColor.a);\\n\\n\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/shaders/flashing.frag\n// module id = 736u\n// module chunks = 1","import * as THREE from \"three\";\nimport io from \"socket.io-client\";\nimport \"three/examples/js/controls/OrbitControls\";\nimport \"three/examples/js/modifiers/BufferSubdivisionModifier\";\nimport Stats from \"three/examples/js/libs/stats.min\";\nimport {\n  EffectComposer,\n  RenderPass,\n  BloomPass,\n  MaskPass,\n} from \"postprocessing\";\n\nclass AbstractApplication {\n  constructor() {\n    this.a_camera = new THREE.PerspectiveCamera(\n      50,\n      window.innerWidth / window.innerHeight,\n      1,\n      1000\n    );\n    this.a_camera.position.z = 1000;\n\n    this.a_scene = new THREE.Scene();\n    this.a_scene.background = new THREE.Color(\"#a7b6d2\");\n\n    this.a_blurScene = new THREE.Scene();\n    this.a_bloomScene = new THREE.Scene();\n\n    this.a_scene.fog = new THREE.Fog(0xa7b6d2, 300, 1300);\n\n    this.a_renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true,\n      preserveDrawingBuffer: false,\n      logarithmicDepthBuffer: true,\n    });\n    this.a_renderer.setPixelRatio(window.devicePixelRatio);\n    this.a_renderer.setSize(window.innerWidth, window.innerHeight);\n    this.a_renderer.sortObjects = false;\n    this.a_renderer.setClearColor(0x00000, 0.0);\n\n    this.a_renderer.shadowMap.enabled = true;\n    this.a_renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    this.a_renderer.gammaInput = true;\n    this.a_renderer.gammaOutput = true;\n    this.a_renderer.shadowDepthMaterialSide = THREE.BackSide;\n\n    this.composer = new EffectComposer(this.a_renderer, {\n      stencilBuffer: true,\n      depthTexture: true,\n    });\n\n    // PASSES\n    this.renderPass = new RenderPass(this.scene, this.camera);\n    //this.renderPass.renderToScreen = true;\n    this.composer.addPass(this.renderPass);\n\n\n    this.bloomPass = new BloomPass({\n      resolutionScale: 0.7,\n      resolution: 2.9,\n      intensity: 2.3,\n      distinction: 9.0,\n      blend: true,\n    });\n\n    this.bloomPass.renderToScreen = true;\n    this.composer.addPass(this.bloomPass);\n\n    this.blurMask = new MaskPass(this.blurScene, this.camera);\n    this.renderPass2 = new RenderPass(this.blurScene, this.camera);\n\n    document.body.appendChild(this.a_renderer.domElement);\n\n    this.stats = AbstractApplication.initStats(document.body);\n\n    this.orbitControls = new THREE.OrbitControls(\n      this.camera,\n      this.a_renderer.domElement\n    );\n    this.orbitControls.enableDamping = true;\n    this.orbitControls.dampingFactor = 0.25;\n    this.orbitControls.enableZoom = true;\n    this.orbitControls.zoomSpeed = 0.1;\n    this.orbitControls.panSpeed = 0.1;\n    this.orbitControls.minDistance = 50;\n    this.orbitControls.maxDistance = 2500;\n    this.orbitControls.autoRotate = false;\n    this.orbitControls.autoRotateSpeed = 1.0;\n    this.orbitControls.rotateSpeed = 0.1;\n    this.orbitControls.screenSpacePanning = true;\n\n    window.addEventListener(\"resize\", this.onWindowResize.bind(this), false);\n    window.addEventListener(\"mousemove\", this.onMouseMove.bind(this), false);\n  }\n\n  get renderer() {\n    return this.a_renderer;\n  }\n\n  get camera() {\n    return this.a_camera;\n  }\n\n  get scene() {\n    return this.a_scene;\n  }\n\n  get blurScene() {\n    return this.a_blurScene;\n  }\n  get bloomScene() {\n    return this.a_bloomScene;\n  }\n\n  static initStats(render) {\n    const stats = new Stats();\n    stats.setMode(0);\n    stats.domElement.style.position = \"absolute\";\n    stats.domElement.style.left = \"0px\";\n    stats.domElement.style.tip = \"0px\";\n    render.appendChild(stats.domElement);\n    return stats;\n  }\n\n  static onMouseMove(e) {}\n  onWindowResize() {\n    this.a_camera.aspect = window.innerWidth / window.innerHeight;\n    this.a_camera.updateProjectionMatrix();\n\n    this.a_renderer.setSize(window.innerWidth, window.innerHeight);\n  }\n\n  animate(timestamp) {\n    requestAnimationFrame(this.animate.bind(this));\n    this.a_renderer.render(this.a_scene, this.a_camera);\n  }\n}\n\nexport default AbstractApplication;\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/views/AbstractApplication.js","module.exports = \"#define GLSLIFY 1\\nuniform vec3 viewVector;\\nuniform float c;\\nuniform float p;\\nuniform float uTime;\\nuniform vec2 uMouse;\\nuniform float uFadeTime;\\nattribute vec2 aDelayDuration;\\nattribute float size;\\nvarying float intensity;\\nvarying float alpha;\\nuniform float uAlpha;\\nuniform bool isCustomAlpha;\\n\\nvoid main()\\n{\\n    if(uFadeTime > 0.00001){\\n\\n    vec3 vNormal = normalize( normalMatrix * normal );\\n\\tvec3 vNormel = normalize( normalMatrix * viewVector );\\n\\tintensity = pow( c - dot(vNormal, vNormel), p );\\n\\n    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n    gl_PointSize = size * ( 300.0 / -mvPosition.z );\\n\\n    float m = mod(size, sin( uTime * 10.0 + (position.x + position.y) / 100.0));\\n\\n        if(m > 0.5 && m < 0.7){\\n          alpha = clamp(abs(sin(uTime * 10.0)), 0.2, 0.5);\\n        }\\n        if(m > 0.8){\\n          alpha = clamp(abs(sin(uTime * 10.0)), 0.2, 0.5);\\n        }\\n\\n        if(m > 0.0 && m < 0.5){\\n          alpha = clamp(abs(sin(uTime * 10.0)), 0.2, 0.7);\\n        }\\n\\n\\n        //static ligthning\\n        if( isCustomAlpha ) {\\n            alpha = uAlpha;\\n        }\\n\\n\\n    gl_PointSize = 9.5 * size;\\n\\n    gl_Position += projectionMatrix * mvPosition;\\n\\n   }\\n\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/shaders/flashing.vert\n// module id = AvWz\n// module chunks = 1","module.exports = \"#define GLSLIFY 1\\nuniform vec3 glowColor;\\nuniform sampler2D lightningTexture;\\nvarying float intensity;\\nvarying vec2 vUv;\\nuniform float offsetY;\\nuniform float uTime;\\n\\nvoid main(){\\n    vec2 uv = vUv;\\n    uv.y += offsetY;\\n\\n  \\tvec3 glow = glowColor * intensity;\\n    vec3 color = vec3(step(0.1, uv.y) - step(0.2, uv.y)) - vec3(texture2D(lightningTexture, uv));\\n\\n\\tfloat alpha = clamp(cos(uTime* 3.0) , 0.5, 1.0);\\n\\n    gl_FragColor = vec4( glow + color, alpha);\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/shaders/xRay.frag\n// module id = EYp+\n// module chunks = 1","module.exports = \"float noise (in vec2 st) {\\n    vec2 i = floor(st);\\n    vec2 f = fract(st);\\n\\n    // Four corners in 2D of a tile\\n    float a = random(i);\\n    float b = random(i + vec2(1.0, 0.0));\\n    float c = random(i + vec2(0.0, 1.0));\\n    float d = random(i + vec2(1.0, 1.0));\\n\\n    // Smooth Interpolation\\n\\n    // Cubic Hermine Curve.  Same as SmoothStep()\\n    vec2 u = f*f*(3.0-2.0*f);\\n    // u = smoothstep(0.,1.,f);\\n\\n    // Mix 4 coorners porcentages\\n    return mix(a, b, u.x) +\\n        (c - a)* u.y * (1.0 - u.x) +\\n        (d - b) * u.x * u.y;\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/chunks/noise.raw.xml\n// module id = FAD+\n// module chunks = 1","/* eslint no-param-reassign: [\"error\", { \"props\": true, \"ignorePropertyModificationsFor\": [\"child\", memories] }] */\nimport * as THREE from \"three\";\nimport { Power4, TweenMax } from \"gsap\";\nimport \"three/examples/js/BufferGeometryUtils\";\nimport AbstractApplication from \"./views/AbstractApplication\";\nimport Loaders from \"./Loaders/Loaders\";\nimport BubblesAnimation from \"./services/bubblesAnimation\";\nimport ThinkingAnimation from \"./services/thinkingAnimation\";\nimport GUI from \"./services/gui\";\nimport Font from \"./services/font\";\nimport ParticleSystem from \"./services/particlesSystem\";\nimport Memories from \"./data/memories.json\";\n\nclass MainBrain extends AbstractApplication {\n  constructor() {\n    super();\n\n    this.clock = new THREE.Clock();\n    this.addBrain = this.addBrain.bind(this);\n    this.addFloor();\n    this.addIllumination();\n\n    this.deltaTime = 0;\n    this.particlesColor = new THREE.Color(0x000000);\n    this.particlesStartColor = new THREE.Color(0x000000);\n    this.loaders = new Loaders(this.runAnimation.bind(this));\n    this.memories = Memories;\n    this.memorySelected = [\n      \"analytic\",\n      \"episodic\",\n      \"process\",\n      \"semantic\",\n      \"affective\",\n    ];\n    this.frame = 0;\n    this.frameName = 0;\n    this.isRecording = false;\n    setTimeout(() => {\n      this.startIntro();\n    }, 1000);\n  }\n\n  addFloor() {\n    const geometry = new THREE.PlaneBufferGeometry(20000, 20000);\n    const material = new THREE.MeshPhongMaterial({\n      opacity: 0.1,\n      transparent: true,\n    });\n    this.plane = new THREE.Mesh(geometry, material);\n    this.plane.receiveShadow = true;\n    this.plane.position.y = -160;\n    this.plane.rotation.x = -0.5 * Math.PI;\n    this.scene.add(this.plane);\n  }\n  addIllumination() {\n    this.ambienlight = new THREE.AmbientLight(0xb8c5cf, 0);\n    this.scene.add(this.ambienlight);\n\n    this.spotLight = new THREE.SpotLight(\n      0xb8c5cf,\n      1.45,\n      175,\n      Math.PI / 2,\n      0.0,\n      0.0\n    );\n    this.spotLight.position.set(0, 500, -10);\n    this.spotLight.castShadow = true;\n\n    this.spotLight.castShadow = true;\n    this.spotLight.shadow = new THREE.LightShadow(\n      new THREE.PerspectiveCamera(\n        54,\n        window.innerWidth / window.innerHeight,\n        1,\n        2000\n      )\n    );\n    this.spotLight.shadow.bias = -0.000222;\n    this.spotLight.shadow.mapSize.width = 1024;\n    this.spotLight.shadow.mapSize.height = 1024;\n\n    this.scene.add(this.spotLight);\n    this.spotLightHelper = new THREE.SpotLightHelper(this.spotLight);\n  }\n\n  addBrain() {\n    this.brainBufferGeometries = [];\n\n    this.loaders.BRAIN_MODEL.traverse((child) => {\n      if (child instanceof THREE.LineSegments) {\n        this.memories.lines = {\n          ...this.memories.lines,\n          ...MainBrain.addLinesPath(child, this.memories),\n        };\n      }\n      if (!(child instanceof THREE.Mesh)) {\n        return;\n      }\n      child.geometry.verticesNeedUpdate = true;\n      // child.material.map = this.loaders.lightTexture;\n      this.brainBufferGeometries.push(child.geometry);\n\n      this.memories = {\n        ...this.memories,\n        ...MainBrain.storeBrainVertices(child, this.memories),\n      };\n    });\n\n    this.endPointsCollections = THREE.BufferGeometryUtils.mergeBufferGeometries(\n      this.brainBufferGeometries\n    );\n  }\n\n  startIntro() {\n    const progress = { p: 1000 };\n    TweenMax.fromTo(\n      progress,\n      6.5,\n      { p: 1000 },\n      {\n        p: 380,\n        ease: Power4.easeInOut,\n        onUpdate: () => {\n          this.camera.position.z = progress.p;\n        },\n        onStart: () => {\n          this.particlesSystem.transform(true);\n        },\n        onComplete: () => {\n          //hide xray\n          this.particlesSystem.xRay.material.uniforms.c.value = 1.0;\n          this.startAutoDemo();\n        }\n      }\n    );\n  }\n\n  startAutoDemo() {\n    let memoryCount = 1;\n    this.scene.add(this.particlesSystem.xRay);\n    let memoryTimer;\n    const me = this;\n    setTimeout(() => {\n      //enable xRay Animation\n      this.particlesSystem.isXRayActive(true);\n      setTimeout(() => {\n        //remove animation\n        this.particlesSystem.isXRayActive(false);\n        //Enable Memories\n        memoryTimer = setInterval(() => {\n          if (memoryCount < 5) {\n            this.bubblesAnimation.updateSubSystem(memoryCount);\n            memoryCount += 1;\n          } else {\n            this.bubblesAnimation.updateSubSystem(0);\n            clearInterval(memoryTimer);\n          }\n        }, 9000);\n      }, 4000);\n    }, 2000);\n  }\n\n  static addLinesPath(mesh, memories) {\n    const keys = Object.keys(memories.lines);\n    keys.map((l) => {\n      if (mesh.name.includes(l)) {\n        memories.lines[l] = mesh.geometry.attributes.position.array;\n        return memories.lines;\n      }\n      return [];\n    });\n  }\n\n  static storeBrainVertices(mesh, memories) {\n    const keys = Object.keys(memories);\n\n    keys.map((m) => {\n      if (mesh.name.includes(m)) {\n        if (memories[m].length) {\n          memories[m].push(mesh.geometry);\n          memories[m] = [\n            THREE.BufferGeometryUtils.mergeBufferGeometries(memories[m]),\n          ];\n          return memories;\n        }\n        return memories[m].push(mesh.geometry);\n      }\n      return [];\n    });\n  }\n\n  runAnimation() {\n    this.gui = new GUI(this);\n    this.addBrain();\n    this.addParticlesSystem();\n    this.font = new Font(this.loaders, this.scene);\n    this.bubblesAnimation = new BubblesAnimation(this);\n    this.bubblesAnimation.initAnimation();\n\n    this.thinkingAnimation = new ThinkingAnimation(this);\n    this.thinkingAnimation.initAnimation();\n\n    // Set Background\n    //this.scene.background = this.loaders.assets.get('sky');\n\n    this.animate();\n  }\n\n  animate(timestamp) {\n    this.orbitControls.update();\n    this.orbitControls.autoRotateSpeed = this.gui.controls.rotationSpeed;\n\n    this.deltaTime += this.clock.getDelta();\n\n    this.particlesSystem.update(\n      this.deltaTime,\n      this.camera,\n      this.particlesSystem.xRay\n    );\n    this.bubblesAnimation.update(this.camera, this.deltaTime);\n    this.thinkingAnimation.update(this.camera, this.deltaTime);\n\n    this.stats.update();\n    requestAnimationFrame(this.animate.bind(this));\n\n    //this.renderer.render(this.a_scene, this.a_camera);\n\n    this.font.facingToCamera(this.camera);\n    this.camera.updateProjectionMatrix();\n\n    this.thinkingAnimation.flashing.geometry.verticesNeedUpdate = true;\n    this.thinkingAnimation.flashing.geometry.attributes.position.needsUpdate = true;\n\n    // composer\n    this.composer.render();\n\n    if (this.isRecording) {\n      if (this.frame > 10) {\n        this.socket.emit(\"render-frame\", {\n          frame: (this.frameName += 1),\n          file: document.querySelector(\"canvas\").toDataURL(),\n        });\n      }\n      this.frame += 1;\n    }\n  }\n  onMouseMove(event) {\n    const y = window.innerHeight - event.clientY;\n    const x = window.innerHeight - event.clientX;\n    //  this.bubblesAnimation.updateMouse(new THREE.Vector2(x, y));\n  }\n  addParticlesSystem() {\n    this.particlesSystem = new ParticleSystem(\n      this,\n      this.endPointsCollections,\n      this.memories\n    );\n    this.scene.add(this.particlesSystem.particles);\n  }\n\n  static getRandomPointOnSphere(r) {\n    const u = THREE.Math.randFloat(0, 1);\n    const v = THREE.Math.randFloat(0, 1);\n    const theta = 2 * Math.PI * u;\n    const phi = Math.acos(2 * v - 1);\n    const x = r * Math.sin(theta) * Math.sin(phi);\n    const y = r * Math.cos(theta) * Math.sin(phi);\n    const z = r * Math.cos(phi);\n    return {\n      x,\n      y,\n      z,\n    };\n  }\n}\n\nexport default MainBrain;\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/MainBrain.js","/* eslint no-param-reassign: [\"error\", { \"props\": true, \"ignorePropertyModificationsFor\": [\"bubbles\"] }] */\nimport * as THREE from 'three';\nimport { Power1, TweenMax } from 'gsap';\nimport _ from 'lodash';\nimport glowVertex from '../shaders/glow.vert';\nimport glowFrag from '../shaders/glow.frag';\nimport memoryMapping from '../data/memoryMaping.json';\nimport testPayload from '../data/testPayload.json';\n\nclass BubblesAnimation {\n    constructor(mainBrain) {\n        this.mainBrain = mainBrain;\n        this.isFlashing = false;\n        this.memorySelected = mainBrain.memorySelected;\n        this.isBubblesInserted = false;\n        this.winner = '';\n        this.winnerGroup = '';\n        this.fistCameraReposition = false;\n    }\n\n    /**\n     * memories //Array of 3 positions x y z\n     * @param bubbles\n     * @returns {Array} of 4 positions x y z w when 'w' is the selector bubble 2.0 = memory and 3.0 = winner\n     */\n    getBubblesSelected(bubbles, subsystem) {\n        const { memories } = this.mainBrain;\n        const bubbleList = [];\n        console.log(subsystem);\n        const { winner, winnerGroup, subsystemResults } = subsystem;\n\n        // Update Winner to use in Update animation\n        this.winner = winner;\n        this.winnerGroup = winnerGroup;\n\n        subsystemResults.forEach((m) => {\n            const memoryGroup = BubblesAnimation.getSubsystemGroup(m.subsystem) || 'episodic';\n\n            const memory = memories[memoryGroup][0].attributes.position.array;\n            const randomPos = THREE.Math.randInt(3 * 1500, (memory.length / 3) - 4);\n\n            const x = memory[(randomPos * 3) + 0] || 0;\n            const y = memory[(randomPos * 3) + 1] || 0;\n            const z = memory[(randomPos * 3) + 2] || 0;\n            let altitude = THREE.Math.randInt(120, 150);\n            const parent = this.mainBrain.particlesSystem.particles;\n\n            if (winner === m.subsystem) {\n                altitude = 200; // highest position\n\n                const geometry = new THREE.SphereGeometry(2, 32, 32);\n                const material = new THREE.MeshNormalMaterial();\n\n                const mesh = new THREE.Mesh(geometry, material);\n                parent.add(mesh);\n                mesh.position.set(x, y, z);\n\n                bubbleList.push(x, y + 150.0, z, 3.0); // w = 3.0 for the winner\n            }\n            const group = new THREE.Object3D();\n            parent.add(group);\n        });\n\n        // Inject bubbles selected in to the all flashing bubbles replace the older one\n        let memoryPos = 0;\n        if (this.isBubblesInserted) {\n            for (let i = 0; i < bubbles.length / 4; i += 1) {\n                const w = bubbles[(i * 4) + 3] || 0;\n\n                // Reset old position\n                if (w === 2.0 || w === 3.0) {\n                    if (memoryPos < bubbleList.length / 4) {\n                        bubbles[(i * 4) + 0] = bubbleList[(memoryPos * 4) + 0];\n                        bubbles[(i * 4) + 1] = bubbleList[(memoryPos * 4) + 1];\n                        bubbles[(i * 4) + 2] = bubbleList[(memoryPos * 4) + 2];\n                        memoryPos += 1;\n                    }\n                }\n            }\n        } else {\n            // New Burbles\n            for (let i = 0; i < bubbleList.length / 4; i += 1) {\n                bubbles[(i * 4) + 0] = bubbleList[(memoryPos * 4) + 0];\n                bubbles[(i * 4) + 1] = bubbleList[(memoryPos * 4) + 1];\n                bubbles[(i * 4) + 2] = bubbleList[(memoryPos * 4) + 2];\n                bubbles[(i * 4) + 3] = bubbleList[(memoryPos * 4) + 3];\n                memoryPos += 1;\n            }\n            this.isBubblesInserted = true;\n        }\n        return bubbleList;\n    }\n\n    isWinnerActive(status) {\n        if (status) {\n            // Getting Memory Id\n            for (let i = 0; i < this.mainBrain.memorySelected.length; i += 1) {\n                if (this.mainBrain.memorySelected[i] === this.winnerGroup) {\n                    const progress = { p: 0.0 };\n                    TweenMax.fromTo(progress, 2.5, { p: 0.0 }, {\n                        p: 1.0,\n                        ease: Power1.easeInOut,\n                        onUpdate: () => {\n                            this.bubbles.material.uniforms.uWinnerAlpha.value = progress.p;\n                        },\n                        onStart: () => {\n                            this.bubbles.material.uniforms.uWinnerSelected.value = i;\n                            this.bubbles.material.uniforms.isWinnerActive.value = true;\n                        },\n                    });\n                }\n            }\n        } else {\n            {\n                const progress = { p: 1.0 };\n                TweenMax.fromTo(progress, 2.5, { p: 1.0 }, {\n                    p: 0.0,\n                    ease: Power1.easeInOut,\n                    onUpdate: () => {\n                        this.bubbles.material.uniforms.uWinnerAlpha.value = progress.p;\n                    },\n                    onComplete: () => {\n                        this.bubbles.material.uniforms.isWinnerActive.value = false;\n                        this.bubbles.material.uniforms.uWinnerSelected.value = 0.0;\n                    },\n                });\n            }\n        }\n    }\n\n\n    initAnimation() {\n        const { scene, camera, memories } = this.mainBrain;\n\n        const particles = 100000;\n        const geometry = new THREE.BufferGeometry();\n        const sizes = [];\n        const positions = [];\n        const colors = [];\n        const delay = [];\n        const duration = 2.5;\n        const maxPointDelay = 1.5;\n        const bubbles = [];\n        const memory = [];\n\n        // Add fake shining bubbles\n        for (let i = 0; i < particles - (this.memorySelected.length * 3); i += 1) {\n            const r = THREE.Math.randInt(0, 4);\n            const mSelector = this.memorySelected[r];\n            const x = memories[mSelector][0].attributes.position.array[(i * 3) + 0] || 0;\n            const y = memories[mSelector][0].attributes.position.array[(i * 3) + 1] || 0;\n            const z = memories[mSelector][0].attributes.position.array[(i * 3) + 2] || 0;\n\n            positions.push(x, y, z);\n            memory.push(x, y, z, r);\n\n            sizes[i] = THREE.Math.randFloat(10.0, 20.0);\n            if ((i % 100) === 0) {\n                const altitude = THREE.Math.randInt(100, 250) + y;\n                bubbles.push(x, altitude, z, 1.0);\n            } else {\n                bubbles.push(x, y, z, 0.0);\n            }\n\n            delay[(i * 2) + 0] = THREE.Math.randFloat(0.5, maxPointDelay);\n            delay[(i * 2) + 1] = duration;\n        }\n\n        geometry.addAttribute('aDelayDuration', new THREE.Float32BufferAttribute(delay, 2));\n        geometry.addAttribute('bubbles', new THREE.Float32BufferAttribute(bubbles, 4));\n        geometry.addAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\n        geometry.addAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\n        geometry.addAttribute('size', new THREE.Float32BufferAttribute(sizes, 1));\n        geometry.addAttribute('aMemory', new THREE.Float32BufferAttribute(memory, 4));\n        geometry.computeBoundingSphere();\n        const customMaterial = new THREE.ShaderMaterial({\n            uniforms:\n                    {\n                        c: { type: 'f', value: 0.9 }, // Control the dynamically intensity.. Disabled\n                        p: { type: 'f', value: 2.8 }, // Control the dynamically intensity.. Disabled\n                        glowColor: { type: 'c', value: new THREE.Color(0x2C3E93) },\n                        viewVector: { type: 'v3', value: camera.position }, // To make intensity dynamically.. Disabled\n                        uTime: { type: 'f', value: 0.0 },\n                        uSlowTime: { type: 'f', value: 0.0 }, // Slow time to make some particles blinking slowly\n                        uBubblesUp: { type: 'f', value: 0.0 }, // Start the animation bubbling up\n                        uIsFlashing: { type: 'b', value: false }, // Make the whole brain flashing\n                        isWinnerActive: { type: 'b', value: false }, // Active the winner section of the brain\n                        uWinnerSelected: { type: 'f', value: 0.0 }, // activate section of the brain from 0 - 4 ['analytic', 'episodic', 'process', 'semantic', 'affective'];\n                        uWinnerAlpha: { type: 'f', value: 0.0 }, // smooth transition\n                        uFlashingAlpha: { type: 'f', value: 0.0 }, // Smooth fade out and fade in to activate or deactivate\n                        uMouse: { type: 'f', value: new THREE.Vector2(0.0) },\n                    },\n            vertexShader: glowVertex,\n            fragmentShader: glowFrag,\n            flatShading: THREE.SmoothShading,\n            blending: THREE.AdditiveBlending,\n            side: THREE.DoubleSide,\n            depthTest: false,\n            vertexColors: false,\n            transparent: true,\n\n        });\n        this.bubbles = new THREE.Points(geometry, customMaterial);\n        this.bubbles.name = 'memory';\n        scene.add(this.bubbles);\n        console.log('Bubble Object', this.bubbles);\n    }\n\n    updateSubSystem(subsystemPayload) {\n        const payload = BubblesAnimation.processSubsystemResponses(subsystemPayload);\n        this.mainBrain.thinkingAnimation.isActive(true);\n        this.bubbles.geometry.attributes.bubbles.needsUpdate = false;\n        const cameraPos = this.mainBrain.camera.position;\n        const { target } = this.mainBrain.orbitControls;\n        const bubblesAttr = this.bubbles.geometry.attributes.bubbles.array;\n        const progress = { p: 1.0 };\n\n        this.isWinnerActive(false);\n        this.mainBrain.font.removeText();\n        TweenMax.fromTo(progress, 2.5, { p: 1.0 }, {\n            p: 0.0,\n            ease: Power1.easeInOut,\n            onUpdate: () => {\n                this.updateBurbleUp(progress.p);\n            },\n            onStart: () => {\n                if (this.fistCameraReposition) {\n                    this.animate(false);\n                }\n            },\n            onComplete: () => {\n                // This function alter the bubblesAttr buffer\n                this.getBubblesSelected(bubblesAttr, payload);\n                this.bubbles.geometry.attributes.bubbles.needsUpdate = true;\n                this.animate(true);\n                this.mainBrain.thinkingAnimation.isActive(false);\n                this.fistCameraReposition = true;\n            },\n        });\n    }\n\n    static processSubsystemResponses(memoryNumber = 0) {\n        const response = Math.floor(testPayload[memoryNumber]) && Math.floor(testPayload[memoryNumber]).attributes || { subsystemResults: [] };\n\n        const winner = response.winningSubsystem;\n        const { subsystemResults } = response;\n        const winnerGroup = BubblesAnimation.getSubsystemGroup(winner);\n        return { winner, winnerGroup, subsystemResults };\n    }\n\n    static getSubsystemGroup(subsystem) {\n        const map = _.head(_.filter(memoryMapping, { id: subsystem }));\n        if (_.has(map, 'group')) {\n            return map.group;\n        }\n        return undefined;\n    }\n\n    update(camera) {\n        this.bubbles.material.uniforms.viewVector.value =\n          new THREE.Vector3().subVectors(camera.position, this.bubbles.position);\n        this.bubbles.material.uniforms.uTime.value += 1 / 20;\n        this.bubbles.material.uniforms.uSlowTime.value += (1 / 400);\n    }\n    updateBurbleUp(val) {\n        this.bubbles.material.uniforms.uBubblesUp.value = val;\n    }\n    updateMouse(coordinates) {\n        this.bubbles.material.uniforms.uMouse.value = coordinates;\n    }\n\n    flashingAnimation(isActive) {\n        this.bubbles.material.uniforms.uIsFlashing.value = isActive;\n        this.mainBrain.thinkingAnimation.isActive(false);\n        if (isActive) {\n            const progress = { p: 0.0 };\n            TweenMax.fromTo(progress, 2.5, { p: 0.0 }, {\n                p: 1.0,\n                ease: Power1.easeInOut,\n                onUpdate: () => {\n                    this.bubbles.material.uniforms.uFlashingAlpha.value = progress.p;\n                    this.isFlashing = true;\n                },\n            });\n        } else {\n            const progress = { p: 1.0 };\n            TweenMax.fromTo(progress, 2.5, { p: 1.0 }, {\n                p: 0.0,\n                ease: Power1.easeInOut,\n                onUpdate: () => {\n                    this.bubbles.material.uniforms.uFlashingAlpha.value = progress.p;\n                    this.isFlashing = false;\n                },\n            });\n        }\n    }\n\n    animate(isActive) {\n        const cameraPos = this.mainBrain.camera.position;\n        const { target } = this.mainBrain.orbitControls;\n        if (!this.isFlashing) {\n            this.flashingAnimation(true);\n        }\n        if (isActive) {\n            const progress = { p: 0.0, camera: 0.0 };\n            TweenMax.fromTo(progress, 2.5, { p: 0.0, camera: 0.0 }, {\n                p: 1.0,\n                camera: 0.5,\n                ease: Power1.easeInOut,\n                onUpdate: () => {\n                    this.updateBurbleUp(progress.p);\n                    this.mainBrain.orbitControls.target.set(target.x, target.y + progress.camera, target.z);\n                    this.mainBrain.camera.position.set(cameraPos.x, cameraPos.y + progress.camera, cameraPos.z);\n                },\n                onComplete: () => {\n                    this.isWinnerActive(true);\n                },\n            });\n        } else {\n            const progress = { p: 1.0, camera: 0.5 };\n            TweenMax.fromTo(progress, 2.5, { p: 1.0, camera: 0.5 }, {\n                p: 0.0,\n                camera: 0.0,\n                ease: Power1.easeInOut,\n                onUpdate: () => {\n                    this.updateBurbleUp(progress.p);\n                    this.mainBrain.orbitControls.target.set(target.x, target.y - progress.camera, target.z);\n                    this.mainBrain.camera.position.set(cameraPos.x, cameraPos.y - progress.camera, cameraPos.z);\n                },\n                onStart: () => {\n                    this.isWinnerActive(false);\n                },\n            });\n        }\n    }\n}\n\nexport default BubblesAnimation;\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/services/bubblesAnimation.js","module.exports = [{\"id\":\"IntentFAQ\",\"group\":\"semantic\"},{\"id\":\"SocialTalk\",\"group\":\"semantic\"},{\"id\":\"FAQ\",\"group\":\"semantic\"},{\"id\":\"Semnet\",\"group\":\"semantic\"},{\"id\":\"Escalate\",\"group\":\"semantic\"},{\"id\":\"EpisodicMemory\",\"group\":\"episodic\"},{\"id\":\"Affective\",\"group\":\"affective\"},{\"id\":\"AIML\",\"group\":\"affective\"},{\"id\":\"Bpn\",\"group\":\"process\"},{\"id\":\"Cqa\",\"group\":\"analytic\"},{\"id\":\"EQA\",\"group\":\"analytic\"},{\"id\":\"LogicNet\",\"group\":\"analytic\"}]\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/data/memoryMaping.json\n// module id = VGPT\n// module chunks = 1","import * as THREE from \"three\";\nimport { Power1, Back, TweenMax } from \"gsap\";\nimport * as dat from \"three/examples/js/libs/dat.gui.min\";\nimport testPayload from \"../data/testPayload\";\n\nclass GUI {\n  constructor(props) {\n    this.initGui(props);\n  }\n\n  initGui(props) {\n    const mainBrain = props;\n    this.controls = new (function c() {\n      this.rotationSpeed = 0.5;\n\n      this.floor = 0xdde3e9;\n      this.transitioning = false;\n      this.autoRotate = true;\n      this.lightIntensity = 1.45;\n      this.lightDistance = 175;\n\n      this.lightHelper = false;\n      this.angle = 1.0;\n      this.uBurbleUp = 0.0;\n      this.burbleProgress = 0.1;\n\n      this.showBubbles = false;\n      this.particleGlow = 0xdde3e9;\n      this.memory = 1;\n      this.thinking = false;\n      this.startIntro = true;\n      this.recording = false;\n      this.cameraAnimation = 1;\n      this.c = 1.11;\n      this.p = 1.0;\n      this.offsetY = 0.1;\n      this.showXray = false;\n    })();\n\n    const gui = new dat.GUI();\n\n    gui.add(this.controls, \"rotationSpeed\", 0.1, 2.0);\n    gui.add(this.controls, \"autoRotate\").onChange((val) => {\n      mainBrain.orbitControls.autoRotate = val;\n    });\n\n    gui.add(this.controls, \"recording\").onChange((val) => {\n      mainBrain.isRecording = val;\n    });\n\n    gui.add(this.controls, \"showXray\").onChange((e) => {\n      mainBrain.particlesSystem.isXRayActive(e);\n    });\n\n    gui.add(this.controls, \"lightIntensity\", 0.0, 2.0).onChange((val) => {\n      this.spotLight.intensity = val;\n    });\n\n    gui.add(this.controls, \"c\", 0.0, 2.0).onChange((val) => {\n      mainBrain.particlesSystem.xRay.material.uniforms.c.value = val;\n    });\n    gui.add(this.controls, \"p\", 0.0, 20.0).onChange((val) => {\n      mainBrain.particlesSystem.xRay.material.uniforms.p.value = val;\n    });\n\n    gui.add(this.controls, \"offsetY\", 0.0, 2.0).onChange((val) => {\n      mainBrain.particlesSystem.xRay.material.uniforms.offsetY.value = val;\n    });\n\n    gui.add(this.controls, \"lightHelper\").onChange((val) => {\n      if (val) {\n        mainBrain.scene.add(mainBrain.spotLightHelper);\n      } else {\n        mainBrain.scene.remove(mainBrain.spotLightHelper);\n      }\n    });\n    gui.add(this.controls, \"cameraAnimation\", 0, 4).onFinishChange((val) => {\n      mainBrain.thinkingAnimation.animationCamera(val);\n    });\n\n    gui.add(this.controls, \"lightDistance\", 0.0, 1800.0).onChange((val) => {\n      mainBrain.spotLight.position.set(0, val, -10);\n    });\n\n    gui.add(this.controls, \"uBurbleUp\", 0.0, 1.0).onChange((val) => {\n      mainBrain.bubblesAnimation.updateBurbleUp(val);\n    });\n\n    gui.add(this.controls, \"memory\", 0, 4).onChange((val) => {\n      mainBrain.bubblesAnimation.updateSubSystem(testPayload);\n    });\n\n    gui.addColor(this.controls, \"particleGlow\").onChange((e) => {\n      mainBrain.scene.background = new THREE.Color(e);\n    });\n\n    gui.addColor(this.controls, \"floor\").onChange((e) => {\n      mainBrain.plane.material.color = new THREE.Color(e);\n    });\n\n    gui.add(this.controls, \"burbleProgress\", 0.0, 1.0).onChange((val) => {\n      mainBrain.bubblesAnimation.updateBurbleUp(val);\n    });\n\n    gui.add(this.controls, \"showBubbles\").onChange((val) => {\n      mainBrain.bubblesAnimation.animate(val);\n    });\n\n    gui.add(this.controls, \"startIntro\").onChange((val) => {\n      mainBrain.startIntro(val);\n    });\n\n    gui.add(this.controls, \"thinking\").onChange((e) => {\n      mainBrain.thinkingAnimation.isActive(e);\n    });\n\n    gui.add(this.controls, \"transitioning\").onChange((e) => {\n      if (e) {\n        const progress = { p: 0.0 };\n        TweenMax.fromTo(\n          progress,\n          2.0,\n          { p: 0.0 },\n          {\n            p: 1.5,\n            ease: Power1.easeIn,\n            onUpdate: (value) => {\n              mainBrain.particlesSystem.updateTransitioning(progress.p);\n            },\n          }\n        );\n      } else {\n        const progress = { p: 1.0 };\n        TweenMax.fromTo(\n          progress,\n          2.0,\n          { p: 1.0 },\n          {\n            p: 0.5,\n            ease: Power1.easeIn,\n            onUpdate: (value) => {\n              mainBrain.particlesSystem.updateTransitioning(progress.p);\n            },\n          }\n        );\n      }\n      // return this.material.uniforms['test'].value = e\n    });\n  }\n}\n\nexport default GUI;\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/services/gui.js","module.exports = \"float random (in vec2 st) {\\n   return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/chunks/random.raw.xml\n// module id = XbjG\n// module chunks = 1","module.exports = [{\"messageId\":\"d542ac85-88c9-4d49-a5cb-08514cb67ba0\",\"conversationId\":\"LDWNSLVXAAIAA-1\",\"inResponseToMessageId\":\"76186dad-cba3-423f-ae27-35a796028c24\",\"sourceSessionId\":\"b9e1fdeb-4417-463f-a9f2-4f2253d9e38b\",\"sourceClass\":\"ContextDialogManagementService\",\"messageText\":null,\"attributes\":{\"inboundText\":\"hello\",\"preProcessors\":[{\"time\":\"21.31 μs\",\"processor\":\"SetCustomConversationAttributesProcessor\"},{\"time\":\"50.09 μs\",\"processor\":\"TranslationProcessor\"},{\"time\":\"723.8 ms\",\"processor\":\"InboundNlpProcessor\"},{\"time\":\"48.58 ms\",\"processor\":\"CorefProcessor\"},{\"time\":\"322.6 ms\",\"processor\":\"GoalAndEntityProcessor\"},{\"time\":\"221.3 ms\",\"processor\":\"UserAffectUpdateService\"},{\"time\":\"9.804 ms\",\"processor\":\"AnalyticsProcessor\"},{\"time\":\"29.28 μs\",\"processor\":\"BpnLearningProcessor\"}],\"winningSubsystem\":\"analytic\",\"initialContext\":{\"dialogState\":\"ACTIVE\",\"contextId\":\"763decf0-31b2-4e3c-b44b-531a294c6fcf\",\"preferredResponder\":null},\"subsystemResults\":[{\"result\":\"OK\",\"subsystem\":\"Semnet\",\"responses\":[],\"time\":\"13.63 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Bpn\",\"responses\":[],\"time\":\"18.43 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"AIML\",\"responses\":[\"Hi victor, How can I help you?.\"],\"time\":\"31.98 ms\"},{\"result\":\"NONE\",\"subsystem\":\"LogicNet\",\"responses\":[],\"time\":\"17.74 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"DontKnow\",\"responses\":[null],\"time\":\"15.94 ms\"},{\"result\":\"NONE\",\"subsystem\":\"FAQ\",\"responses\":[],\"time\":\"43.49 ms\"},{\"result\":\"NONE\",\"subsystem\":\"EQA\",\"responses\":[],\"time\":\"19.72 ms\"},{\"result\":\"NONE\",\"subsystem\":\"EpisodicMemory\",\"responses\":[],\"time\":\"706.8 ms\"},{\"result\":\"NONE\",\"subsystem\":\"IntentFAQ\",\"responses\":[],\"time\":\"55.04 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Affective\",\"responses\":[],\"time\":\"24.98 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Escalate\",\"responses\":[],\"time\":\"10.61 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"SocialTalk\",\"responses\":[null],\"time\":\"22.22 ms\"},{\"result\":\"NONE\",\"subsystem\":\"SemnetDoc\",\"responses\":[],\"time\":\"13.79 ms\"},{\"result\":\"NONE\",\"subsystem\":\"AcknowledgeDefault\",\"responses\":[],\"time\":\"24.76 ms\"}],\"finalContext\":{\"dialogState\":\"ACTIVE\",\"contextId\":\"763decf0-31b2-4e3c-b44b-531a294c6fcf\",\"preferredResponder\":null}},\"fromUserDisplayName\":\"Amelia\",\"secureResponse\":false,\"id\":\"d542ac85-88c9-4d49-a5cb-08514cb67ba0\",\"messageType\":\"OutboundArbitrationResultsMessage\",\"translated\":false,\"voice\":\"VW Julie\"},{\"messageId\":\"d542ac85-88c9-4d49-a5cb-08514cb67ba0\",\"conversationId\":\"LDWNSLVXAAIAA-1\",\"inResponseToMessageId\":\"76186dad-cba3-423f-ae27-35a796028c24\",\"sourceSessionId\":\"b9e1fdeb-4417-463f-a9f2-4f2253d9e38b\",\"sourceClass\":\"ContextDialogManagementService\",\"messageText\":null,\"attributes\":{\"inboundText\":\"hello\",\"preProcessors\":[{\"time\":\"21.31 μs\",\"processor\":\"SetCustomConversationAttributesProcessor\"},{\"time\":\"50.09 μs\",\"processor\":\"TranslationProcessor\"},{\"time\":\"723.8 ms\",\"processor\":\"InboundNlpProcessor\"},{\"time\":\"48.58 ms\",\"processor\":\"CorefProcessor\"},{\"time\":\"322.6 ms\",\"processor\":\"GoalAndEntityProcessor\"},{\"time\":\"221.3 ms\",\"processor\":\"UserAffectUpdateService\"},{\"time\":\"9.804 ms\",\"processor\":\"AnalyticsProcessor\"},{\"time\":\"29.28 μs\",\"processor\":\"BpnLearningProcessor\"}],\"winningSubsystem\":\"episodic\",\"initialContext\":{\"dialogState\":\"ACTIVE\",\"contextId\":\"763decf0-31b2-4e3c-b44b-531a294c6fcf\",\"preferredResponder\":null},\"subsystemResults\":[{\"result\":\"OK\",\"subsystem\":\"Semnet\",\"responses\":[],\"time\":\"13.63 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Bpn\",\"responses\":[],\"time\":\"18.43 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"AIML\",\"responses\":[\"Hi victor, How can I help you?.\"],\"time\":\"31.98 ms\"},{\"result\":\"NONE\",\"subsystem\":\"LogicNet\",\"responses\":[],\"time\":\"17.74 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"DontKnow\",\"responses\":[null],\"time\":\"15.94 ms\"},{\"result\":\"NONE\",\"subsystem\":\"FAQ\",\"responses\":[],\"time\":\"43.49 ms\"},{\"result\":\"NONE\",\"subsystem\":\"EQA\",\"responses\":[],\"time\":\"19.72 ms\"},{\"result\":\"NONE\",\"subsystem\":\"EpisodicMemory\",\"responses\":[],\"time\":\"706.8 ms\"},{\"result\":\"NONE\",\"subsystem\":\"IntentFAQ\",\"responses\":[],\"time\":\"55.04 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Affective\",\"responses\":[],\"time\":\"24.98 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Escalate\",\"responses\":[],\"time\":\"10.61 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"SocialTalk\",\"responses\":[null],\"time\":\"22.22 ms\"},{\"result\":\"NONE\",\"subsystem\":\"SemnetDoc\",\"responses\":[],\"time\":\"13.79 ms\"},{\"result\":\"NONE\",\"subsystem\":\"AcknowledgeDefault\",\"responses\":[],\"time\":\"24.76 ms\"}],\"finalContext\":{\"dialogState\":\"ACTIVE\",\"contextId\":\"763decf0-31b2-4e3c-b44b-531a294c6fcf\",\"preferredResponder\":null}},\"fromUserDisplayName\":\"Amelia\",\"secureResponse\":false,\"id\":\"d542ac85-88c9-4d49-a5cb-08514cb67ba0\",\"messageType\":\"OutboundArbitrationResultsMessage\",\"translated\":false,\"voice\":\"VW Julie\"},{\"messageId\":\"d542ac85-88c9-4d49-a5cb-08514cb67ba0\",\"conversationId\":\"LDWNSLVXAAIAA-1\",\"inResponseToMessageId\":\"76186dad-cba3-423f-ae27-35a796028c24\",\"sourceSessionId\":\"b9e1fdeb-4417-463f-a9f2-4f2253d9e38b\",\"sourceClass\":\"ContextDialogManagementService\",\"messageText\":null,\"attributes\":{\"inboundText\":\"hello\",\"preProcessors\":[{\"time\":\"21.31 μs\",\"processor\":\"SetCustomConversationAttributesProcessor\"},{\"time\":\"50.09 μs\",\"processor\":\"TranslationProcessor\"},{\"time\":\"723.8 ms\",\"processor\":\"InboundNlpProcessor\"},{\"time\":\"48.58 ms\",\"processor\":\"CorefProcessor\"},{\"time\":\"322.6 ms\",\"processor\":\"GoalAndEntityProcessor\"},{\"time\":\"221.3 ms\",\"processor\":\"UserAffectUpdateService\"},{\"time\":\"9.804 ms\",\"processor\":\"AnalyticsProcessor\"},{\"time\":\"29.28 μs\",\"processor\":\"BpnLearningProcessor\"}],\"winningSubsystem\":\"process\",\"initialContext\":{\"dialogState\":\"ACTIVE\",\"contextId\":\"763decf0-31b2-4e3c-b44b-531a294c6fcf\",\"preferredResponder\":null},\"subsystemResults\":[{\"result\":\"OK\",\"subsystem\":\"Semnet\",\"responses\":[],\"time\":\"13.63 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Bpn\",\"responses\":[],\"time\":\"18.43 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"AIML\",\"responses\":[\"Hi victor, How can I help you?.\"],\"time\":\"31.98 ms\"},{\"result\":\"NONE\",\"subsystem\":\"LogicNet\",\"responses\":[],\"time\":\"17.74 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"DontKnow\",\"responses\":[null],\"time\":\"15.94 ms\"},{\"result\":\"NONE\",\"subsystem\":\"FAQ\",\"responses\":[],\"time\":\"43.49 ms\"},{\"result\":\"NONE\",\"subsystem\":\"EQA\",\"responses\":[],\"time\":\"19.72 ms\"},{\"result\":\"NONE\",\"subsystem\":\"EpisodicMemory\",\"responses\":[],\"time\":\"706.8 ms\"},{\"result\":\"NONE\",\"subsystem\":\"IntentFAQ\",\"responses\":[],\"time\":\"55.04 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Affective\",\"responses\":[],\"time\":\"24.98 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Escalate\",\"responses\":[],\"time\":\"10.61 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"SocialTalk\",\"responses\":[null],\"time\":\"22.22 ms\"},{\"result\":\"NONE\",\"subsystem\":\"SemnetDoc\",\"responses\":[],\"time\":\"13.79 ms\"},{\"result\":\"NONE\",\"subsystem\":\"AcknowledgeDefault\",\"responses\":[],\"time\":\"24.76 ms\"}],\"finalContext\":{\"dialogState\":\"ACTIVE\",\"contextId\":\"763decf0-31b2-4e3c-b44b-531a294c6fcf\",\"preferredResponder\":null}},\"fromUserDisplayName\":\"Amelia\",\"secureResponse\":false,\"id\":\"d542ac85-88c9-4d49-a5cb-08514cb67ba0\",\"messageType\":\"OutboundArbitrationResultsMessage\",\"translated\":false,\"voice\":\"VW Julie\"},{\"messageId\":\"d542ac85-88c9-4d49-a5cb-08514cb67ba0\",\"conversationId\":\"LDWNSLVXAAIAA-1\",\"inResponseToMessageId\":\"76186dad-cba3-423f-ae27-35a796028c24\",\"sourceSessionId\":\"b9e1fdeb-4417-463f-a9f2-4f2253d9e38b\",\"sourceClass\":\"ContextDialogManagementService\",\"messageText\":null,\"attributes\":{\"inboundText\":\"hello\",\"preProcessors\":[{\"time\":\"21.31 μs\",\"processor\":\"SetCustomConversationAttributesProcessor\"},{\"time\":\"50.09 μs\",\"processor\":\"TranslationProcessor\"},{\"time\":\"723.8 ms\",\"processor\":\"InboundNlpProcessor\"},{\"time\":\"48.58 ms\",\"processor\":\"CorefProcessor\"},{\"time\":\"322.6 ms\",\"processor\":\"GoalAndEntityProcessor\"},{\"time\":\"221.3 ms\",\"processor\":\"UserAffectUpdateService\"},{\"time\":\"9.804 ms\",\"processor\":\"AnalyticsProcessor\"},{\"time\":\"29.28 μs\",\"processor\":\"BpnLearningProcessor\"}],\"winningSubsystem\":\"semantic\",\"initialContext\":{\"dialogState\":\"ACTIVE\",\"contextId\":\"763decf0-31b2-4e3c-b44b-531a294c6fcf\",\"preferredResponder\":null},\"subsystemResults\":[{\"result\":\"OK\",\"subsystem\":\"Semnet\",\"responses\":[],\"time\":\"13.63 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Bpn\",\"responses\":[],\"time\":\"18.43 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"AIML\",\"responses\":[\"Hi victor, How can I help you?.\"],\"time\":\"31.98 ms\"},{\"result\":\"NONE\",\"subsystem\":\"LogicNet\",\"responses\":[],\"time\":\"17.74 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"DontKnow\",\"responses\":[null],\"time\":\"15.94 ms\"},{\"result\":\"NONE\",\"subsystem\":\"FAQ\",\"responses\":[],\"time\":\"43.49 ms\"},{\"result\":\"NONE\",\"subsystem\":\"EQA\",\"responses\":[],\"time\":\"19.72 ms\"},{\"result\":\"NONE\",\"subsystem\":\"EpisodicMemory\",\"responses\":[],\"time\":\"706.8 ms\"},{\"result\":\"NONE\",\"subsystem\":\"IntentFAQ\",\"responses\":[],\"time\":\"55.04 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Affective\",\"responses\":[],\"time\":\"24.98 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Escalate\",\"responses\":[],\"time\":\"10.61 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"SocialTalk\",\"responses\":[null],\"time\":\"22.22 ms\"},{\"result\":\"NONE\",\"subsystem\":\"SemnetDoc\",\"responses\":[],\"time\":\"13.79 ms\"},{\"result\":\"NONE\",\"subsystem\":\"AcknowledgeDefault\",\"responses\":[],\"time\":\"24.76 ms\"}],\"finalContext\":{\"dialogState\":\"ACTIVE\",\"contextId\":\"763decf0-31b2-4e3c-b44b-531a294c6fcf\",\"preferredResponder\":null}},\"fromUserDisplayName\":\"Amelia\",\"secureResponse\":false,\"id\":\"d542ac85-88c9-4d49-a5cb-08514cb67ba0\",\"messageType\":\"OutboundArbitrationResultsMessage\",\"translated\":false,\"voice\":\"VW Julie\"},{\"messageId\":\"d542ac85-88c9-4d49-a5cb-08514cb67ba0\",\"conversationId\":\"LDWNSLVXAAIAA-1\",\"inResponseToMessageId\":\"76186dad-cba3-423f-ae27-35a796028c24\",\"sourceSessionId\":\"b9e1fdeb-4417-463f-a9f2-4f2253d9e38b\",\"sourceClass\":\"ContextDialogManagementService\",\"messageText\":null,\"attributes\":{\"inboundText\":\"hello\",\"preProcessors\":[{\"time\":\"21.31 μs\",\"processor\":\"SetCustomConversationAttributesProcessor\"},{\"time\":\"50.09 μs\",\"processor\":\"TranslationProcessor\"},{\"time\":\"723.8 ms\",\"processor\":\"InboundNlpProcessor\"},{\"time\":\"48.58 ms\",\"processor\":\"CorefProcessor\"},{\"time\":\"322.6 ms\",\"processor\":\"GoalAndEntityProcessor\"},{\"time\":\"221.3 ms\",\"processor\":\"UserAffectUpdateService\"},{\"time\":\"9.804 ms\",\"processor\":\"AnalyticsProcessor\"},{\"time\":\"29.28 μs\",\"processor\":\"BpnLearningProcessor\"}],\"winningSubsystem\":\"affective\",\"initialContext\":{\"dialogState\":\"ACTIVE\",\"contextId\":\"763decf0-31b2-4e3c-b44b-531a294c6fcf\",\"preferredResponder\":null},\"subsystemResults\":[{\"result\":\"OK\",\"subsystem\":\"Semnet\",\"responses\":[],\"time\":\"13.63 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Bpn\",\"responses\":[],\"time\":\"18.43 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"AIML\",\"responses\":[\"Hi victor, How can I help you?.\"],\"time\":\"31.98 ms\"},{\"result\":\"NONE\",\"subsystem\":\"LogicNet\",\"responses\":[],\"time\":\"17.74 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"DontKnow\",\"responses\":[null],\"time\":\"15.94 ms\"},{\"result\":\"NONE\",\"subsystem\":\"FAQ\",\"responses\":[],\"time\":\"43.49 ms\"},{\"result\":\"NONE\",\"subsystem\":\"EQA\",\"responses\":[],\"time\":\"19.72 ms\"},{\"result\":\"NONE\",\"subsystem\":\"EpisodicMemory\",\"responses\":[],\"time\":\"706.8 ms\"},{\"result\":\"NONE\",\"subsystem\":\"IntentFAQ\",\"responses\":[],\"time\":\"55.04 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Affective\",\"responses\":[],\"time\":\"24.98 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Escalate\",\"responses\":[],\"time\":\"10.61 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"SocialTalk\",\"responses\":[null],\"time\":\"22.22 ms\"},{\"result\":\"NONE\",\"subsystem\":\"SemnetDoc\",\"responses\":[],\"time\":\"13.79 ms\"},{\"result\":\"NONE\",\"subsystem\":\"AcknowledgeDefault\",\"responses\":[],\"time\":\"24.76 ms\"}],\"finalContext\":{\"dialogState\":\"ACTIVE\",\"contextId\":\"763decf0-31b2-4e3c-b44b-531a294c6fcf\",\"preferredResponder\":null}},\"fromUserDisplayName\":\"Amelia\",\"secureResponse\":false,\"id\":\"d542ac85-88c9-4d49-a5cb-08514cb67ba0\",\"messageType\":\"OutboundArbitrationResultsMessage\",\"translated\":false,\"voice\":\"VW Julie\"}]\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/data/testPayload.json\n// module id = cQvb\n// module chunks = 1","module.exports = \"#define GLSLIFY 1\\nuniform vec3 viewVector;\\nuniform float c;\\nuniform float p;\\nuniform float uTime;\\nvarying float intensity;\\nvarying  vec2 vUv;\\n\\nvoid main(){\\n\\n    vUv = uv;\\n\\n    vec3 vNormal = normalize( normalMatrix * normal );\\n\\tvec3 vNormel = normalize( normalMatrix * viewVector );\\n    intensity = pow(c - abs(dot(vNormal, vec3(0, 0, 1))), p);\\n\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n }\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/shaders/xRay.vert\n// module id = cRIw\n// module chunks = 1","import './css/style.css';\nimport MainBrain from './js/MainBrain';\n\n// eslint-disable-next-line\nnew MainBrain()\n\n\n\n// WEBPACK FOOTER //\n// ./src/app.js","module.exports = {\"episodic\":{\"x\":92,\"y\":45,\"z\":0,\"size\":50,\"camera\":{\"x\":144,\"y\":30,\"z\":284.6}},\"semanticRight\":{\"x\":20,\"y\":-30,\"z\":65,\"size\":50,\"camera\":{\"x\":100.92543906042464,\"y\":-0.9434978080745353,\"z\":-238.15054105700113}},\"analityc\":{\"x\":-80,\"y\":20,\"z\":0,\"size\":50,\"camera\":{\"x\":-231.7315097929428,\"y\":-17.545964846039936,\"z\":-221.1965290742952}},\"process\":{\"x\":-50,\"y\":75,\"z\":0,\"size\":50,\"camera\":{\"x\":-152.59773939016097,\"y\":152.71424382251672,\"z\":237.33425301574184}},\"afective\":{\"x\":-100,\"y\":-30,\"z\":0,\"size\":50,\"camera\":{\"x\":-236.1407685891055,\"y\":-15.365212485321477,\"z\":-221.51856763625176}},\"semanticLeft\":{\"x\":20,\"y\":-30,\"z\":-65,\"size\":50,\"camera\":-1}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/data/flashingCoordinates.json\n// module id = hmLD\n// module chunks = 1","module.exports = \"vec2 rotate2D(vec2 _st, float _angle){\\n        _st -= 0.5;\\n        _st =  mat2(cos(_angle),-sin(_angle), sin(_angle),cos(_angle)) * _st;\\n        _st += 0.5;\\n  return _st;\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/chunks/rotate.raw.xml\n// module id = joTG\n// module chunks = 1","import * as THREE from 'three';\nimport 'three/examples/js/loaders/OBJLoader';\n\nclass Loaders {\n    constructor(startAnimation) {\n        this.BRAIN_MODEL = {};\n        this.brainXRayLight = {};\n        this.FONT = {};\n        this.assets = new Map();\n        this.models = ['BrainUVs.obj'];\n        this.loadingManager = new THREE.LoadingManager();\n        this.startAnimation = startAnimation;\n        this.loadingManager.onLoad = this.handlerLoad.bind(this);\n        this.loadingManager.onProgress = this.handlerProgress;\n        this.loadingManager.onError = this.handlerError;\n        this.loadingManager.onStart = this.handlerStart;\n        this.setModel = this.setModel.bind(this);\n        this.loadBrainTextures();\n        this.loadOBJs();\n        this.loadTextures();\n        this.loadFont();\n        this.loadSceneBackground();\n    }\n\n    static handlerStart() {\n        console.log('Starting');\n    }\n    static handlerProgress(url, itemsLoaded, itemsTotal) {\n        console.log(`Loading file: ${url}.\\nLoaded ${itemsLoaded} of ${itemsTotal} files.`);\n    }\n    handlerLoad() {\n        console.log('loading Complete!');\n        this.startAnimation();\n    }\n    static handlerError(url) {\n        console.log(`There was an error loading ${url}`);\n    }\n    setModel(model, i) {\n        switch (i) {\n            case 0:\n                this.BRAIN_MODEL = model;\n                break;\n            case 1:\n                this.XRAY_MODEL = model;\n                break;\n            default:\n                this.BRAIN_MODEL = model;\n        }\n    }\n\n    loadOBJs() {\n        const loader = new THREE.OBJLoader(this.loadingManager);\n        this.models.forEach((m, i) => {\n            loader.load(`static/models/${m}`, (model) => {\n                this.setModel(model, i);\n            });\n        });\n    }\n\n    loadTextures() {\n        const loader = new THREE.TextureLoader(this.loadingManager);\n        loader.load('static/textures/spark1.png', (t) => {\n            this.spark = t;\n        });\n    }\n\n    loadBrainTextures() {\n        const loader = new THREE.TextureLoader(this.loadingManager);\n        loader.load('static/textures/brainXRayLight.png', (t) => {\n            this.brainXRayLight = t;\n        });\n    }\n\n    loadSceneBackground() {\n        const cubeTextureLoader = new THREE.CubeTextureLoader(this.loadingManager);\n        const path = 'static/textures/sky/';\n        const format = '.png';\n        const urls = [\n            `${path}px${format}`, `${path}nx${format}`,\n            `${path}py${format}`, `${path}ny${format}`,\n            `${path}pz${format}`, `${path}nz${format}`,\n        ];\n\n        cubeTextureLoader.load(urls, (textureCube) => {\n            this.assets.set('sky', textureCube);\n        });\n    }\n\n    loadFont() {\n        const fontLoader = new THREE.FontLoader(this.loadingManager);\n        fontLoader.load('static/fonts/Roboto_Regular.json', (font) => {\n            this.FONT = font;\n        });\n    }\n}\n\nexport default Loaders;\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/Loaders/Loaders.js","import * as THREE from 'three';\nimport { Power2, TweenLite } from 'gsap';\n\nclass Font {\n    constructor(loader, scene) {\n        this.font = loader.FONT;\n        this.scene = scene;\n    }\n\n    makeTextSprite(_message, _parentObject, _position, size = 2) {\n        const message = _message;\n        const parentObject = _parentObject;\n        const position = _position;\n        if (parentObject) {\n            const group = new THREE.Group();\n            this.scene.add(group);\n            const textMaterial = new THREE.MeshBasicMaterial({\n                color: new THREE.Color(1, 2, 1),\n                side: THREE.DoubleSide,\n                wireframe: false,\n            });\n            const textShapes = this.font.generateShapes(message, size, size);\n            const text3d = new THREE.ShapeGeometry(textShapes);\n            text3d.computeBoundingBox();\n            const text = new THREE.Mesh(text3d, textMaterial);\n            const centerOffset = text.geometry.boundingBox.max.x / 2.0;\n            text.position.set(position.x - centerOffset, position.y - 10, position.z);\n            text.type = 'Font';\n\n            text.material.opacity = 0;\n            text.material.transparent = true;\n            parentObject.add(text);\n\n            TweenLite.to(text.material, 2.5, { ease: Power2.easeOut, opacity: 1.0 });\n            TweenLite.to(text.position, 2.5, { ease: Power2.easeOut, y: position.y + 2 });\n        }\n    }\n\n    removeText(parentGroup) {\n        const removeFrom = parentGroup || this.scene || [];\n\n        removeFrom.traverse((obj) => {\n            if (obj instanceof THREE.Mesh && obj.type === 'Font') {\n                TweenLite.to(obj.material, 2.5, { ease: Power2.easeOut, opacity: 0.0 });\n                TweenLite.to(obj.position, 2.5, { ease: Power2.easeOut, y: obj.position.y - 10, onComplete: () => { obj.parent.remove(obj); } });\n            }\n        });\n    }\n\n    facingToCamera(camera, parentGroup) {\n        const facing = parentGroup || this.scene || [];\n\n        facing.traverse((obj) => {\n            if (obj instanceof THREE.Mesh && obj.type === 'Font') {\n                obj.lookAt(camera.position);\n            }\n        });\n    }\n}\nexport default Font;\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/services/font.js","/* eslint no-param-reassign: [\"error\", { \"props\": true, \"ignorePropertyModificationsFor\": [\"data\"] }] */\nimport * as BAS from 'three-bas';\nimport * as THREE from 'three';\nimport { Power1, TweenMax } from 'gsap';\nimport Chuncks from './chunks';\nimport xRayVertex from '../shaders/xRay.vert';\nimport xRayFrag from '../shaders/xRay.frag';\n\n\nclass ParticleSystem {\n    constructor(mainBrain, brainParticles, memories) {\n        this.chuncks = new Chuncks();\n        this.brainParticles = brainParticles;\n        this.memories = memories;\n        this.mainBrain = mainBrain;\n        this.particlesStartColor = new THREE.Color(0xffffff);\n        this.particlesColor = new THREE.Color(0xffffff);\n        const { xRayEffect, systemPoints } = this.init();\n        this.particles = systemPoints;\n        this.xRay = xRayEffect;\n    }\n\n    static getLoadingPoints() {\n        const geometry = new THREE.RingBufferGeometry(100, 40, 150, 150, 20);\n        return geometry.attributes.position.array;\n    }\n\n    init() {\n        const duration = 1.0;\n        const maxPointDelay = 0.3;\n\n        const brainPoints = this.brainParticles.attributes.position.array;\n\n        const count = brainPoints.length / 3;\n        const me = this;\n\n        const geometry = new BAS.PointBufferGeometry(count);\n\n        const loadingCircle = ParticleSystem.getLoadingPoints();\n        geometry.createAttribute('aStartLoading', 3, (data, index, num) => {\n            const startVec3 = new THREE.Vector3();\n            if (loadingCircle.length < brainPoints.length) {\n                startVec3.x = loadingCircle[(index * 3) + 0] || 0.0;\n                startVec3.y = loadingCircle[(index * 3) + 1] || 0.0;\n                startVec3.z = THREE.Math.randFloat(-80.0, 1500.0); // loadingCircle[index * 3 + 2] || 0\n            } else {\n                startVec3.x = 100.0;\n                startVec3.y = 100.0;\n                startVec3.z = THREE.Math.randFloat(-80.0, 1500.0); // loadingCircle[index * 3 + 2] || 0\n            }\n            startVec3.toArray(data);\n        });\n\n        const color = new THREE.Color();\n        geometry.createAttribute('aStartColor', 3, (data) => {\n            const { r, g, b } = me.particlesStartColor;\n\n            color.setRGB(r, g, b);\n            color.toArray(data);\n        });\n\n        geometry.createAttribute('scale', 1, (data) => {\n            data[0] = THREE.Math.randFloat(200.0, 400.0);\n        });\n\n        geometry.createAttribute('aEndColor', 3, (data) => {\n            const { r, g, b } = me.particlesStartColor;\n\n            color.setRGB(r, g, b);\n            color.toArray(data);\n        });\n\n        geometry.createAttribute('aEndPos', 3, (data, index) => {\n            const startVec3 = new THREE.Vector3();\n            startVec3.x = brainPoints[(index * 3) + 0];\n            startVec3.y = brainPoints[(index * 3) + 1];\n            startVec3.z = brainPoints[(index * 3) + 2];\n            startVec3.toArray(data);\n        });\n\n        this.totalDuration = duration + maxPointDelay;\n\n        geometry.createAttribute('aDelayDuration', 3, (data) => {\n            data[0] = Math.random() * maxPointDelay;\n            data[1] = duration;\n        });\n\n\n        const geometry2 = new BAS.PointBufferGeometry(count);\n\n        geometry2.createAttribute('position', 3, (data, index) => {\n            const startVec3 = new THREE.Vector3();\n            startVec3.x = brainPoints[(index * 3) + 0];\n            startVec3.y = brainPoints[(index * 3) + 1];\n            startVec3.z = brainPoints[(index * 3) + 2];\n            startVec3.toArray(data);\n        });\n\n\n        const material = new BAS.PointsAnimationMaterial({\n            // transparent: true,\n            // blending: THREE.AdditiveBlending,\n            vertexColors: THREE.VertexColors,\n            deptWrite: false,\n\n            blending: THREE.AdditiveBlending,\n            depthTest: true,\n            transparent: true,\n            uniforms: {\n                uTime: { type: 'f', value: 0 },\n                uProgress: { type: 'float', value: 0.0 },\n                uAngle: { type: 'f', value: 1.0 },\n                uPointSizeEffect: { type: 'f', value: 0.1 },\n                uColor: { value: new THREE.Color(0xffffff) },\n            },\n            defines: {\n                // USE_SIZEATTENUATION: false, // Change size of the particle depending of the camera\n            },\n            uniformValues: {\n                size: 1.9,\n                scale: 400,\n            },\n            vertexFunctions: [\n                BAS.ShaderChunk.ease_expo_in_out,\n                BAS.ShaderChunk.quaternion_rotation,\n                this.chuncks.rotate,\n                this.chuncks.random,\n                this.chuncks.noise,\n            ],\n\n            vertexParameters: [\n                'uniform float uTime;',\n                'uniform float uPointSizeEffect;',\n                'uniform float uProgress;',\n                'uniform float uAngle;',\n                'attribute vec2 aDelayDuration;',\n                'attribute vec3 aStartLoading;',\n                'attribute vec3 aStartPos;',\n                'attribute vec3 aEndPos;',\n                'attribute vec3 aStartColor;',\n                'attribute vec3 aEndColor;',\n                'attribute float aStartOpacity;',\n                'attribute float aEndOpacity;',\n\n            ],\n            varyingParameters: [\n                `\n          varying vec3 vParticle;\n          varying vec3 vEndPos;\n          varying vec3 vStartLoading;\n          `,\n            ],\n            // this chunk is injected 1st thing in the vertex shader main() function\n            // variables declared here are available in all subsequent chunks\n            vertexInit: [\n                // calculate a progress value between 0.0 and 1.0 based on the vertex delay and duration, and the uniform time\n                'float tProgress = clamp(uProgress - aDelayDuration.x, 0.0, aDelayDuration.y) / aDelayDuration.y;',\n                // // ease the progress using one of the available easing functions\n                'tProgress = easeExpoInOut(tProgress);',\n                // 'tProgress = uProgress;'\n                // 'if(test){ tProgress = 0.0; } else { tProgress = 1.0 ;}'\n            ],\n            // this chunk is injected before all default position calculations (including the model matrix multiplication)\n            vertexPosition: [`\n        // linearly interpolate between the start and end position based on tProgress\n        // and add the value as a delta\n \n         if(tProgress < 0.5){ \n         vec2 pos = vec2(aStartLoading.xy*5.0);\n\n        // Use the noise function\n        float n = noise(aStartLoading.yx);\n     vec2 test;\n      if(mod(aStartLoading.x, 2.0) < 0.2){\n            test = rotate2D(aStartLoading.xy, PI*2.0 * uTime * uAngle * n);\n             transformed += vec3(test.x, test.y, aStartLoading.z * n);\n        }else if (mod(aStartLoading.x, 2.0) >= 0.2 && mod(aStartLoading.x, 2.0) < 1.5){\n            test = rotate2D(aStartLoading.xy + n, PI*2.0 * uTime * 0.05 * uAngle * n);\n            transformed += vec3(test.x, test.y, aStartLoading.z * n);\n        }else {\n            test = rotate2D(aStartLoading.xy + n, PI*2.0 * uTime * 0.01 * uAngle * n);\n            transformed += vec3(test.x, test.y , aStartLoading.z * n);\n        }\n        }else{\n        \n  \n        //Brain Particles\n           transformed += mix(aStartLoading, aEndPos, tProgress);\n        }   \n        `,\n            ],\n            // this chunk is injected before all default color calculations\n            vertexColor: [\n                // linearly interpolate between the start and end position based on tProgress\n                // and add the value as a delta\n                ` \n         vParticle = aEndPos;\n         \n        vEndPos = aEndPos;\n        vStartLoading = aStartLoading;\n        `,\n            ],\n\n            fragmentParameters: [\n\n                'uniform float uTime;',\n                'uniform vec3 uColor;',\n            ],\n            // convert the point (default is square) to circle shape, make sure transparent of material is true\n            // you can create more shapes: https://thebookofshaders.com/07/\n            fragmentShape: [\n                `\n        float distanceToCenter = distance(gl_PointCoord, vec2(0.5));\n        float pct = 1.0 - smoothstep(0.0, 0.5, distanceToCenter);\n        vec3 color = vec3(1.0) * gl_FragColor.rgb;\n        gl_FragColor = vec4(color, pct * gl_FragColor.a);\n\n       `],\n\n        });\n\n        const xRayMaterial = new THREE.ShaderMaterial({\n            uniforms: {\n                c: { type: 'f', value: 0.9 },\n                p: { type: 'f', value: 6.7 },\n                glowColor: { type: 'c', value: new THREE.Color(0x84ccff) },\n                viewVector: { type: 'v3', value: new THREE.Vector3(0, 0, 0) },\n                lightningTexture: { type: 't', value: this.mainBrain.loaders.brainXRayLight },\n                offsetY: { type: 'f', value: 0.3 },\n                uTime: { type: 'f', value: 0.0 },\n            },\n            vertexShader: xRayVertex,\n            fragmentShader: xRayFrag,\n            side: THREE.DoubleSide,\n            blending: THREE.AdditiveBlending,\n            transparent: true,\n            depthWrite: false,\n        });\n\n        const systemPoints = new THREE.Points(geometry, material);\n\n        console.error('MEMORIES', this.memories);\n        const xRayGeometry = new THREE.Geometry().fromBufferGeometry(this.mainBrain.endPointsCollections);\n        xRayGeometry.computeFaceNormals();\n        xRayGeometry.mergeVertices();\n        xRayGeometry.computeVertexNormals();\n\n        const xRayEffect = new THREE.Mesh(xRayGeometry, xRayMaterial);\n\n        // systemPoints.visible = false;\n        // system.scale.multiplyScalar(1.05);\n        systemPoints.castShadow = true;\n        systemPoints.frustumCulled = false;\n        // systemPoints.visible = false;\n\n        // // depth material is used for directional & spot light shadows\n        // systemPoints.customDepthMaterial = BAS.Utils.createDepthAnimationMaterial(material);\n        // // distance material is used for point light shadows\n        systemPoints.customDistanceMaterial = BAS.Utils.createDistanceAnimationMaterial(material);\n\n        systemPoints.customDepthMaterial = new THREE.ShaderMaterial({\n            vertexShader: material.vertexShader,\n            fragmentShader: material.fragmentShader,\n            uniforms: material.uniforms,\n        });\n\n        return { xRayEffect, systemPoints };\n    }\n\n\n    update(deltaTime, camera, brain) {\n        this.particles.material.uniforms.uTime.value = deltaTime;\n        this.xRay.material.uniforms.viewVector.value = new THREE.Vector3().subVectors(camera.position, brain.position);\n        this.xRay.material.uniforms.uTime.value = deltaTime;\n    }\n\n    isXRayActive(status) {\n        if (status) {\n            const progress = { p: 0.0 };\n            TweenMax.fromTo(progress, 3.0, { p: 3.0 }, {\n                p: 5.0,\n                ease: Power1.easeIn,\n                onUpdate: () => {\n                    this.xRay.material.uniforms.offsetY.value = Math.sin(progress.p);\n                },\n                onComplete: () => {\n                },\n            });\n        } else {\n            const progress = { p: 1.0 };\n            TweenMax.fromTo(progress, 3.0, { p: 5.0 }, {\n                p: 3.0,\n                ease: Power1.easeIn,\n                onUpdate: () => {\n                    this.xRay.material.uniforms.offsetY.value = Math.sin(progress.p);\n                },\n            });\n        }\n    }\n\n    updateTransitioning(val) {\n        this.particles.material.uniforms.uProgress.value += 1 / 300;\n        this.particles.customDepthMaterial.uniforms.uProgress.value += 1 / 300;\n        this.particles.customDistanceMaterial.uniforms.uProgress.value += 1 / 300;\n    }\n\n    transform(status) {\n        if (status) {\n            const progress = { p: 0.0 };\n            TweenMax.fromTo(progress, 5.9, { p: 0.0 }, {\n                p: 1.5,\n                ease: Power1.easeIn,\n                onUpdate: () => {\n                    this.updateTransitioning(progress.p);\n                },\n                onComplete: () => {\n                    this.mainBrain.orbitControls.maxDistance = 700;\n                    this.mainBrain.orbitControls.autoRotate = true;\n                    this.updateTransitioning(1.5);\n                },\n            });\n        } else {\n            const progress = { p: 1.0 };\n            TweenMax.fromTo(progress, 2.0, { p: 1.0 }, {\n                p: 0.5,\n                ease: Power1.easeIn,\n                onUpdate: () => {\n                    this.updateTransitioning(progress.p);\n                },\n            });\n        }\n    }\n}\n\nexport default ParticleSystem;\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/services/particlesSystem.js","module.exports = \"#define GLSLIFY 1\\nuniform vec3 viewVector;\\nuniform float c;\\nuniform float p;\\nuniform float uTime;\\nuniform float uSlowTime;\\nuniform float uBubblesUp;\\nuniform bool uIsFlashing;\\nuniform vec2 uMouse;\\nuniform bool isWinnerActive;\\nuniform float uWinnerSelected;\\nuniform float uWinnerAlpha;\\nvarying float intensity;\\nvarying vec4 vMemory;\\nattribute vec2 aDelayDuration;\\nattribute float size;\\nattribute vec4 aMemory;\\nattribute vec4 bubbles;\\nvarying float alpha;\\nvarying vec4 vBubbles;\\n\\n\\n\\nfloat easeExpoInOut(float p) {\\n    return ((p *= 2.0) < 1.0) ? 0.5 * pow(2.0, 10.0 * (p - 1.0)) : 0.5 * (2.0 - pow(2.0, -10.0 * (p - 1.0)));\\n}\\n\\nvoid main()\\n{\\n\\n\\tintensity = 0.9;\\n\\n    if(uIsFlashing){\\n\\n    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n    gl_PointSize = size * ( 300.0 / -mvPosition.z );\\n    float m = mod(size, sin(uSlowTime * 0.12 + size ));\\n\\n    alpha = step(0.5, abs(m));\\n    if(m > 0.5 && m < 0.7){\\n         gl_PointSize = 0.9 * size;\\n    }\\n    if(m > 0.8){\\n           gl_PointSize = 0.9 * size;\\n        }\\n\\n    gl_Position = projectionMatrix * mvPosition;\\n\\n    if(bubbles.w > 0.0 && bubbles.w < 2.0 && bubbles.x != 0.0 && bubbles.y != 0.0 ) {\\n        gl_PointSize = size + 15.0;\\n        alpha = clamp(abs(sin(uTime - bubbles.y)), 0.3, 1.0);\\n\\n        float tProgress = smoothstep(0.0, aDelayDuration.x, uBubblesUp);\\n        vec3 tranlated = mix(position, bubbles.xyz, tProgress);\\n        vec4 bPosition = modelViewMatrix * vec4( tranlated, 1.0 );\\n\\n        gl_PointSize = uBubblesUp * gl_PointSize;\\n        gl_Position +=  projectionMatrix * bPosition ;\\n        alpha = 5.0;\\n    }\\n\\n    if(bubbles.w == 2.0) {\\n           alpha = clamp(abs(sin(uTime - bubbles.y)), 0.3, 0.6);\\n           gl_PointSize = size + 60.0;\\n\\n           gl_PointSize = uBubblesUp * gl_PointSize;\\n           float normalized = clamp(uBubblesUp, 0.0, 2.0)* 2.0;\\n           vec3 tranlated = mix(position, bubbles.xyz, normalized);\\n           vec4 bPosition = modelViewMatrix * vec4( tranlated, 1.0 );\\n           gl_Position +=  projectionMatrix * bPosition ;\\n    }\\n      if(bubbles.w == 3.0) {\\n               alpha = clamp(abs(sin(uTime - bubbles.y)), 0.3, 1.0);\\n               gl_PointSize = size + 90.0;\\n\\n               gl_PointSize = uBubblesUp * gl_PointSize;\\n               float normalized = clamp(uBubblesUp, 0.0, 2.0)* 2.0;\\n               vec3 tranlated = mix(position, bubbles.xyz, normalized);\\n               vec4 bPosition = modelViewMatrix * vec4( tranlated, 1.0 );\\n               gl_Position +=  projectionMatrix * bPosition ;\\n        }\\n    vBubbles = bubbles;\\n\\n    }\\n\\n    //Show only the brain section activate and hide all blinking dots ecept memory bubbles\\n    if(aMemory.w == uWinnerSelected && isWinnerActive){\\n        vMemory = aMemory;\\n        intensity = 0.9;\\n    }else if(bubbles.w != 2.0  && bubbles.w != 3.0 && isWinnerActive ){\\n        alpha = mix(1.0, 0.0, uWinnerAlpha);\\n    }\\n\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/shaders/glow.vert\n// module id = tE7Q\n// module chunks = 1","/* eslint no-param-reassign: [\"error\", { \"props\": true, \"ignorePropertyModificationsFor\": [\"bubbles\"] }] */\nimport * as THREE from 'three';\nimport { Power1, TweenMax, Power2 } from 'gsap';\nimport _ from 'lodash';\nimport flashingV from '../shaders/flashing.vert';\nimport flashingF from '../shaders/flashing.frag';\nimport flashingCoordinates from '../data/flashingCoordinates.json';\n\nclass ThinkingAnimation {\n    constructor(mainBrain) {\n        this.mainBrain = mainBrain;\n        this.isFlashing = false;\n        this.memorySelected = mainBrain.memorySelected;\n        this.alphaAnimation = { v: 0.0 };\n        this.secuenceAnimation = 0;\n    }\n\n    initAnimation() {\n        const { scene, camera } = this.mainBrain;\n\n        const particles = 10;\n        const geometry = new THREE.BufferGeometry();\n        const sizes = [];\n        const positions = [];\n        const colors = [];\n        const delay = [];\n        const duration = 2.5;\n        const maxPointDelay = 1.5;\n\n        Object.keys(flashingCoordinates).forEach((memory, index) => {\n            const light = flashingCoordinates[memory];\n\n            positions.push(light.x, light.y, light.z);\n\n            sizes[index] = light.size;\n\n            delay[index * 2 + 0] = THREE.Math.randFloat(0.5, maxPointDelay);\n            delay[index * 2 + 1] = duration;\n        });\n\n        geometry.addAttribute(\n            'aDelayDuration',\n            new THREE.Float32BufferAttribute(delay, 2),\n        );\n        geometry.addAttribute(\n            'position',\n            new THREE.Float32BufferAttribute(positions, 3),\n        );\n        geometry.addAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\n        geometry.addAttribute('size', new THREE.Float32BufferAttribute(sizes, 1));\n        geometry.computeBoundingSphere();\n        const customMaterial = new THREE.ShaderMaterial({\n            uniforms: {\n                c: { type: 'f', value: 0.9 },\n                p: { type: 'f', value: 2.8 },\n                glowColor: { type: 'c', value: new THREE.Color(0x2c3e93) },\n                viewVector: { type: 'v3', value: camera.position },\n                uTime: { type: 'f', value: 0.0 },\n                uFadeTime: { type: 'f', value: 0.0 },\n                uMouse: { type: 'f', value: new THREE.Vector2(0.0) },\n                isCustomAlpha: { type: 'b', value: false },\n                uAlpha: { type: 'float', value: 0.0 },\n                uResolution: {\n                    type: 'v2',\n                    value: new THREE.Vector2(window.innerWidth, window.innerHeight),\n                },\n            },\n            vertexShader: flashingV,\n            fragmentShader: flashingF,\n            vertexColors: THREE.VertexColors,\n            blending: THREE.AdditiveBlending,\n            side: THREE.DoubleSide,\n            depthTest: false,\n            transparent: true,\n        });\n        this.flashing = new THREE.Points(geometry, customMaterial);\n        this.flashing.name = 'flashing';\n        scene.add(this.flashing);\n    }\n\n    animationCamera(val) {\n        this.mainBrain.isRecording = false;\n        // this.isActive(true);\n        this.flashing.material.uniforms.uFadeTime.value = 1;\n        this.isFlashing = true;\n\n        if (this.alphaAnimation.v === 0.0) {\n            TweenMax.fromTo(\n                this.alphaAnimation,\n                2.5,\n                { v: 0.0 },\n                {\n                    v: 1.0,\n                    ease: Power1.easeInOut,\n                    onStart: () => {\n                        this.selectMemoryThinking(val);\n                    },\n                    onUpdate: () => {\n                        this.flashing.material.uniforms.uAlpha.value = this.alphaAnimation.v;\n                    },\n                },\n            );\n        } else {\n            TweenMax.fromTo(\n                this.alphaAnimation,\n                1.0,\n                { v: 1.0 },\n                {\n                    v: 0.0,\n                    ease: Power1.easeInOut,\n                    onUpdate: () => {\n                        this.flashing.material.uniforms.uAlpha.value = this.alphaAnimation.v;\n                    },\n                    onComplete: () => {\n                        this.thinkingFadeIn(val);\n                    },\n                },\n            );\n        }\n\n        this.flashing.geometry.setDrawRange(0, 1);\n    }\n\n    selectMemoryThinking(val) {\n        const lights = Object.keys(flashingCoordinates);\n        const light = lights[Math.floor(val)];\n\n        const locations = flashingCoordinates[light];\n        if (!locations) {\n            return;\n        }\n\n        const positions = this.flashing.geometry.attributes.position.array;\n\n        for (let i = 0; i < positions.length; i += 1) {\n            positions[i * 3] = locations.x;\n            positions[i * 3 + 1] = locations.y;\n            positions[i * 3 + 2] = locations.z;\n        }\n\n        this.flashing.material.uniforms.isCustomAlpha.value = true;\n\n        const { camera } = this.mainBrain;\n\n        const cameraPos = {\n            x: camera.position.x,\n            y: camera.position.y,\n            z: camera.position.z,\n        };\n\n        TweenMax.fromTo(\n            cameraPos,\n            1.5,\n            { x: cameraPos.x, y: cameraPos.y, z: cameraPos.z },\n            {\n                x: locations.camera.x,\n                y: locations.camera.y,\n                z: locations.camera.z,\n                ease: Power1.easeInOut,\n                onUpdate: () => {\n                    camera.position.x = cameraPos.x;\n                    camera.position.y = cameraPos.y;\n                    camera.position.z = cameraPos.z;\n                },\n                onComplete: () => {\n                    this.secuenceAnimation += 1;\n                    this.animationCamera(this.secuenceAnimation);\n                },\n            },\n        );\n    }\n\n    thinkingFadeIn(val) {\n        TweenMax.fromTo(\n            this.alphaAnimation,\n            2.5,\n            { v: 0.0 },\n            {\n                v: 1.0,\n                ease: Power1.easeInOut,\n                onUpdate: () => {\n                    this.flashing.material.uniforms.uAlpha.value = this.alphaAnimation.v;\n                },\n                onStart: () => {\n                    this.selectMemoryThinking(val);\n                },\n            },\n        );\n    }\n\n    updateSubSystem(subsystemPayload) {\n        this.bubbles.geometry.attributes.bubbles.needsUpdate = false;\n        const cameraPos = this.mainBrain.camera.position;\n        const { target } = this.mainBrain.orbitControls;\n        const bubblesAttr = this.bubbles.geometry.attributes.bubbles.array;\n        const progress = { p: 1.0 };\n\n        this.mainBrain.font.removeText();\n        TweenMax.fromTo(\n            progress,\n            2.5,\n            { p: 1.0 },\n            {\n                p: 0.0,\n                ease: Power1.easeInOut,\n                onUpdate: () => {\n                    this.updateBurbleUp(progress.p);\n                    this.mainBrain.orbitControls.target.set(\n                        target.x,\n                        target.y - progress.p,\n                        target.z,\n                    );\n                    this.mainBrain.camera.position.set(\n                        cameraPos.x,\n                        cameraPos.y - progress.p,\n                        cameraPos.z,\n                    );\n                },\n                onComplete: () => {\n                    this.getBubblesSelected(bubblesAttr, subsystemPayload);\n                    this.flashing.geometry.attributes.flashing.needsUpdate = true;\n                    this.animate(true);\n                },\n            },\n        );\n    }\n\n    update(camera, delta) {\n        this.flashing.material.uniforms.viewVector.value = new THREE.Vector3().subVectors(\n            camera.position,\n            this.flashing.position,\n        );\n        this.flashing.material.uniforms.uTime.value = delta;\n    }\n    isActive(val) {\n        if (val) {\n            const progress = { p: 0.0 };\n            TweenMax.fromTo(\n                progress,\n                2.5,\n                { p: 0.0 },\n                {\n                    p: 1.0,\n                    ease: Power1.easeInOut,\n                    onUpdate: () => {\n                        this.flashing.material.uniforms.uFadeTime.value = progress.p;\n                        this.isFlashing = true;\n                    },\n                },\n            );\n        } else {\n            const progress = { p: 1.0 };\n            TweenMax.fromTo(\n                progress,\n                2.5,\n                { p: 1.0 },\n                {\n                    p: 0.0,\n                    ease: Power1.easeInOut,\n                    onUpdate: () => {\n                        this.flashing.material.uniforms.uFadeTime.value = progress.p;\n                        this.isFlashing = false;\n                    },\n                },\n            );\n        }\n    }\n    updateMouse(coordinates) {\n        this.flashing.material.uniforms.uMouse.value = coordinates;\n    }\n\n    flashingAnimation(isActive) {\n        this.flashing.material.uniforms.uIsFlashing.value = isActive;\n\n        if (isActive) {\n            const progress = { p: 0.0 };\n            TweenMax.fromTo(\n                progress,\n                2.5,\n                { p: 0.0 },\n                {\n                    p: 1.0,\n                    ease: Power1.easeInOut,\n                    onUpdate: (value) => {\n                        this.flashing.material.uniforms.uFlashingAlpha.value = progress.p;\n                        this.isFlashing = true;\n                    },\n                },\n            );\n        } else {\n            const progress = { p: 1.0 };\n            TweenMax.fromTo(\n                progress,\n                2.5,\n                { p: 1.0 },\n                {\n                    p: 0.0,\n                    ease: Power1.easeInOut,\n                    onUpdate: (value) => {\n                        this.flashing.material.uniforms.uFlashingAlpha.value = progress.p;\n                        this.isFlashing = false;\n                    },\n                },\n            );\n        }\n    }\n\n    animate(isActive) {\n        const cameraPos = this.mainBrain.camera.position;\n        const { target } = this.mainBrain.orbitControls;\n        if (!this.isFlashing) {\n            this.flashingAnimation(true);\n        }\n        if (isActive) {\n            const progress = { p: 0.0 };\n            TweenMax.fromTo(\n                progress,\n                2.5,\n                { p: 0.0 },\n                {\n                    p: 1.0,\n                    ease: Power1.easeInOut,\n                    onUpdate: () => {\n                        this.updateBurbleUp(progress.p);\n                        this.mainBrain.orbitControls.target.set(\n                            target.x,\n                            target.y + progress.p,\n                            target.z,\n                        );\n                        this.mainBrain.camera.position.set(\n                            cameraPos.x,\n                            cameraPos.y + progress.p,\n                            cameraPos.z,\n                        );\n                    },\n                },\n            );\n        } else {\n            const progress = { p: 1.0 };\n            TweenMax.fromTo(\n                progress,\n                2.5,\n                { p: 1.0 },\n                {\n                    p: 0.0,\n                    ease: Power1.easeInOut,\n                    onUpdate: () => {\n                        this.updateBurbleUp(progress.p);\n                        this.mainBrain.orbitControls.target.set(\n                            target.x,\n                            target.y - progress.p,\n                            target.z,\n                        );\n                        this.mainBrain.camera.position.set(\n                            cameraPos.x,\n                            cameraPos.y - progress.p,\n                            cameraPos.z,\n                        );\n                    },\n                },\n            );\n        }\n    }\n}\n\nexport default ThinkingAnimation;\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/services/thinkingAnimation.js"],"sourceRoot":""}