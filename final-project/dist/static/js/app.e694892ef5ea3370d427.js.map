{"version":3,"sources":["webpack:///./src/js/data/memories.json","webpack:///./src/js/shaders/glow.frag","webpack:///./src/js/services/chunks.js","webpack:///./src/js/shaders/flashing.frag","webpack:///./src/js/views/AbstractApplication.js","webpack:///./src/js/shaders/flashing.vert","webpack:///./src/js/shaders/xRay.frag","webpack:///./src/js/chunks/noise.raw.xml","webpack:///./src/js/MainBrain.js","webpack:///./src/js/services/bubblesAnimation.js","webpack:///./src/js/data/memoryMaping.json","webpack:///./src/js/chunks/random.raw.xml","webpack:///./src/js/data/testPayload.json","webpack:///./src/js/shaders/xRay.vert","webpack:///./src/app.js","webpack:///./src/js/data/flashingCoordinates.json","webpack:///./src/js/chunks/rotate.raw.xml","webpack:///./src/js/Loaders/Loaders.js","webpack:///./src/js/services/font.js","webpack:///./src/js/services/particlesSystem.js","webpack:///./src/js/shaders/glow.vert","webpack:///./src/js/services/thinkingAnimation.js"],"names":["module","exports","affective","analytic","process","semantic","episodic","cerebellum","bridge","amygdala","lines","__webpack_require__","noise","random","rotate","THREE","_postprocessing","AbstractApplication","_classCallCheck3","default","this","a_camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","a_scene","Scene","background","Color","a_blurScene","a_bloomScene","fog","Fog","a_renderer","WebGLRenderer","antialias","alpha","preserveDrawingBuffer","logarithmicDepthBuffer","setPixelRatio","devicePixelRatio","setSize","sortObjects","setClearColor","shadowMap","enabled","type","PCFSoftShadowMap","gammaInput","gammaOutput","shadowDepthMaterialSide","BackSide","composer","EffectComposer","stencilBuffer","depthTexture","renderPass","RenderPass","scene","camera","addPass","bloomPass","BloomPass","resolutionScale","resolution","intensity","distinction","blend","renderToScreen","blurMask","MaskPass","blurScene","renderPass2","document","body","appendChild","domElement","stats","initStats","orbitControls","OrbitControls","enableDamping","dampingFactor","enableZoom","zoomSpeed","panSpeed","minDistance","maxDistance","autoRotate","autoRotateSpeed","rotateSpeed","screenSpacePanning","addEventListener","onWindowResize","bind","onMouseMove","aspect","updateProjectionMatrix","timestamp","requestAnimationFrame","animate","render","_stats2","setMode","style","left","tip","e","_gsap","MainBrain","_this","_possibleConstructorReturn3","__proto__","_getPrototypeOf2","call","clock","Clock","addBrain","addFloor","addIllumination","deltaTime","particlesColor","particlesStartColor","loaders","_Loaders2","runAnimation","memories","_memories2","memorySelected","frame","frameName","isRecording","raycaster","Raycaster","mouse","Vector2","sectionMeshes","onMouseClick","_this2","redMaterial","MeshBasicMaterial","color","dotGeometry","SphereGeometry","redDots","x","y","name","description","forEach","pos","dot","Mesh","set","userData","add","push","event","setFromCamera","intersects","intersectObjects","length","clickedDot","object","displayText","infoBox","getElementById","innerHTML","display","geometry","PlaneBufferGeometry","material","MeshPhongMaterial","opacity","transparent","plane","receiveShadow","rotation","Math","PI","ambienlight","AmbientLight","spotLight","SpotLight","castShadow","shadow","LightShadow","bias","mapSize","width","height","spotLightHelper","SpotLightHelper","_this3","brainBufferGeometries","BRAIN_MODEL","traverse","child","LineSegments","_extends3","addLinesPath","verticesNeedUpdate","storeBrainVertices","endPointsCollections","BufferGeometryUtils","mergeBufferGeometries","brainMaterial","emissive","_this4","progress","p","TweenMax","fromTo","ease","Power4","easeInOut","onUpdate","onStart","particlesSystem","transform","onComplete","xRay","uniforms","c","value","startAutoDemo","_this5","memoryCount","memoryTimer","setTimeout","isXRayActive","setInterval","bubblesAnimation","updateSubSystem","clearInterval","addParticlesSystem","font","_font2","_bubblesAnimation2","initAnimation","thinkingAnimation","_thinkingAnimation2","particles","uProgress","addRedDots","update","getDelta","facingToCamera","flashing","attributes","needsUpdate","socket","emit","file","querySelector","toDataURL","clientX","clientY","_particlesSystem2","mesh","_keys2","map","l","includes","array","m","r","u","randFloat","v","theta","phi","acos","sin","cos","BubblesAnimation","mainBrain","isFlashing","isBubblesInserted","winner","winnerGroup","fistCameraReposition","bubbles","subsystem","bubbleList","console","log","subsystemResults","memoryGroup","getSubsystemGroup","memory","randomPos","randInt","parent","MeshNormalMaterial","group","Object3D","memoryPos","i","w","status","_loop","Power1","uWinnerAlpha","uWinnerSelected","isWinnerActive","_mainBrain","BufferGeometry","sizes","positions","delay","mSelector","altitude","addAttribute","Float32BufferAttribute","computeBoundingSphere","customMaterial","ShaderMaterial","glowColor","viewVector","uTime","uSlowTime","uBubblesUp","uIsFlashing","uFlashingAlpha","uMouse","vertexShader","fragmentShader","flatShading","SmoothShading","blending","AdditiveBlending","side","DoubleSide","depthTest","vertexColors","Points","subsystemPayload","payload","processSubsystemResponses","isActive","target","bubblesAttr","removeText","updateBurbleUp","getBubblesSelected","Vector3","subVectors","val","coordinates","cameraPos","flashingAnimation","memoryNumber","arguments","undefined","response","floor","_testPayload2","winningSubsystem","_lodash2","head","filter","_memoryMaping2","id","has","messageId","conversationId","inResponseToMessageId","sourceSessionId","sourceClass","messageText","inboundText","preProcessors","time","processor","initialContext","dialogState","contextId","preferredResponder","result","responses","finalContext","fromUserDisplayName","secureResponse","messageType","translated","voice","_MainBrain","size","semanticRight","analityc","afective","semanticLeft","Loaders","startAnimation","brainXRayLight","FONT","assets","_map2","models","loadingManager","LoadingManager","onLoad","handlerLoad","onProgress","handlerProgress","onError","handlerError","handlerStart","setModel","loadBrainTextures","loadOBJs","loadTextures","loadFont","loadSceneBackground","model","XRAY_MODEL","loader","OBJLoader","load","TextureLoader","t","spark","path","urls","CubeTextureLoader","textureCube","FontLoader","url","itemsLoaded","itemsTotal","Font","_message","_parentObject","_position","message","parentObject","Group","textMaterial","wireframe","textShapes","generateShapes","text3d","ShapeGeometry","computeBoundingBox","text","centerOffset","boundingBox","max","TweenLite","to","Power2","easeOut","parentGroup","obj","remove","lookAt","BAS","ParticleSystem","brainParticles","chuncks","_chunks2","_init","init","xRayEffect","systemPoints","brainPoints","count","me","PointBufferGeometry","loadingCircle","getLoadingPoints","createAttribute","data","index","num","startVec3","toArray","_me$particlesStartCol","g","b","setRGB","_me$particlesStartCol2","totalDuration","duration","PointsAnimationMaterial","VertexColors","deptWrite","uAngle","uPointSizeEffect","uColor","defines","uniformValues","scale","vertexFunctions","ShaderChunk","ease_expo_in_out","quaternion_rotation","vertexParameters","varyingParameters","vertexInit","vertexPosition","vertexColor","fragmentParameters","fragmentShape","xRayMaterial","lightningTexture","offsetY","depthWrite","error","xRayGeometry","Geometry","fromBufferGeometry","computeFaceNormals","mergeVertices","computeVertexNormals","frustumCulled","customDistanceMaterial","Utils","createDistanceAnimationMaterial","customDepthMaterial","brain","easeIn","updateTransitioning","RingBufferGeometry","ThinkingAnimation","alphaAnimation","secuenceAnimation","_flashingCoordinates2","light","uFadeTime","isCustomAlpha","uAlpha","uResolution","selectMemoryThinking","thinkingFadeIn","setDrawRange","locations","animationCamera","delta","_this6","_this7"],"mappings":"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","file":"static/js/app.e694892ef5ea3370d427.js","sourcesContent":["module.exports = {\"affective\":[],\"analytic\":[],\"process\":[],\"semantic\":[],\"episodic\":[],\"cerebellum\":[],\"bridge\":[],\"amygdala\":[],\"lines\":{\"affective\":[],\"analytic\":[],\"process\":[],\"semantic\":[],\"episodic\":[]}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/data/memories.json\n// module id = 2J3f\n// module chunks = 1","module.exports = \"#define GLSLIFY 1\\nuniform vec3 glowColor;\\nvarying float intensity;\\nvarying float alpha;\\nuniform float uFlashingAlpha;\\nuniform bool uIsFlashing;\\nvarying vec4 vBubbles;\\nvarying vec4 vMemory;\\nuniform bool isWinnerActive;\\nuniform float uWinnerSelected;\\nvoid main()\\n{\\n\\n        float distanceToCenter = distance(gl_PointCoord, vec2(0.5));\\n        float pct = 1.0 - smoothstep(0.0, 0.5, distanceToCenter);\\n        vec3 color = vec3(1.0) * gl_FragColor.rgb;\\n\\n        vec3 glow = glowColor * intensity;\\n        if(vBubbles.w == 3.0){ //Winner Bubble\\n            // glow = vec3(0.0,0.9,0.0) * intensity;\\n        }\\n\\n        if(alpha == 5.0) {\\n            //discard;\\n        }\\n\\n        gl_FragColor = vec4(glow, clamp(alpha, 0.0, 1.0));\\n        gl_FragColor = vec4(glow, pct * gl_FragColor.a);\\n\\n        if(uIsFlashing){\\n             gl_FragColor = vec4(glow, pct * gl_FragColor.a * uFlashingAlpha);\\n        }\\n\\n        //Show only the brain section activate\\n        if(vMemory.w == uWinnerSelected && isWinnerActive){\\n            gl_FragColor += vec4(glow,pct * gl_FragColor.a);\\n        }\\n\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/shaders/glow.frag\n// module id = 6KJG\n// module chunks = 1","import noise from '../chunks/noise.raw.xml';\nimport random from '../chunks/random.raw.xml';\nimport rotate from '../chunks/rotate.raw.xml';\n\nexport default () => ({\n    noise,\n    random,\n    rotate,\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/services/chunks.js","module.exports = \"#define GLSLIFY 1\\nuniform vec3 glowColor;\\nuniform float uFadeTime;\\nvarying float intensity;\\nvarying float alpha;\\n\\nvoid main()\\n{\\n\\n float distanceToCenter = distance(gl_PointCoord, vec2(0.5));\\n        float pct = 1.0 - smoothstep(0.0, 0.5, distanceToCenter);\\n        vec3 color = vec3(1.0) * gl_FragColor.rgb;\\n\\n        vec3 glow = glowColor * intensity;\\n\\n        gl_FragColor = vec4(glow, clamp(alpha, 0.0, uFadeTime));\\n\\n        gl_FragColor = vec4(glow, pct * gl_FragColor.a);\\n\\n\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/shaders/flashing.frag\n// module id = 736u\n// module chunks = 1","import * as THREE from \"three\";\nimport io from \"socket.io-client\";\nimport \"three/examples/js/controls/OrbitControls\";\nimport \"three/examples/js/modifiers/BufferSubdivisionModifier\";\nimport Stats from \"three/examples/js/libs/stats.min\";\nimport {\n  EffectComposer,\n  RenderPass,\n  BloomPass,\n  MaskPass,\n} from \"postprocessing\";\n\nclass AbstractApplication {\n  constructor() {\n    this.a_camera = new THREE.PerspectiveCamera(\n      50,\n      window.innerWidth / window.innerHeight,\n      1,\n      1000\n    );\n    this.a_camera.position.z = 1000;\n\n    this.a_scene = new THREE.Scene();\n    this.a_scene.background = new THREE.Color(\"#a7b6d2\");\n\n    this.a_blurScene = new THREE.Scene();\n    this.a_bloomScene = new THREE.Scene();\n\n    this.a_scene.fog = new THREE.Fog(0xa7b6d2, 300, 1300);\n\n    this.a_renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true,\n      preserveDrawingBuffer: false,\n      logarithmicDepthBuffer: true,\n    });\n    this.a_renderer.setPixelRatio(window.devicePixelRatio);\n    this.a_renderer.setSize(window.innerWidth, window.innerHeight);\n    this.a_renderer.sortObjects = false;\n    this.a_renderer.setClearColor(0x00000, 0.0);\n\n    this.a_renderer.shadowMap.enabled = true;\n    this.a_renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    this.a_renderer.gammaInput = true;\n    this.a_renderer.gammaOutput = true;\n    this.a_renderer.shadowDepthMaterialSide = THREE.BackSide;\n\n    this.composer = new EffectComposer(this.a_renderer, {\n      stencilBuffer: true,\n      depthTexture: true,\n    });\n\n    // PASSES\n    this.renderPass = new RenderPass(this.scene, this.camera);\n    //this.renderPass.renderToScreen = true;\n    this.composer.addPass(this.renderPass);\n\n\n    this.bloomPass = new BloomPass({\n      resolutionScale: 0.7,\n      resolution: 2.9,\n      intensity: 2.3,\n      distinction: 9.0,\n      blend: true,\n    });\n\n    this.bloomPass.renderToScreen = true;\n    this.composer.addPass(this.bloomPass);\n\n    this.blurMask = new MaskPass(this.blurScene, this.camera);\n    this.renderPass2 = new RenderPass(this.blurScene, this.camera);\n\n    document.body.appendChild(this.a_renderer.domElement);\n\n    this.stats = AbstractApplication.initStats(document.body);\n\n    this.orbitControls = new THREE.OrbitControls(\n      this.camera,\n      this.a_renderer.domElement\n    );\n    this.orbitControls.enableDamping = true;\n    this.orbitControls.dampingFactor = 0.25;\n    this.orbitControls.enableZoom = true;\n    this.orbitControls.zoomSpeed = 0.1;\n    this.orbitControls.panSpeed = 0.1;\n    this.orbitControls.minDistance = 50;\n    this.orbitControls.maxDistance = 2500;\n    this.orbitControls.autoRotate = false;\n    this.orbitControls.autoRotateSpeed = 1.0;\n    this.orbitControls.rotateSpeed = 0.1;\n    this.orbitControls.screenSpacePanning = true;\n\n    window.addEventListener(\"resize\", this.onWindowResize.bind(this), false);\n    window.addEventListener(\"mousemove\", this.onMouseMove.bind(this), false);\n  }\n\n  get renderer() {\n    return this.a_renderer;\n  }\n\n  get camera() {\n    return this.a_camera;\n  }\n\n  get scene() {\n    return this.a_scene;\n  }\n\n  get blurScene() {\n    return this.a_blurScene;\n  }\n  get bloomScene() {\n    return this.a_bloomScene;\n  }\n\n  static initStats(render) {\n    const stats = new Stats();\n    stats.setMode(0);\n    stats.domElement.style.position = \"absolute\";\n    stats.domElement.style.left = \"0px\";\n    stats.domElement.style.tip = \"0px\";\n    render.appendChild(stats.domElement);\n    return stats;\n  }\n\n  static onMouseMove(e) {}\n  onWindowResize() {\n    this.a_camera.aspect = window.innerWidth / window.innerHeight;\n    this.a_camera.updateProjectionMatrix();\n\n    this.a_renderer.setSize(window.innerWidth, window.innerHeight);\n  }\n\n  animate(timestamp) {\n    requestAnimationFrame(this.animate.bind(this));\n    this.a_renderer.render(this.a_scene, this.a_camera);\n  }\n}\n\nexport default AbstractApplication;\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/views/AbstractApplication.js","module.exports = \"#define GLSLIFY 1\\nuniform vec3 viewVector;\\nuniform float c;\\nuniform float p;\\nuniform float uTime;\\nuniform vec2 uMouse;\\nuniform float uFadeTime;\\nattribute vec2 aDelayDuration;\\nattribute float size;\\nvarying float intensity;\\nvarying float alpha;\\nuniform float uAlpha;\\nuniform bool isCustomAlpha;\\n\\nvoid main()\\n{\\n    if(uFadeTime > 0.00001){\\n\\n    vec3 vNormal = normalize( normalMatrix * normal );\\n\\tvec3 vNormel = normalize( normalMatrix * viewVector );\\n\\tintensity = pow( c - dot(vNormal, vNormel), p );\\n\\n    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n    gl_PointSize = size * ( 300.0 / -mvPosition.z );\\n\\n    float m = mod(size, sin( uTime * 10.0 + (position.x + position.y) / 100.0));\\n\\n        if(m > 0.5 && m < 0.7){\\n          alpha = clamp(abs(sin(uTime * 10.0)), 0.2, 0.5);\\n        }\\n        if(m > 0.8){\\n          alpha = clamp(abs(sin(uTime * 10.0)), 0.2, 0.5);\\n        }\\n\\n        if(m > 0.0 && m < 0.5){\\n          alpha = clamp(abs(sin(uTime * 10.0)), 0.2, 0.7);\\n        }\\n\\n\\n        //static ligthning\\n        if( isCustomAlpha ) {\\n            alpha = uAlpha;\\n        }\\n\\n\\n    gl_PointSize = 9.5 * size;\\n\\n    gl_Position += projectionMatrix * mvPosition;\\n\\n   }\\n\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/shaders/flashing.vert\n// module id = AvWz\n// module chunks = 1","module.exports = \"#define GLSLIFY 1\\nuniform vec3 glowColor;\\nuniform sampler2D lightningTexture;\\nvarying float intensity;\\nvarying vec2 vUv;\\nuniform float offsetY;\\nuniform float uTime;\\n\\nvoid main(){\\n    vec2 uv = vUv;\\n    uv.y += offsetY;\\n\\n  \\tvec3 glow = glowColor * intensity;\\n    vec3 color = vec3(step(0.1, uv.y) - step(0.2, uv.y)) - vec3(texture2D(lightningTexture, uv));\\n\\n\\tfloat alpha = clamp(cos(uTime* 3.0) , 0.5, 1.0);\\n\\n    gl_FragColor = vec4( glow + color, alpha);\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/shaders/xRay.frag\n// module id = EYp+\n// module chunks = 1","module.exports = \"float noise (in vec2 st) {\\n    vec2 i = floor(st);\\n    vec2 f = fract(st);\\n\\n    // Four corners in 2D of a tile\\n    float a = random(i);\\n    float b = random(i + vec2(1.0, 0.0));\\n    float c = random(i + vec2(0.0, 1.0));\\n    float d = random(i + vec2(1.0, 1.0));\\n\\n    // Smooth Interpolation\\n\\n    // Cubic Hermine Curve.  Same as SmoothStep()\\n    vec2 u = f*f*(3.0-2.0*f);\\n    // u = smoothstep(0.,1.,f);\\n\\n    // Mix 4 coorners porcentages\\n    return mix(a, b, u.x) +\\n        (c - a)* u.y * (1.0 - u.x) +\\n        (d - b) * u.x * u.y;\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/chunks/noise.raw.xml\n// module id = FAD+\n// module chunks = 1","/* eslint no-param-reassign: [\"error\", { \"props\": true, \"ignorePropertyModificationsFor\": [\"child\", memories] }] */\nimport * as THREE from \"three\";\nimport { Power4, TweenMax } from \"gsap\";\nimport \"three/examples/js/BufferGeometryUtils\";\nimport AbstractApplication from \"./views/AbstractApplication\";\nimport Loaders from \"./Loaders/Loaders\";\nimport BubblesAnimation from \"./services/bubblesAnimation\";\nimport ThinkingAnimation from \"./services/thinkingAnimation\";\n// import GUI from \"./services/gui\";\nimport Font from \"./services/font\";\nimport ParticleSystem from \"./services/particlesSystem\";\nimport Memories from \"./data/memories.json\";\n\nclass MainBrain extends AbstractApplication {\n  constructor() {\n    super();\n\n    this.clock = new THREE.Clock();\n    this.addBrain = this.addBrain.bind(this);\n    this.addFloor();\n    this.addIllumination();\n\n    this.deltaTime = 0;\n    this.particlesColor = new THREE.Color(0x000000);\n    this.particlesStartColor = new THREE.Color(0x000000);\n    this.loaders = new Loaders(this.runAnimation.bind(this));\n    this.memories = Memories;\n    this.memorySelected = [\n      \"analytic\",\n      \"episodic\",\n      \"process\",\n      \"semantic\",\n      \"affective\",\n    ];\n    this.frame = 0;\n    this.frameName = 0;\n    this.isRecording = false;\n    // setTimeout(() => {\n    //   this.startIntro();\n    // }, 1000);\n    this.raycaster = new THREE.Raycaster();\n    this.mouse = new THREE.Vector2();\n    this.sectionMeshes = [];\n    document.addEventListener('mousedown', this.onMouseClick.bind(this), false);\n  }\n  addRedDots() {\n    const redMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 });\n    const dotGeometry = new THREE.SphereGeometry(5, 32, 32); // Larger size for the red dots\n    this.redDots = []; // Array to store the red dots for interactivity\n\n    // Example positions (adjust to fit your brain model)\n    const positions = [\n        {\n          x: -30, y: -70, z: -80, name: \"Cerebellum\", description: \"Controls muscles involving balance and movement. It can also control reward and social preference behavior.\"\n        },\n        {\n          x: -30, y: 30, z: -40, name: \"Thalamus\", description: \"Helps with sensory relay for all visual, auditory, gustatory, and somatosensory systems.\"\n        },\n        {\n          x: 30, y: -20, z: 20, name: \"Amygdala\", description: \"Plays an important role in processing emotions, including anger, fear, and anxiety.\"\n        },\n        {\n          x: -30, y: -100, z: 0, name: \"Brain Stem\", description: \"Connects the brain to the spinal cord and helps with balance and coordination.\"\n        },\n        {\n          x: 80, y: 50, z: 0, name: \"Frontal Lobe\", description: \"Helps control voluntary movement and cognition. This includes thinking, organizing, problem-solving, and  memory.\"\n        }\n    ];\n\n    positions.forEach((pos) => {\n        const dot = new THREE.Mesh(dotGeometry, redMaterial);\n        dot.position.set(pos.x, pos.y, pos.z);\n        dot.userData = { name: pos.name, description: pos.description }; // Store metadata\n        this.scene.add(dot);\n        this.redDots.push(dot);\n    });\n  }\n\n  onMouseClick(event) {\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n\n    // Check for intersections with red dots\n    const intersects = this.raycaster.intersectObjects(this.redDots);\n    if (intersects.length > 0) {\n        const clickedDot = intersects[0].object;\n        this.displayText(clickedDot.userData.name, clickedDot.userData.description);\n    }\n}\n  displayText(name, description) {\n    const infoBox = document.getElementById('info-box');\n    if (infoBox) {\n        infoBox.innerHTML = `<h3>${name}</h3><p>${description}</p>`;\n        infoBox.style.display = 'block';\n    }\n  }\n  hideText() {\n    const infoBox = document.getElementById('info-box');\n    if (infoBox) {\n        infoBox.style.display = 'none';\n    }\n}\n\n  addFloor() {\n    const geometry = new THREE.PlaneBufferGeometry(20000, 20000);\n    const material = new THREE.MeshPhongMaterial({\n      opacity: 0.1,\n      transparent: true,\n      color: 0x000000\n    });\n    this.plane = new THREE.Mesh(geometry, material);\n    this.plane.receiveShadow = true;\n    this.plane.position.y = -160;\n    this.plane.rotation.x = -0.5 * Math.PI;\n    this.scene.add(this.plane);\n  }\n  addIllumination() {\n    this.ambienlight = new THREE.AmbientLight(0xb8c5cf, 0);\n    this.scene.add(this.ambienlight);\n\n    this.spotLight = new THREE.SpotLight(\n      0xb8c5cf,\n      1.45,\n      175,\n      Math.PI / 2,\n      0.0,\n      0.0\n    );\n    this.spotLight.position.set(0, 500, -10);\n    this.spotLight.castShadow = true;\n\n    this.spotLight.castShadow = true;\n    this.spotLight.shadow = new THREE.LightShadow(\n      new THREE.PerspectiveCamera(\n        54,\n        window.innerWidth / window.innerHeight,\n        1,\n        2000\n      )\n    );\n    this.spotLight.shadow.bias = -0.000222;\n    this.spotLight.shadow.mapSize.width = 1024;\n    this.spotLight.shadow.mapSize.height = 1024;\n\n    this.scene.add(this.spotLight);\n    this.spotLightHelper = new THREE.SpotLightHelper(this.spotLight);\n  }\n\n  addBrain() {\n    this.brainBufferGeometries = [];\n\n    this.loaders.BRAIN_MODEL.traverse((child) => {\n      if (child instanceof THREE.LineSegments) {\n        this.memories.lines = {\n          ...this.memories.lines,\n          ...MainBrain.addLinesPath(child, this.memories),\n        };\n      }\n      if (!(child instanceof THREE.Mesh)) {\n        return;\n      }\n      child.geometry.verticesNeedUpdate = true;\n      // child.material.map = this.loaders.lightTexture;\n      this.brainBufferGeometries.push(child.geometry);\n\n      this.memories = {\n        ...this.memories,\n        ...MainBrain.storeBrainVertices(child, this.memories),\n      };\n    });\n\n    this.endPointsCollections = THREE.BufferGeometryUtils.mergeBufferGeometries(\n      this.brainBufferGeometries\n    );\n    this.endPointsCollections = THREE.BufferGeometryUtils.mergeBufferGeometries(\n      this.brainBufferGeometries\n  );\n  const brainMaterial = new THREE.MeshPhongMaterial({\n      color: 0x666666, // Adjust color if needed\n      emissive: 0x111111,\n  });\n  const brainMesh = new THREE.Mesh(this.endPointsCollections, brainMaterial);\n  // this.scene.add(brainMesh);\n  }\n\n  startIntro() {\n    const progress = { p: 1000 };\n    TweenMax.fromTo(\n      progress,\n      6.5,\n      { p: 1000 },\n      {\n        p: 380,\n        ease: Power4.easeInOut,\n        onUpdate: () => {\n          this.camera.position.z = progress.p;\n          this.camera.position.set(0, 50, 200); // Adjust x, y, z as needed for your scene\n        },\n        onStart: () => {\n          this.particlesSystem.transform(true);\n        },\n        onComplete: () => {\n          //hide xray\n          this.particlesSystem.xRay.material.uniforms.c.value = 1.0;\n          this.startAutoDemo();\n        }\n      }\n    );\n  }\n\n  startAutoDemo() {\n    let memoryCount = 1;\n    this.scene.add(this.particlesSystem.xRay);\n    let memoryTimer;\n    const me = this;\n    setTimeout(() => {\n      //enable xRay Animation\n      this.particlesSystem.isXRayActive(true);\n      setTimeout(() => {\n        //remove animation\n        this.particlesSystem.isXRayActive(false);\n        //Enable Memories\n        memoryTimer = setInterval(() => {\n          if (memoryCount < 5) {\n            this.bubblesAnimation.updateSubSystem(memoryCount);\n            memoryCount += 1;\n          } else {\n            this.bubblesAnimation.updateSubSystem(0);\n            clearInterval(memoryTimer);\n          }\n        }, 9000);\n      }, 4000);\n    }, 2000);\n  }\n  // showTooltip(name, x, y) {\n  //   const tooltip = document.getElementById('tooltip');\n  //   if (tooltip) {\n  //     tooltip.style.left = (x + 10) + 'px'; // offset a bit so it's not directly under the cursor\n  //     tooltip.style.top = (y + 10) + 'px';\n  //     tooltip.innerHTML = name;\n  //     tooltip.style.display = 'block';\n  //   }\n  // }\n  // hideTooltip() {\n  //   const tooltip = document.getElementById('tooltip');\n  //   if (tooltip) {\n  //     tooltip.style.display = 'none';\n  //   }\n  // }\n\n  static addLinesPath(mesh, memories) {\n    const keys = Object.keys(memories.lines);\n    keys.map((l) => {\n      if (mesh.name.includes(l)) {\n        memories.lines[l] = mesh.geometry.attributes.position.array;\n        return memories.lines;\n      }\n      return [];\n    });\n  }\n\n  static storeBrainVertices(mesh, memories) {\n    const keys = Object.keys(memories);\n\n    keys.map((m) => {\n      if (mesh.name.includes(m)) {\n        if (memories[m].length) {\n          memories[m].push(mesh.geometry);\n          memories[m] = [\n            THREE.BufferGeometryUtils.mergeBufferGeometries(memories[m]),\n          ];\n          return memories;\n        }\n        return memories[m].push(mesh.geometry);\n      }\n      return [];\n    });\n  }\n\n  runAnimation() {\n    // this.gui = new GUI(this);\n    this.addBrain();\n    this.addParticlesSystem();\n    this.font = new Font(this.loaders, this.scene);\n    this.bubblesAnimation = new BubblesAnimation(this);\n    this.bubblesAnimation.initAnimation();\n\n    this.thinkingAnimation = new ThinkingAnimation(this);\n    this.thinkingAnimation.initAnimation();\n\n    // Set Background\n    // this.scene.background = this.loaders.assets.get('sky');\n    this.scene.background = new THREE.Color(0x000000); // Change to black\n\n    // this.particlesSystem.transform(false); // Initialize particles system in final state\n    this.particlesSystem.xRay.material.uniforms.c.value = 1.0; // Ensure x-ray is not active\n    this.particlesSystem.particles.material.uniforms.uProgress.value = 1.0;\n    this.camera.position.set(20, 50, 400); // Adjust x, y, z as needed for your scene\n\n    // Example materials for hovering sections: nearly transparent, non-visible \"hit\" areas\n    this.addRedDots();\n    // const sectionMaterial = new THREE.MeshBasicMaterial({ color: 0x00ff00, opacity: 0.1, transparent: true, visible: false });\n\n    // // Create and position four sections\n    // const sectionGeometry = new THREE.BoxGeometry(50, 50, 50);\n\n    // // Frontal Lobe\n    // const frontalLobe = new THREE.Mesh(sectionGeometry, sectionMaterial);\n    // frontalLobe.name = \"Frontal Lobe\";\n    // frontalLobe.position.set(0, 20, 50); // adjust these coordinates to fit your brain model\n    // this.scene.add(frontalLobe);\n    // this.sectionMeshes.push(frontalLobe);\n\n    // // Parietal Lobe\n    // const parietalLobe = new THREE.Mesh(sectionGeometry, sectionMaterial);\n    // parietalLobe.name = \"Parietal Lobe\";\n    // parietalLobe.position.set(0, 30, 0); // adjust accordingly\n    // this.scene.add(parietalLobe);\n    // this.sectionMeshes.push(parietalLobe);\n\n    // // Temporal Lobe\n    // const temporalLobe = new THREE.Mesh(sectionGeometry, sectionMaterial);\n    // temporalLobe.name = \"Temporal Lobe\";\n    // temporalLobe.position.set(-30, 0, 0); // adjust accordingly\n    // this.scene.add(temporalLobe);\n    // this.sectionMeshes.push(temporalLobe);\n\n    // // Occipital Lobe\n    // const occipitalLobe = new THREE.Mesh(sectionGeometry, sectionMaterial);\n    // occipitalLobe.name = \"Occipital Lobe\";\n    // occipitalLobe.position.set(0, 0, -50); // adjust accordingly\n    // this.scene.add(occipitalLobe);\n    // this.sectionMeshes.push(occipitalLobe);\n    this.animate();\n  }\n  animate(timestamp) {\n    this.orbitControls.update();\n    // this.orbitControls.autoRotateSpeed = this.gui.controls.rotationSpeed;\n    this.orbitControls.autoRotateSpeed = 0.5; // or any fixed speed\n\n    this.deltaTime += this.clock.getDelta();\n\n    this.particlesSystem.update(\n      this.deltaTime,\n      this.camera,\n      this.particlesSystem.xRay\n    );\n    this.bubblesAnimation.update(this.camera, this.deltaTime);\n    this.thinkingAnimation.update(this.camera, this.deltaTime);\n\n    this.stats.update();\n    requestAnimationFrame(this.animate.bind(this));\n\n    //this.renderer.render(this.a_scene, this.a_camera);\n\n    this.font.facingToCamera(this.camera);\n    this.camera.updateProjectionMatrix();\n\n    this.thinkingAnimation.flashing.geometry.verticesNeedUpdate = true;\n    this.thinkingAnimation.flashing.geometry.attributes.position.needsUpdate = true;\n\n    // composer\n    this.composer.render();\n\n    if (this.isRecording) {\n      if (this.frame > 10) {\n        this.socket.emit(\"render-frame\", {\n          frame: (this.frameName += 1),\n          file: document.querySelector(\"canvas\").toDataURL(),\n        });\n      }\n      this.frame += 1;\n    }\n  }\n  // onMouseMove(event) {\n  //   const y = window.innerHeight - event.clientY;\n  //   const x = window.innerHeight - event.clientX;\n  //   //  this.bubblesAnimation.updateMouse(new THREE.Vector2(x, y));\n  // }\n  onMouseMove(event) {\n    // Convert the mouse position to normalized device coordinates (-1 to +1)\n    this.mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n    this.mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n    // Update the raycaster\n    // this.raycaster.setFromCamera(this.mouse, this.camera);\n    // // Check intersections\n    // const intersects = this.raycaster.intersectObjects(this.sectionMeshes);\n    // if (intersects.length > 0) {\n    //   // If we have an intersection, the first one is the closest hit\n    //   const hoveredSection = intersects[0].object;\n    //   // Show the tooltip with the name of the section\n    //   this.showTooltip(hoveredSection.name, event.clientX, event.clientY);\n    // } else {\n    //   // No intersections, hide the tooltip\n    //   this.hideTooltip();\n  }\n  addParticlesSystem() {\n    this.particlesSystem = new ParticleSystem(\n      this,\n      this.endPointsCollections,\n      this.memories\n    );\n    this.scene.add(this.particlesSystem.particles);\n  }\n\n  static getRandomPointOnSphere(r) {\n    const u = THREE.Math.randFloat(0, 1);\n    const v = THREE.Math.randFloat(0, 1);\n    const theta = 2 * Math.PI * u;\n    const phi = Math.acos(2 * v - 1);\n    const x = r * Math.sin(theta) * Math.sin(phi);\n    const y = r * Math.cos(theta) * Math.sin(phi);\n    const z = r * Math.cos(phi);\n    return {\n      x,\n      y,\n      z,\n    };\n  }\n}\n\nexport default MainBrain;\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/MainBrain.js","/* eslint no-param-reassign: [\"error\", { \"props\": true, \"ignorePropertyModificationsFor\": [\"bubbles\"] }] */\nimport * as THREE from 'three';\nimport { Power1, TweenMax } from 'gsap';\nimport _ from 'lodash';\nimport glowVertex from '../shaders/glow.vert';\nimport glowFrag from '../shaders/glow.frag';\nimport memoryMapping from '../data/memoryMaping.json';\nimport testPayload from '../data/testPayload.json';\n\nclass BubblesAnimation {\n    constructor(mainBrain) {\n        this.mainBrain = mainBrain;\n        this.isFlashing = false;\n        this.memorySelected = mainBrain.memorySelected;\n        this.isBubblesInserted = false;\n        this.winner = '';\n        this.winnerGroup = '';\n        this.fistCameraReposition = false;\n    }\n\n    /**\n     * memories //Array of 3 positions x y z\n     * @param bubbles\n     * @returns {Array} of 4 positions x y z w when 'w' is the selector bubble 2.0 = memory and 3.0 = winner\n     */\n    getBubblesSelected(bubbles, subsystem) {\n        const { memories } = this.mainBrain;\n        const bubbleList = [];\n        console.log(subsystem);\n        const { winner, winnerGroup, subsystemResults } = subsystem;\n\n        // Update Winner to use in Update animation\n        this.winner = winner;\n        this.winnerGroup = winnerGroup;\n\n        subsystemResults.forEach((m) => {\n            const memoryGroup = BubblesAnimation.getSubsystemGroup(m.subsystem) || 'episodic';\n\n            const memory = memories[memoryGroup][0].attributes.position.array;\n            const randomPos = THREE.Math.randInt(3 * 1500, (memory.length / 3) - 4);\n\n            const x = memory[(randomPos * 3) + 0] || 0;\n            const y = memory[(randomPos * 3) + 1] || 0;\n            const z = memory[(randomPos * 3) + 2] || 0;\n            let altitude = THREE.Math.randInt(120, 150);\n            const parent = this.mainBrain.particlesSystem.particles;\n\n            if (winner === m.subsystem) {\n                altitude = 200; // highest position\n\n                const geometry = new THREE.SphereGeometry(2, 32, 32);\n                const material = new THREE.MeshNormalMaterial();\n\n                const mesh = new THREE.Mesh(geometry, material);\n                parent.add(mesh);\n                mesh.position.set(x, y, z);\n\n                bubbleList.push(x, y + 150.0, z, 3.0); // w = 3.0 for the winner\n            }\n            const group = new THREE.Object3D();\n            parent.add(group);\n        });\n\n        // Inject bubbles selected in to the all flashing bubbles replace the older one\n        let memoryPos = 0;\n        if (this.isBubblesInserted) {\n            for (let i = 0; i < bubbles.length / 4; i += 1) {\n                const w = bubbles[(i * 4) + 3] || 0;\n\n                // Reset old position\n                if (w === 2.0 || w === 3.0) {\n                    if (memoryPos < bubbleList.length / 4) {\n                        bubbles[(i * 4) + 0] = bubbleList[(memoryPos * 4) + 0];\n                        bubbles[(i * 4) + 1] = bubbleList[(memoryPos * 4) + 1];\n                        bubbles[(i * 4) + 2] = bubbleList[(memoryPos * 4) + 2];\n                        memoryPos += 1;\n                    }\n                }\n            }\n        } else {\n            // New Burbles\n            for (let i = 0; i < bubbleList.length / 4; i += 1) {\n                bubbles[(i * 4) + 0] = bubbleList[(memoryPos * 4) + 0];\n                bubbles[(i * 4) + 1] = bubbleList[(memoryPos * 4) + 1];\n                bubbles[(i * 4) + 2] = bubbleList[(memoryPos * 4) + 2];\n                bubbles[(i * 4) + 3] = bubbleList[(memoryPos * 4) + 3];\n                memoryPos += 1;\n            }\n            this.isBubblesInserted = true;\n        }\n        return bubbleList;\n    }\n\n    isWinnerActive(status) {\n        if (status) {\n            // Getting Memory Id\n            for (let i = 0; i < this.mainBrain.memorySelected.length; i += 1) {\n                if (this.mainBrain.memorySelected[i] === this.winnerGroup) {\n                    const progress = { p: 0.0 };\n                    TweenMax.fromTo(progress, 2.5, { p: 0.0 }, {\n                        p: 1.0,\n                        ease: Power1.easeInOut,\n                        onUpdate: () => {\n                            this.bubbles.material.uniforms.uWinnerAlpha.value = progress.p;\n                        },\n                        onStart: () => {\n                            this.bubbles.material.uniforms.uWinnerSelected.value = i;\n                            this.bubbles.material.uniforms.isWinnerActive.value = true;\n                        },\n                    });\n                }\n            }\n        } else {\n            {\n                const progress = { p: 1.0 };\n                TweenMax.fromTo(progress, 2.5, { p: 1.0 }, {\n                    p: 0.0,\n                    ease: Power1.easeInOut,\n                    onUpdate: () => {\n                        this.bubbles.material.uniforms.uWinnerAlpha.value = progress.p;\n                    },\n                    onComplete: () => {\n                        this.bubbles.material.uniforms.isWinnerActive.value = false;\n                        this.bubbles.material.uniforms.uWinnerSelected.value = 0.0;\n                    },\n                });\n            }\n        }\n    }\n\n\n    initAnimation() {\n        const { scene, camera, memories } = this.mainBrain;\n\n        const particles = 100000;\n        const geometry = new THREE.BufferGeometry();\n        const sizes = [];\n        const positions = [];\n        const colors = [];\n        const delay = [];\n        const duration = 2.5;\n        const maxPointDelay = 1.5;\n        const bubbles = [];\n        const memory = [];\n\n        // Add fake shining bubbles\n        for (let i = 0; i < particles - (this.memorySelected.length * 3); i += 1) {\n            const r = THREE.Math.randInt(0, 4);\n            const mSelector = this.memorySelected[r];\n            const x = memories[mSelector][0].attributes.position.array[(i * 3) + 0] || 0;\n            const y = memories[mSelector][0].attributes.position.array[(i * 3) + 1] || 0;\n            const z = memories[mSelector][0].attributes.position.array[(i * 3) + 2] || 0;\n\n            positions.push(x, y, z);\n            memory.push(x, y, z, r);\n\n            sizes[i] = THREE.Math.randFloat(10.0, 20.0);\n            if ((i % 100) === 0) {\n                const altitude = THREE.Math.randInt(100, 250) + y;\n                bubbles.push(x, altitude, z, 1.0);\n            } else {\n                bubbles.push(x, y, z, 0.0);\n            }\n\n            delay[(i * 2) + 0] = THREE.Math.randFloat(0.5, maxPointDelay);\n            delay[(i * 2) + 1] = duration;\n        }\n\n        geometry.addAttribute('aDelayDuration', new THREE.Float32BufferAttribute(delay, 2));\n        geometry.addAttribute('bubbles', new THREE.Float32BufferAttribute(bubbles, 4));\n        geometry.addAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\n        geometry.addAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\n        geometry.addAttribute('size', new THREE.Float32BufferAttribute(sizes, 1));\n        geometry.addAttribute('aMemory', new THREE.Float32BufferAttribute(memory, 4));\n        geometry.computeBoundingSphere();\n        const customMaterial = new THREE.ShaderMaterial({\n            uniforms:\n                    {\n                        c: { type: 'f', value: 0.9 }, // Control the dynamically intensity.. Disabled\n                        p: { type: 'f', value: 2.8 }, // Control the dynamically intensity.. Disabled\n                        glowColor: { type: 'c', value: new THREE.Color(0x2C3E93) },\n                        viewVector: { type: 'v3', value: camera.position }, // To make intensity dynamically.. Disabled\n                        uTime: { type: 'f', value: 0.0 },\n                        uSlowTime: { type: 'f', value: 0.0 }, // Slow time to make some particles blinking slowly\n                        uBubblesUp: { type: 'f', value: 0.0 }, // Start the animation bubbling up\n                        uIsFlashing: { type: 'b', value: false }, // Make the whole brain flashing\n                        isWinnerActive: { type: 'b', value: false }, // Active the winner section of the brain\n                        uWinnerSelected: { type: 'f', value: 0.0 }, // activate section of the brain from 0 - 4 ['analytic', 'episodic', 'process', 'semantic', 'affective'];\n                        uWinnerAlpha: { type: 'f', value: 0.0 }, // smooth transition\n                        uFlashingAlpha: { type: 'f', value: 0.0 }, // Smooth fade out and fade in to activate or deactivate\n                        uMouse: { type: 'f', value: new THREE.Vector2(0.0) },\n                    },\n            vertexShader: glowVertex,\n            fragmentShader: glowFrag,\n            flatShading: THREE.SmoothShading,\n            blending: THREE.AdditiveBlending,\n            side: THREE.DoubleSide,\n            depthTest: false,\n            vertexColors: false,\n            transparent: true,\n\n        });\n        this.bubbles = new THREE.Points(geometry, customMaterial);\n        this.bubbles.name = 'memory';\n        scene.add(this.bubbles);\n        console.log('Bubble Object', this.bubbles);\n    }\n\n    updateSubSystem(subsystemPayload) {\n        const payload = BubblesAnimation.processSubsystemResponses(subsystemPayload);\n        this.mainBrain.thinkingAnimation.isActive(true);\n        this.bubbles.geometry.attributes.bubbles.needsUpdate = false;\n        const cameraPos = this.mainBrain.camera.position;\n        const { target } = this.mainBrain.orbitControls;\n        const bubblesAttr = this.bubbles.geometry.attributes.bubbles.array;\n        const progress = { p: 1.0 };\n\n        this.isWinnerActive(false);\n        this.mainBrain.font.removeText();\n        TweenMax.fromTo(progress, 2.5, { p: 1.0 }, {\n            p: 0.0,\n            ease: Power1.easeInOut,\n            onUpdate: () => {\n                this.updateBurbleUp(progress.p);\n            },\n            onStart: () => {\n                if (this.fistCameraReposition) {\n                    this.animate(false);\n                }\n            },\n            onComplete: () => {\n                // This function alter the bubblesAttr buffer\n                this.getBubblesSelected(bubblesAttr, payload);\n                this.bubbles.geometry.attributes.bubbles.needsUpdate = true;\n                this.animate(true);\n                this.mainBrain.thinkingAnimation.isActive(false);\n                this.fistCameraReposition = true;\n            },\n        });\n    }\n\n    static processSubsystemResponses(memoryNumber = 0) {\n        const response = Math.floor(testPayload[memoryNumber]) && Math.floor(testPayload[memoryNumber]).attributes || { subsystemResults: [] };\n\n        const winner = response.winningSubsystem;\n        const { subsystemResults } = response;\n        const winnerGroup = BubblesAnimation.getSubsystemGroup(winner);\n        return { winner, winnerGroup, subsystemResults };\n    }\n\n    static getSubsystemGroup(subsystem) {\n        const map = _.head(_.filter(memoryMapping, { id: subsystem }));\n        if (_.has(map, 'group')) {\n            return map.group;\n        }\n        return undefined;\n    }\n\n    update(camera) {\n        this.bubbles.material.uniforms.viewVector.value =\n          new THREE.Vector3().subVectors(camera.position, this.bubbles.position);\n        this.bubbles.material.uniforms.uTime.value += 1 / 20;\n        this.bubbles.material.uniforms.uSlowTime.value += (1 / 400);\n    }\n    updateBurbleUp(val) {\n        this.bubbles.material.uniforms.uBubblesUp.value = val;\n    }\n    updateMouse(coordinates) {\n        this.bubbles.material.uniforms.uMouse.value = coordinates;\n    }\n\n    flashingAnimation(isActive) {\n        this.bubbles.material.uniforms.uIsFlashing.value = isActive;\n        this.mainBrain.thinkingAnimation.isActive(false);\n        if (isActive) {\n            const progress = { p: 0.0 };\n            TweenMax.fromTo(progress, 2.5, { p: 0.0 }, {\n                p: 1.0,\n                ease: Power1.easeInOut,\n                onUpdate: () => {\n                    this.bubbles.material.uniforms.uFlashingAlpha.value = progress.p;\n                    this.isFlashing = true;\n                },\n            });\n        } else {\n            const progress = { p: 1.0 };\n            TweenMax.fromTo(progress, 2.5, { p: 1.0 }, {\n                p: 0.0,\n                ease: Power1.easeInOut,\n                onUpdate: () => {\n                    this.bubbles.material.uniforms.uFlashingAlpha.value = progress.p;\n                    this.isFlashing = false;\n                },\n            });\n        }\n    }\n\n    animate(isActive) {\n        const cameraPos = this.mainBrain.camera.position;\n        const { target } = this.mainBrain.orbitControls;\n        if (!this.isFlashing) {\n            this.flashingAnimation(true);\n        }\n        if (isActive) {\n            const progress = { p: 0.0, camera: 0.0 };\n            TweenMax.fromTo(progress, 2.5, { p: 0.0, camera: 0.0 }, {\n                p: 1.0,\n                camera: 0.5,\n                ease: Power1.easeInOut,\n                onUpdate: () => {\n                    this.updateBurbleUp(progress.p);\n                    this.mainBrain.orbitControls.target.set(target.x, target.y + progress.camera, target.z);\n                    this.mainBrain.camera.position.set(cameraPos.x, cameraPos.y + progress.camera, cameraPos.z);\n                },\n                onComplete: () => {\n                    this.isWinnerActive(true);\n                },\n            });\n        } else {\n            const progress = { p: 1.0, camera: 0.5 };\n            TweenMax.fromTo(progress, 2.5, { p: 1.0, camera: 0.5 }, {\n                p: 0.0,\n                camera: 0.0,\n                ease: Power1.easeInOut,\n                onUpdate: () => {\n                    this.updateBurbleUp(progress.p);\n                    this.mainBrain.orbitControls.target.set(target.x, target.y - progress.camera, target.z);\n                    this.mainBrain.camera.position.set(cameraPos.x, cameraPos.y - progress.camera, cameraPos.z);\n                },\n                onStart: () => {\n                    this.isWinnerActive(false);\n                },\n            });\n        }\n    }\n}\n\nexport default BubblesAnimation;\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/services/bubblesAnimation.js","module.exports = [{\"id\":\"IntentFAQ\",\"group\":\"semantic\"},{\"id\":\"SocialTalk\",\"group\":\"semantic\"},{\"id\":\"FAQ\",\"group\":\"semantic\"},{\"id\":\"Semnet\",\"group\":\"semantic\"},{\"id\":\"Escalate\",\"group\":\"semantic\"},{\"id\":\"EpisodicMemory\",\"group\":\"episodic\"},{\"id\":\"Affective\",\"group\":\"affective\"},{\"id\":\"AIML\",\"group\":\"affective\"},{\"id\":\"Bpn\",\"group\":\"process\"},{\"id\":\"Cqa\",\"group\":\"analytic\"},{\"id\":\"EQA\",\"group\":\"analytic\"},{\"id\":\"LogicNet\",\"group\":\"analytic\"}]\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/data/memoryMaping.json\n// module id = VGPT\n// module chunks = 1","module.exports = \"float random (in vec2 st) {\\n   return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/chunks/random.raw.xml\n// module id = XbjG\n// module chunks = 1","module.exports = [{\"messageId\":\"d542ac85-88c9-4d49-a5cb-08514cb67ba0\",\"conversationId\":\"LDWNSLVXAAIAA-1\",\"inResponseToMessageId\":\"76186dad-cba3-423f-ae27-35a796028c24\",\"sourceSessionId\":\"b9e1fdeb-4417-463f-a9f2-4f2253d9e38b\",\"sourceClass\":\"ContextDialogManagementService\",\"messageText\":null,\"attributes\":{\"inboundText\":\"hello\",\"preProcessors\":[{\"time\":\"21.31 μs\",\"processor\":\"SetCustomConversationAttributesProcessor\"},{\"time\":\"50.09 μs\",\"processor\":\"TranslationProcessor\"},{\"time\":\"723.8 ms\",\"processor\":\"InboundNlpProcessor\"},{\"time\":\"48.58 ms\",\"processor\":\"CorefProcessor\"},{\"time\":\"322.6 ms\",\"processor\":\"GoalAndEntityProcessor\"},{\"time\":\"221.3 ms\",\"processor\":\"UserAffectUpdateService\"},{\"time\":\"9.804 ms\",\"processor\":\"AnalyticsProcessor\"},{\"time\":\"29.28 μs\",\"processor\":\"BpnLearningProcessor\"}],\"winningSubsystem\":\"analytic\",\"initialContext\":{\"dialogState\":\"ACTIVE\",\"contextId\":\"763decf0-31b2-4e3c-b44b-531a294c6fcf\",\"preferredResponder\":null},\"subsystemResults\":[{\"result\":\"OK\",\"subsystem\":\"Semnet\",\"responses\":[],\"time\":\"13.63 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Bpn\",\"responses\":[],\"time\":\"18.43 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"AIML\",\"responses\":[\"Hi victor, How can I help you?.\"],\"time\":\"31.98 ms\"},{\"result\":\"NONE\",\"subsystem\":\"LogicNet\",\"responses\":[],\"time\":\"17.74 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"DontKnow\",\"responses\":[null],\"time\":\"15.94 ms\"},{\"result\":\"NONE\",\"subsystem\":\"FAQ\",\"responses\":[],\"time\":\"43.49 ms\"},{\"result\":\"NONE\",\"subsystem\":\"EQA\",\"responses\":[],\"time\":\"19.72 ms\"},{\"result\":\"NONE\",\"subsystem\":\"EpisodicMemory\",\"responses\":[],\"time\":\"706.8 ms\"},{\"result\":\"NONE\",\"subsystem\":\"IntentFAQ\",\"responses\":[],\"time\":\"55.04 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Affective\",\"responses\":[],\"time\":\"24.98 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Escalate\",\"responses\":[],\"time\":\"10.61 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"SocialTalk\",\"responses\":[null],\"time\":\"22.22 ms\"},{\"result\":\"NONE\",\"subsystem\":\"SemnetDoc\",\"responses\":[],\"time\":\"13.79 ms\"},{\"result\":\"NONE\",\"subsystem\":\"AcknowledgeDefault\",\"responses\":[],\"time\":\"24.76 ms\"}],\"finalContext\":{\"dialogState\":\"ACTIVE\",\"contextId\":\"763decf0-31b2-4e3c-b44b-531a294c6fcf\",\"preferredResponder\":null}},\"fromUserDisplayName\":\"Amelia\",\"secureResponse\":false,\"id\":\"d542ac85-88c9-4d49-a5cb-08514cb67ba0\",\"messageType\":\"OutboundArbitrationResultsMessage\",\"translated\":false,\"voice\":\"VW Julie\"},{\"messageId\":\"d542ac85-88c9-4d49-a5cb-08514cb67ba0\",\"conversationId\":\"LDWNSLVXAAIAA-1\",\"inResponseToMessageId\":\"76186dad-cba3-423f-ae27-35a796028c24\",\"sourceSessionId\":\"b9e1fdeb-4417-463f-a9f2-4f2253d9e38b\",\"sourceClass\":\"ContextDialogManagementService\",\"messageText\":null,\"attributes\":{\"inboundText\":\"hello\",\"preProcessors\":[{\"time\":\"21.31 μs\",\"processor\":\"SetCustomConversationAttributesProcessor\"},{\"time\":\"50.09 μs\",\"processor\":\"TranslationProcessor\"},{\"time\":\"723.8 ms\",\"processor\":\"InboundNlpProcessor\"},{\"time\":\"48.58 ms\",\"processor\":\"CorefProcessor\"},{\"time\":\"322.6 ms\",\"processor\":\"GoalAndEntityProcessor\"},{\"time\":\"221.3 ms\",\"processor\":\"UserAffectUpdateService\"},{\"time\":\"9.804 ms\",\"processor\":\"AnalyticsProcessor\"},{\"time\":\"29.28 μs\",\"processor\":\"BpnLearningProcessor\"}],\"winningSubsystem\":\"episodic\",\"initialContext\":{\"dialogState\":\"ACTIVE\",\"contextId\":\"763decf0-31b2-4e3c-b44b-531a294c6fcf\",\"preferredResponder\":null},\"subsystemResults\":[{\"result\":\"OK\",\"subsystem\":\"Semnet\",\"responses\":[],\"time\":\"13.63 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Bpn\",\"responses\":[],\"time\":\"18.43 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"AIML\",\"responses\":[\"Hi victor, How can I help you?.\"],\"time\":\"31.98 ms\"},{\"result\":\"NONE\",\"subsystem\":\"LogicNet\",\"responses\":[],\"time\":\"17.74 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"DontKnow\",\"responses\":[null],\"time\":\"15.94 ms\"},{\"result\":\"NONE\",\"subsystem\":\"FAQ\",\"responses\":[],\"time\":\"43.49 ms\"},{\"result\":\"NONE\",\"subsystem\":\"EQA\",\"responses\":[],\"time\":\"19.72 ms\"},{\"result\":\"NONE\",\"subsystem\":\"EpisodicMemory\",\"responses\":[],\"time\":\"706.8 ms\"},{\"result\":\"NONE\",\"subsystem\":\"IntentFAQ\",\"responses\":[],\"time\":\"55.04 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Affective\",\"responses\":[],\"time\":\"24.98 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Escalate\",\"responses\":[],\"time\":\"10.61 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"SocialTalk\",\"responses\":[null],\"time\":\"22.22 ms\"},{\"result\":\"NONE\",\"subsystem\":\"SemnetDoc\",\"responses\":[],\"time\":\"13.79 ms\"},{\"result\":\"NONE\",\"subsystem\":\"AcknowledgeDefault\",\"responses\":[],\"time\":\"24.76 ms\"}],\"finalContext\":{\"dialogState\":\"ACTIVE\",\"contextId\":\"763decf0-31b2-4e3c-b44b-531a294c6fcf\",\"preferredResponder\":null}},\"fromUserDisplayName\":\"Amelia\",\"secureResponse\":false,\"id\":\"d542ac85-88c9-4d49-a5cb-08514cb67ba0\",\"messageType\":\"OutboundArbitrationResultsMessage\",\"translated\":false,\"voice\":\"VW Julie\"},{\"messageId\":\"d542ac85-88c9-4d49-a5cb-08514cb67ba0\",\"conversationId\":\"LDWNSLVXAAIAA-1\",\"inResponseToMessageId\":\"76186dad-cba3-423f-ae27-35a796028c24\",\"sourceSessionId\":\"b9e1fdeb-4417-463f-a9f2-4f2253d9e38b\",\"sourceClass\":\"ContextDialogManagementService\",\"messageText\":null,\"attributes\":{\"inboundText\":\"hello\",\"preProcessors\":[{\"time\":\"21.31 μs\",\"processor\":\"SetCustomConversationAttributesProcessor\"},{\"time\":\"50.09 μs\",\"processor\":\"TranslationProcessor\"},{\"time\":\"723.8 ms\",\"processor\":\"InboundNlpProcessor\"},{\"time\":\"48.58 ms\",\"processor\":\"CorefProcessor\"},{\"time\":\"322.6 ms\",\"processor\":\"GoalAndEntityProcessor\"},{\"time\":\"221.3 ms\",\"processor\":\"UserAffectUpdateService\"},{\"time\":\"9.804 ms\",\"processor\":\"AnalyticsProcessor\"},{\"time\":\"29.28 μs\",\"processor\":\"BpnLearningProcessor\"}],\"winningSubsystem\":\"process\",\"initialContext\":{\"dialogState\":\"ACTIVE\",\"contextId\":\"763decf0-31b2-4e3c-b44b-531a294c6fcf\",\"preferredResponder\":null},\"subsystemResults\":[{\"result\":\"OK\",\"subsystem\":\"Semnet\",\"responses\":[],\"time\":\"13.63 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Bpn\",\"responses\":[],\"time\":\"18.43 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"AIML\",\"responses\":[\"Hi victor, How can I help you?.\"],\"time\":\"31.98 ms\"},{\"result\":\"NONE\",\"subsystem\":\"LogicNet\",\"responses\":[],\"time\":\"17.74 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"DontKnow\",\"responses\":[null],\"time\":\"15.94 ms\"},{\"result\":\"NONE\",\"subsystem\":\"FAQ\",\"responses\":[],\"time\":\"43.49 ms\"},{\"result\":\"NONE\",\"subsystem\":\"EQA\",\"responses\":[],\"time\":\"19.72 ms\"},{\"result\":\"NONE\",\"subsystem\":\"EpisodicMemory\",\"responses\":[],\"time\":\"706.8 ms\"},{\"result\":\"NONE\",\"subsystem\":\"IntentFAQ\",\"responses\":[],\"time\":\"55.04 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Affective\",\"responses\":[],\"time\":\"24.98 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Escalate\",\"responses\":[],\"time\":\"10.61 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"SocialTalk\",\"responses\":[null],\"time\":\"22.22 ms\"},{\"result\":\"NONE\",\"subsystem\":\"SemnetDoc\",\"responses\":[],\"time\":\"13.79 ms\"},{\"result\":\"NONE\",\"subsystem\":\"AcknowledgeDefault\",\"responses\":[],\"time\":\"24.76 ms\"}],\"finalContext\":{\"dialogState\":\"ACTIVE\",\"contextId\":\"763decf0-31b2-4e3c-b44b-531a294c6fcf\",\"preferredResponder\":null}},\"fromUserDisplayName\":\"Amelia\",\"secureResponse\":false,\"id\":\"d542ac85-88c9-4d49-a5cb-08514cb67ba0\",\"messageType\":\"OutboundArbitrationResultsMessage\",\"translated\":false,\"voice\":\"VW Julie\"},{\"messageId\":\"d542ac85-88c9-4d49-a5cb-08514cb67ba0\",\"conversationId\":\"LDWNSLVXAAIAA-1\",\"inResponseToMessageId\":\"76186dad-cba3-423f-ae27-35a796028c24\",\"sourceSessionId\":\"b9e1fdeb-4417-463f-a9f2-4f2253d9e38b\",\"sourceClass\":\"ContextDialogManagementService\",\"messageText\":null,\"attributes\":{\"inboundText\":\"hello\",\"preProcessors\":[{\"time\":\"21.31 μs\",\"processor\":\"SetCustomConversationAttributesProcessor\"},{\"time\":\"50.09 μs\",\"processor\":\"TranslationProcessor\"},{\"time\":\"723.8 ms\",\"processor\":\"InboundNlpProcessor\"},{\"time\":\"48.58 ms\",\"processor\":\"CorefProcessor\"},{\"time\":\"322.6 ms\",\"processor\":\"GoalAndEntityProcessor\"},{\"time\":\"221.3 ms\",\"processor\":\"UserAffectUpdateService\"},{\"time\":\"9.804 ms\",\"processor\":\"AnalyticsProcessor\"},{\"time\":\"29.28 μs\",\"processor\":\"BpnLearningProcessor\"}],\"winningSubsystem\":\"semantic\",\"initialContext\":{\"dialogState\":\"ACTIVE\",\"contextId\":\"763decf0-31b2-4e3c-b44b-531a294c6fcf\",\"preferredResponder\":null},\"subsystemResults\":[{\"result\":\"OK\",\"subsystem\":\"Semnet\",\"responses\":[],\"time\":\"13.63 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Bpn\",\"responses\":[],\"time\":\"18.43 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"AIML\",\"responses\":[\"Hi victor, How can I help you?.\"],\"time\":\"31.98 ms\"},{\"result\":\"NONE\",\"subsystem\":\"LogicNet\",\"responses\":[],\"time\":\"17.74 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"DontKnow\",\"responses\":[null],\"time\":\"15.94 ms\"},{\"result\":\"NONE\",\"subsystem\":\"FAQ\",\"responses\":[],\"time\":\"43.49 ms\"},{\"result\":\"NONE\",\"subsystem\":\"EQA\",\"responses\":[],\"time\":\"19.72 ms\"},{\"result\":\"NONE\",\"subsystem\":\"EpisodicMemory\",\"responses\":[],\"time\":\"706.8 ms\"},{\"result\":\"NONE\",\"subsystem\":\"IntentFAQ\",\"responses\":[],\"time\":\"55.04 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Affective\",\"responses\":[],\"time\":\"24.98 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Escalate\",\"responses\":[],\"time\":\"10.61 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"SocialTalk\",\"responses\":[null],\"time\":\"22.22 ms\"},{\"result\":\"NONE\",\"subsystem\":\"SemnetDoc\",\"responses\":[],\"time\":\"13.79 ms\"},{\"result\":\"NONE\",\"subsystem\":\"AcknowledgeDefault\",\"responses\":[],\"time\":\"24.76 ms\"}],\"finalContext\":{\"dialogState\":\"ACTIVE\",\"contextId\":\"763decf0-31b2-4e3c-b44b-531a294c6fcf\",\"preferredResponder\":null}},\"fromUserDisplayName\":\"Amelia\",\"secureResponse\":false,\"id\":\"d542ac85-88c9-4d49-a5cb-08514cb67ba0\",\"messageType\":\"OutboundArbitrationResultsMessage\",\"translated\":false,\"voice\":\"VW Julie\"},{\"messageId\":\"d542ac85-88c9-4d49-a5cb-08514cb67ba0\",\"conversationId\":\"LDWNSLVXAAIAA-1\",\"inResponseToMessageId\":\"76186dad-cba3-423f-ae27-35a796028c24\",\"sourceSessionId\":\"b9e1fdeb-4417-463f-a9f2-4f2253d9e38b\",\"sourceClass\":\"ContextDialogManagementService\",\"messageText\":null,\"attributes\":{\"inboundText\":\"hello\",\"preProcessors\":[{\"time\":\"21.31 μs\",\"processor\":\"SetCustomConversationAttributesProcessor\"},{\"time\":\"50.09 μs\",\"processor\":\"TranslationProcessor\"},{\"time\":\"723.8 ms\",\"processor\":\"InboundNlpProcessor\"},{\"time\":\"48.58 ms\",\"processor\":\"CorefProcessor\"},{\"time\":\"322.6 ms\",\"processor\":\"GoalAndEntityProcessor\"},{\"time\":\"221.3 ms\",\"processor\":\"UserAffectUpdateService\"},{\"time\":\"9.804 ms\",\"processor\":\"AnalyticsProcessor\"},{\"time\":\"29.28 μs\",\"processor\":\"BpnLearningProcessor\"}],\"winningSubsystem\":\"affective\",\"initialContext\":{\"dialogState\":\"ACTIVE\",\"contextId\":\"763decf0-31b2-4e3c-b44b-531a294c6fcf\",\"preferredResponder\":null},\"subsystemResults\":[{\"result\":\"OK\",\"subsystem\":\"Semnet\",\"responses\":[],\"time\":\"13.63 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Bpn\",\"responses\":[],\"time\":\"18.43 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"AIML\",\"responses\":[\"Hi victor, How can I help you?.\"],\"time\":\"31.98 ms\"},{\"result\":\"NONE\",\"subsystem\":\"LogicNet\",\"responses\":[],\"time\":\"17.74 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"DontKnow\",\"responses\":[null],\"time\":\"15.94 ms\"},{\"result\":\"NONE\",\"subsystem\":\"FAQ\",\"responses\":[],\"time\":\"43.49 ms\"},{\"result\":\"NONE\",\"subsystem\":\"EQA\",\"responses\":[],\"time\":\"19.72 ms\"},{\"result\":\"NONE\",\"subsystem\":\"EpisodicMemory\",\"responses\":[],\"time\":\"706.8 ms\"},{\"result\":\"NONE\",\"subsystem\":\"IntentFAQ\",\"responses\":[],\"time\":\"55.04 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Affective\",\"responses\":[],\"time\":\"24.98 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Escalate\",\"responses\":[],\"time\":\"10.61 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"SocialTalk\",\"responses\":[null],\"time\":\"22.22 ms\"},{\"result\":\"NONE\",\"subsystem\":\"SemnetDoc\",\"responses\":[],\"time\":\"13.79 ms\"},{\"result\":\"NONE\",\"subsystem\":\"AcknowledgeDefault\",\"responses\":[],\"time\":\"24.76 ms\"}],\"finalContext\":{\"dialogState\":\"ACTIVE\",\"contextId\":\"763decf0-31b2-4e3c-b44b-531a294c6fcf\",\"preferredResponder\":null}},\"fromUserDisplayName\":\"Amelia\",\"secureResponse\":false,\"id\":\"d542ac85-88c9-4d49-a5cb-08514cb67ba0\",\"messageType\":\"OutboundArbitrationResultsMessage\",\"translated\":false,\"voice\":\"VW Julie\"}]\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/data/testPayload.json\n// module id = cQvb\n// module chunks = 1","module.exports = \"#define GLSLIFY 1\\nuniform vec3 viewVector;\\nuniform float c;\\nuniform float p;\\nuniform float uTime;\\nvarying float intensity;\\nvarying  vec2 vUv;\\n\\nvoid main(){\\n\\n    vUv = uv;\\n\\n    vec3 vNormal = normalize( normalMatrix * normal );\\n\\tvec3 vNormel = normalize( normalMatrix * viewVector );\\n    intensity = pow(c - abs(dot(vNormal, vec3(0, 0, 1))), p);\\n\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n }\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/shaders/xRay.vert\n// module id = cRIw\n// module chunks = 1","import './css/style.css';\nimport MainBrain from './js/MainBrain';\n\n// eslint-disable-next-line\nnew MainBrain()\n\n\n\n// WEBPACK FOOTER //\n// ./src/app.js","module.exports = {\"episodic\":{\"x\":92,\"y\":45,\"z\":0,\"size\":50,\"camera\":{\"x\":144,\"y\":30,\"z\":284.6}},\"semanticRight\":{\"x\":20,\"y\":-30,\"z\":65,\"size\":50,\"camera\":{\"x\":100.92543906042464,\"y\":-0.9434978080745353,\"z\":-238.15054105700113}},\"analityc\":{\"x\":-80,\"y\":20,\"z\":0,\"size\":50,\"camera\":{\"x\":-231.7315097929428,\"y\":-17.545964846039936,\"z\":-221.1965290742952}},\"process\":{\"x\":-50,\"y\":75,\"z\":0,\"size\":50,\"camera\":{\"x\":-152.59773939016097,\"y\":152.71424382251672,\"z\":237.33425301574184}},\"afective\":{\"x\":-100,\"y\":-30,\"z\":0,\"size\":50,\"camera\":{\"x\":-236.1407685891055,\"y\":-15.365212485321477,\"z\":-221.51856763625176}},\"semanticLeft\":{\"x\":20,\"y\":-30,\"z\":-65,\"size\":50,\"camera\":-1}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/data/flashingCoordinates.json\n// module id = hmLD\n// module chunks = 1","module.exports = \"vec2 rotate2D(vec2 _st, float _angle){\\n        _st -= 0.5;\\n        _st =  mat2(cos(_angle),-sin(_angle), sin(_angle),cos(_angle)) * _st;\\n        _st += 0.5;\\n  return _st;\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/chunks/rotate.raw.xml\n// module id = joTG\n// module chunks = 1","import * as THREE from 'three';\nimport 'three/examples/js/loaders/OBJLoader';\n\nclass Loaders {\n    constructor(startAnimation) {\n        this.BRAIN_MODEL = {};\n        this.brainXRayLight = {};\n        this.FONT = {};\n        this.assets = new Map();\n        this.models = ['BrainUVs.obj'];\n        this.loadingManager = new THREE.LoadingManager();\n        this.startAnimation = startAnimation;\n        this.loadingManager.onLoad = this.handlerLoad.bind(this);\n        this.loadingManager.onProgress = this.handlerProgress;\n        this.loadingManager.onError = this.handlerError;\n        this.loadingManager.onStart = this.handlerStart;\n        this.setModel = this.setModel.bind(this);\n        this.loadBrainTextures();\n        this.loadOBJs();\n        this.loadTextures();\n        this.loadFont();\n        this.loadSceneBackground();\n    }\n\n    static handlerStart() {\n        console.log('Starting');\n    }\n    static handlerProgress(url, itemsLoaded, itemsTotal) {\n        console.log(`Loading file: ${url}.\\nLoaded ${itemsLoaded} of ${itemsTotal} files.`);\n    }\n    handlerLoad() {\n        console.log('loading Complete!');\n        this.startAnimation();\n    }\n    static handlerError(url) {\n        console.log(`There was an error loading ${url}`);\n    }\n    setModel(model, i) {\n        switch (i) {\n            case 0:\n                this.BRAIN_MODEL = model;\n                break;\n            case 1:\n                this.XRAY_MODEL = model;\n                break;\n            default:\n                this.BRAIN_MODEL = model;\n        }\n    }\n\n    loadOBJs() {\n        const loader = new THREE.OBJLoader(this.loadingManager);\n        this.models.forEach((m, i) => {\n            loader.load(`static/models/${m}`, (model) => {\n                this.setModel(model, i);\n            });\n        });\n    }\n\n    loadTextures() {\n        const loader = new THREE.TextureLoader(this.loadingManager);\n        loader.load('static/textures/spark1.png', (t) => {\n            this.spark = t;\n        });\n    }\n\n    loadBrainTextures() {\n        const loader = new THREE.TextureLoader(this.loadingManager);\n        loader.load('static/textures/brainXRayLight.png', (t) => {\n            this.brainXRayLight = t;\n        });\n    }\n\n    loadSceneBackground() {\n        const cubeTextureLoader = new THREE.CubeTextureLoader(this.loadingManager);\n        const path = 'static/textures/sky/';\n        const format = '.png';\n        const urls = [\n            `${path}px${format}`, `${path}nx${format}`,\n            `${path}py${format}`, `${path}ny${format}`,\n            `${path}pz${format}`, `${path}nz${format}`,\n        ];\n\n        cubeTextureLoader.load(urls, (textureCube) => {\n            this.assets.set('sky', textureCube);\n        });\n    }\n\n    loadFont() {\n        const fontLoader = new THREE.FontLoader(this.loadingManager);\n        fontLoader.load('static/fonts/Roboto_Regular.json', (font) => {\n            this.FONT = font;\n        });\n    }\n}\n\nexport default Loaders;\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/Loaders/Loaders.js","import * as THREE from 'three';\nimport { Power2, TweenLite } from 'gsap';\n\nclass Font {\n    constructor(loader, scene) {\n        this.font = loader.FONT;\n        this.scene = scene;\n    }\n\n    makeTextSprite(_message, _parentObject, _position, size = 2) {\n        const message = _message;\n        const parentObject = _parentObject;\n        const position = _position;\n        if (parentObject) {\n            const group = new THREE.Group();\n            this.scene.add(group);\n            const textMaterial = new THREE.MeshBasicMaterial({\n                color: new THREE.Color(1, 2, 1),\n                side: THREE.DoubleSide,\n                wireframe: false,\n            });\n            const textShapes = this.font.generateShapes(message, size, size);\n            const text3d = new THREE.ShapeGeometry(textShapes);\n            text3d.computeBoundingBox();\n            const text = new THREE.Mesh(text3d, textMaterial);\n            const centerOffset = text.geometry.boundingBox.max.x / 2.0;\n            text.position.set(position.x - centerOffset, position.y - 10, position.z);\n            text.type = 'Font';\n\n            text.material.opacity = 0;\n            text.material.transparent = true;\n            parentObject.add(text);\n\n            TweenLite.to(text.material, 2.5, { ease: Power2.easeOut, opacity: 1.0 });\n            TweenLite.to(text.position, 2.5, { ease: Power2.easeOut, y: position.y + 2 });\n        }\n    }\n\n    removeText(parentGroup) {\n        const removeFrom = parentGroup || this.scene || [];\n\n        removeFrom.traverse((obj) => {\n            if (obj instanceof THREE.Mesh && obj.type === 'Font') {\n                TweenLite.to(obj.material, 2.5, { ease: Power2.easeOut, opacity: 0.0 });\n                TweenLite.to(obj.position, 2.5, { ease: Power2.easeOut, y: obj.position.y - 10, onComplete: () => { obj.parent.remove(obj); } });\n            }\n        });\n    }\n\n    facingToCamera(camera, parentGroup) {\n        const facing = parentGroup || this.scene || [];\n\n        facing.traverse((obj) => {\n            if (obj instanceof THREE.Mesh && obj.type === 'Font') {\n                obj.lookAt(camera.position);\n            }\n        });\n    }\n}\nexport default Font;\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/services/font.js","/* eslint no-param-reassign: [\"error\", { \"props\": true, \"ignorePropertyModificationsFor\": [\"data\"] }] */\nimport * as BAS from 'three-bas';\nimport * as THREE from 'three';\nimport { Power1, TweenMax } from 'gsap';\nimport Chuncks from './chunks';\nimport xRayVertex from '../shaders/xRay.vert';\nimport xRayFrag from '../shaders/xRay.frag';\n\n\nclass ParticleSystem {\n    constructor(mainBrain, brainParticles, memories) {\n        this.chuncks = new Chuncks();\n        this.brainParticles = brainParticles;\n        this.memories = memories;\n        this.mainBrain = mainBrain;\n        this.particlesStartColor = new THREE.Color(0xffffff);\n        this.particlesColor = new THREE.Color(0xffffff);\n        const { xRayEffect, systemPoints } = this.init();\n        this.particles = systemPoints;\n        this.xRay = xRayEffect;\n    }\n\n    static getLoadingPoints() {\n        const geometry = new THREE.RingBufferGeometry(100, 40, 150, 150, 20);\n        return geometry.attributes.position.array;\n    }\n\n    init() {\n        const duration = 1.0;\n        const maxPointDelay = 0.3;\n\n        const brainPoints = this.brainParticles.attributes.position.array;\n\n        const count = brainPoints.length / 3;\n        const me = this;\n\n        const geometry = new BAS.PointBufferGeometry(count);\n\n        const loadingCircle = ParticleSystem.getLoadingPoints();\n        geometry.createAttribute('aStartLoading', 3, (data, index, num) => {\n            const startVec3 = new THREE.Vector3();\n            if (loadingCircle.length < brainPoints.length) {\n                startVec3.x = loadingCircle[(index * 3) + 0] || 0.0;\n                startVec3.y = loadingCircle[(index * 3) + 1] || 0.0;\n                startVec3.z = THREE.Math.randFloat(-80.0, 1500.0); // loadingCircle[index * 3 + 2] || 0\n            } else {\n                startVec3.x = 100.0;\n                startVec3.y = 100.0;\n                startVec3.z = THREE.Math.randFloat(-80.0, 1500.0); // loadingCircle[index * 3 + 2] || 0\n            }\n            startVec3.toArray(data);\n        });\n\n        const color = new THREE.Color();\n        geometry.createAttribute('aStartColor', 3, (data) => {\n            const { r, g, b } = me.particlesStartColor;\n\n            color.setRGB(r, g, b);\n            color.toArray(data);\n        });\n\n        geometry.createAttribute('scale', 1, (data) => {\n            data[0] = THREE.Math.randFloat(200.0, 400.0);\n        });\n\n        geometry.createAttribute('aEndColor', 3, (data) => {\n            const { r, g, b } = me.particlesStartColor;\n\n            color.setRGB(r, g, b);\n            color.toArray(data);\n        });\n\n        geometry.createAttribute('aEndPos', 3, (data, index) => {\n            const startVec3 = new THREE.Vector3();\n            startVec3.x = brainPoints[(index * 3) + 0];\n            startVec3.y = brainPoints[(index * 3) + 1];\n            startVec3.z = brainPoints[(index * 3) + 2];\n            startVec3.toArray(data);\n        });\n\n        this.totalDuration = duration + maxPointDelay;\n\n        geometry.createAttribute('aDelayDuration', 3, (data) => {\n            data[0] = Math.random() * maxPointDelay;\n            data[1] = duration;\n        });\n\n\n        const geometry2 = new BAS.PointBufferGeometry(count);\n\n        geometry2.createAttribute('position', 3, (data, index) => {\n            const startVec3 = new THREE.Vector3();\n            startVec3.x = brainPoints[(index * 3) + 0];\n            startVec3.y = brainPoints[(index * 3) + 1];\n            startVec3.z = brainPoints[(index * 3) + 2];\n            startVec3.toArray(data);\n        });\n\n\n        const material = new BAS.PointsAnimationMaterial({\n            // transparent: true,\n            // blending: THREE.AdditiveBlending,\n            vertexColors: THREE.VertexColors,\n            deptWrite: false,\n\n            blending: THREE.AdditiveBlending,\n            depthTest: true,\n            transparent: true,\n            uniforms: {\n                uTime: { type: 'f', value: 0 },\n                uProgress: { type: 'float', value: 0.0 },\n                uAngle: { type: 'f', value: 1.0 },\n                uPointSizeEffect: { type: 'f', value: 0.1 },\n                uColor: { value: new THREE.Color(0xffffff) },\n            },\n            defines: {\n                // USE_SIZEATTENUATION: false, // Change size of the particle depending of the camera\n            },\n            uniformValues: {\n                size: 1.9,\n                scale: 400,\n            },\n            vertexFunctions: [\n                BAS.ShaderChunk.ease_expo_in_out,\n                BAS.ShaderChunk.quaternion_rotation,\n                this.chuncks.rotate,\n                this.chuncks.random,\n                this.chuncks.noise,\n            ],\n\n            vertexParameters: [\n                'uniform float uTime;',\n                'uniform float uPointSizeEffect;',\n                'uniform float uProgress;',\n                'uniform float uAngle;',\n                'attribute vec2 aDelayDuration;',\n                'attribute vec3 aStartLoading;',\n                'attribute vec3 aStartPos;',\n                'attribute vec3 aEndPos;',\n                'attribute vec3 aStartColor;',\n                'attribute vec3 aEndColor;',\n                'attribute float aStartOpacity;',\n                'attribute float aEndOpacity;',\n\n            ],\n            varyingParameters: [\n                `\n          varying vec3 vParticle;\n          varying vec3 vEndPos;\n          varying vec3 vStartLoading;\n          `,\n            ],\n            // this chunk is injected 1st thing in the vertex shader main() function\n            // variables declared here are available in all subsequent chunks\n            vertexInit: [\n                // calculate a progress value between 0.0 and 1.0 based on the vertex delay and duration, and the uniform time\n                'float tProgress = clamp(uProgress - aDelayDuration.x, 0.0, aDelayDuration.y) / aDelayDuration.y;',\n                // // ease the progress using one of the available easing functions\n                'tProgress = easeExpoInOut(tProgress);',\n                // 'tProgress = uProgress;'\n                // 'if(test){ tProgress = 0.0; } else { tProgress = 1.0 ;}'\n            ],\n            // this chunk is injected before all default position calculations (including the model matrix multiplication)\n            vertexPosition: [`\n        // linearly interpolate between the start and end position based on tProgress\n        // and add the value as a delta\n \n         if(tProgress < 0.5){ \n         vec2 pos = vec2(aStartLoading.xy*5.0);\n\n        // Use the noise function\n        float n = noise(aStartLoading.yx);\n     vec2 test;\n      if(mod(aStartLoading.x, 2.0) < 0.2){\n            test = rotate2D(aStartLoading.xy, PI*2.0 * uTime * uAngle * n);\n             transformed += vec3(test.x, test.y, aStartLoading.z * n);\n        }else if (mod(aStartLoading.x, 2.0) >= 0.2 && mod(aStartLoading.x, 2.0) < 1.5){\n            test = rotate2D(aStartLoading.xy + n, PI*2.0 * uTime * 0.05 * uAngle * n);\n            transformed += vec3(test.x, test.y, aStartLoading.z * n);\n        }else {\n            test = rotate2D(aStartLoading.xy + n, PI*2.0 * uTime * 0.01 * uAngle * n);\n            transformed += vec3(test.x, test.y , aStartLoading.z * n);\n        }\n        }else{\n        \n  \n        //Brain Particles\n           transformed += mix(aStartLoading, aEndPos, tProgress);\n        }   \n        `,\n            ],\n            // this chunk is injected before all default color calculations\n            vertexColor: [\n                // linearly interpolate between the start and end position based on tProgress\n                // and add the value as a delta\n                ` \n         vParticle = aEndPos;\n         \n        vEndPos = aEndPos;\n        vStartLoading = aStartLoading;\n        `,\n            ],\n\n            fragmentParameters: [\n\n                'uniform float uTime;',\n                'uniform vec3 uColor;',\n            ],\n            // convert the point (default is square) to circle shape, make sure transparent of material is true\n            // you can create more shapes: https://thebookofshaders.com/07/\n            fragmentShape: [\n                `\n        float distanceToCenter = distance(gl_PointCoord, vec2(0.5));\n        float pct = 1.0 - smoothstep(0.0, 0.5, distanceToCenter);\n        vec3 color = vec3(1.0) * gl_FragColor.rgb;\n        gl_FragColor = vec4(color, pct * gl_FragColor.a);\n\n       `],\n\n        });\n\n        const xRayMaterial = new THREE.ShaderMaterial({\n            uniforms: {\n                c: { type: 'f', value: 0.9 },\n                p: { type: 'f', value: 6.7 },\n                glowColor: { type: 'c', value: new THREE.Color(0x84ccff) },\n                viewVector: { type: 'v3', value: new THREE.Vector3(0, 0, 0) },\n                lightningTexture: { type: 't', value: this.mainBrain.loaders.brainXRayLight },\n                offsetY: { type: 'f', value: 0.3 },\n                uTime: { type: 'f', value: 0.0 },\n            },\n            vertexShader: xRayVertex,\n            fragmentShader: xRayFrag,\n            side: THREE.DoubleSide,\n            blending: THREE.AdditiveBlending,\n            transparent: true,\n            depthWrite: false,\n        });\n\n        const systemPoints = new THREE.Points(geometry, material);\n\n        console.error('MEMORIES', this.memories);\n        const xRayGeometry = new THREE.Geometry().fromBufferGeometry(this.mainBrain.endPointsCollections);\n        xRayGeometry.computeFaceNormals();\n        xRayGeometry.mergeVertices();\n        xRayGeometry.computeVertexNormals();\n\n        const xRayEffect = new THREE.Mesh(xRayGeometry, xRayMaterial);\n\n        // systemPoints.visible = false;\n        // system.scale.multiplyScalar(1.05);\n        systemPoints.castShadow = true;\n        systemPoints.frustumCulled = false;\n        // systemPoints.visible = false;\n\n        // // depth material is used for directional & spot light shadows\n        // systemPoints.customDepthMaterial = BAS.Utils.createDepthAnimationMaterial(material);\n        // // distance material is used for point light shadows\n        systemPoints.customDistanceMaterial = BAS.Utils.createDistanceAnimationMaterial(material);\n\n        systemPoints.customDepthMaterial = new THREE.ShaderMaterial({\n            vertexShader: material.vertexShader,\n            fragmentShader: material.fragmentShader,\n            uniforms: material.uniforms,\n        });\n\n        return { xRayEffect, systemPoints };\n    }\n\n\n    update(deltaTime, camera, brain) {\n        this.particles.material.uniforms.uTime.value = deltaTime;\n        this.xRay.material.uniforms.viewVector.value = new THREE.Vector3().subVectors(camera.position, brain.position);\n        this.xRay.material.uniforms.uTime.value = deltaTime;\n    }\n\n    isXRayActive(status) {\n        if (status) {\n            const progress = { p: 0.0 };\n            TweenMax.fromTo(progress, 3.0, { p: 3.0 }, {\n                p: 5.0,\n                ease: Power1.easeIn,\n                onUpdate: () => {\n                    this.xRay.material.uniforms.offsetY.value = Math.sin(progress.p);\n                },\n                onComplete: () => {\n                },\n            });\n        } else {\n            const progress = { p: 1.0 };\n            TweenMax.fromTo(progress, 3.0, { p: 5.0 }, {\n                p: 3.0,\n                ease: Power1.easeIn,\n                onUpdate: () => {\n                    this.xRay.material.uniforms.offsetY.value = Math.sin(progress.p);\n                },\n            });\n        }\n    }\n\n    updateTransitioning(val) {\n        this.particles.material.uniforms.uProgress.value += 1 / 300;\n        this.particles.customDepthMaterial.uniforms.uProgress.value += 1 / 300;\n        this.particles.customDistanceMaterial.uniforms.uProgress.value += 1 / 300;\n    }\n\n    transform(status) {\n        if (status) {\n            const progress = { p: 0.0 };\n            TweenMax.fromTo(progress, 5.9, { p: 0.0 }, {\n                p: 1.5,\n                ease: Power1.easeIn,\n                onUpdate: () => {\n                    this.updateTransitioning(progress.p);\n                },\n                onComplete: () => {\n                    this.mainBrain.orbitControls.maxDistance = 700;\n                    this.mainBrain.orbitControls.autoRotate = true;\n                    this.updateTransitioning(1.5);\n                },\n            });\n        } else {\n            const progress = { p: 1.0 };\n            TweenMax.fromTo(progress, 2.0, { p: 1.0 }, {\n                p: 0.5,\n                ease: Power1.easeIn,\n                onUpdate: () => {\n                    this.updateTransitioning(progress.p);\n                },\n            });\n        }\n    }\n}\n\nexport default ParticleSystem;\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/services/particlesSystem.js","module.exports = \"#define GLSLIFY 1\\nuniform vec3 viewVector;\\nuniform float c;\\nuniform float p;\\nuniform float uTime;\\nuniform float uSlowTime;\\nuniform float uBubblesUp;\\nuniform bool uIsFlashing;\\nuniform vec2 uMouse;\\nuniform bool isWinnerActive;\\nuniform float uWinnerSelected;\\nuniform float uWinnerAlpha;\\nvarying float intensity;\\nvarying vec4 vMemory;\\nattribute vec2 aDelayDuration;\\nattribute float size;\\nattribute vec4 aMemory;\\nattribute vec4 bubbles;\\nvarying float alpha;\\nvarying vec4 vBubbles;\\n\\n\\n\\nfloat easeExpoInOut(float p) {\\n    return ((p *= 2.0) < 1.0) ? 0.5 * pow(2.0, 10.0 * (p - 1.0)) : 0.5 * (2.0 - pow(2.0, -10.0 * (p - 1.0)));\\n}\\n\\nvoid main()\\n{\\n\\n\\tintensity = 0.9;\\n\\n    if(uIsFlashing){\\n\\n    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n    gl_PointSize = size * ( 300.0 / -mvPosition.z );\\n    float m = mod(size, sin(uSlowTime * 0.12 + size ));\\n\\n    alpha = step(0.5, abs(m));\\n    if(m > 0.5 && m < 0.7){\\n         gl_PointSize = 0.9 * size;\\n    }\\n    if(m > 0.8){\\n           gl_PointSize = 0.9 * size;\\n        }\\n\\n    gl_Position = projectionMatrix * mvPosition;\\n\\n    if(bubbles.w > 0.0 && bubbles.w < 2.0 && bubbles.x != 0.0 && bubbles.y != 0.0 ) {\\n        gl_PointSize = size + 15.0;\\n        alpha = clamp(abs(sin(uTime - bubbles.y)), 0.3, 1.0);\\n\\n        float tProgress = smoothstep(0.0, aDelayDuration.x, uBubblesUp);\\n        vec3 tranlated = mix(position, bubbles.xyz, tProgress);\\n        vec4 bPosition = modelViewMatrix * vec4( tranlated, 1.0 );\\n\\n        gl_PointSize = uBubblesUp * gl_PointSize;\\n        gl_Position +=  projectionMatrix * bPosition ;\\n        alpha = 5.0;\\n    }\\n\\n    if(bubbles.w == 2.0) {\\n           alpha = clamp(abs(sin(uTime - bubbles.y)), 0.3, 0.6);\\n           gl_PointSize = size + 60.0;\\n\\n           gl_PointSize = uBubblesUp * gl_PointSize;\\n           float normalized = clamp(uBubblesUp, 0.0, 2.0)* 2.0;\\n           vec3 tranlated = mix(position, bubbles.xyz, normalized);\\n           vec4 bPosition = modelViewMatrix * vec4( tranlated, 1.0 );\\n           gl_Position +=  projectionMatrix * bPosition ;\\n    }\\n      if(bubbles.w == 3.0) {\\n               alpha = clamp(abs(sin(uTime - bubbles.y)), 0.3, 1.0);\\n               gl_PointSize = size + 90.0;\\n\\n               gl_PointSize = uBubblesUp * gl_PointSize;\\n               float normalized = clamp(uBubblesUp, 0.0, 2.0)* 2.0;\\n               vec3 tranlated = mix(position, bubbles.xyz, normalized);\\n               vec4 bPosition = modelViewMatrix * vec4( tranlated, 1.0 );\\n               gl_Position +=  projectionMatrix * bPosition ;\\n        }\\n    vBubbles = bubbles;\\n\\n    }\\n\\n    //Show only the brain section activate and hide all blinking dots ecept memory bubbles\\n    if(aMemory.w == uWinnerSelected && isWinnerActive){\\n        vMemory = aMemory;\\n        intensity = 0.9;\\n    }else if(bubbles.w != 2.0  && bubbles.w != 3.0 && isWinnerActive ){\\n        alpha = mix(1.0, 0.0, uWinnerAlpha);\\n    }\\n\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/shaders/glow.vert\n// module id = tE7Q\n// module chunks = 1","/* eslint no-param-reassign: [\"error\", { \"props\": true, \"ignorePropertyModificationsFor\": [\"bubbles\"] }] */\nimport * as THREE from 'three';\nimport { Power1, TweenMax, Power2 } from 'gsap';\nimport _ from 'lodash';\nimport flashingV from '../shaders/flashing.vert';\nimport flashingF from '../shaders/flashing.frag';\nimport flashingCoordinates from '../data/flashingCoordinates.json';\n\nclass ThinkingAnimation {\n    constructor(mainBrain) {\n        this.mainBrain = mainBrain;\n        this.isFlashing = false;\n        this.memorySelected = mainBrain.memorySelected;\n        this.alphaAnimation = { v: 0.0 };\n        this.secuenceAnimation = 0;\n    }\n\n    initAnimation() {\n        const { scene, camera } = this.mainBrain;\n\n        const particles = 10;\n        const geometry = new THREE.BufferGeometry();\n        const sizes = [];\n        const positions = [];\n        const colors = [];\n        const delay = [];\n        const duration = 2.5;\n        const maxPointDelay = 1.5;\n\n        Object.keys(flashingCoordinates).forEach((memory, index) => {\n            const light = flashingCoordinates[memory];\n\n            positions.push(light.x, light.y, light.z);\n\n            sizes[index] = light.size;\n\n            delay[index * 2 + 0] = THREE.Math.randFloat(0.5, maxPointDelay);\n            delay[index * 2 + 1] = duration;\n        });\n\n        geometry.addAttribute(\n            'aDelayDuration',\n            new THREE.Float32BufferAttribute(delay, 2),\n        );\n        geometry.addAttribute(\n            'position',\n            new THREE.Float32BufferAttribute(positions, 3),\n        );\n        geometry.addAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\n        geometry.addAttribute('size', new THREE.Float32BufferAttribute(sizes, 1));\n        geometry.computeBoundingSphere();\n        const customMaterial = new THREE.ShaderMaterial({\n            uniforms: {\n                c: { type: 'f', value: 0.9 },\n                p: { type: 'f', value: 2.8 },\n                glowColor: { type: 'c', value: new THREE.Color(0x2c3e93) },\n                viewVector: { type: 'v3', value: camera.position },\n                uTime: { type: 'f', value: 0.0 },\n                uFadeTime: { type: 'f', value: 0.0 },\n                uMouse: { type: 'f', value: new THREE.Vector2(0.0) },\n                isCustomAlpha: { type: 'b', value: false },\n                uAlpha: { type: 'float', value: 0.0 },\n                uResolution: {\n                    type: 'v2',\n                    value: new THREE.Vector2(window.innerWidth, window.innerHeight),\n                },\n            },\n            vertexShader: flashingV,\n            fragmentShader: flashingF,\n            vertexColors: THREE.VertexColors,\n            blending: THREE.AdditiveBlending,\n            side: THREE.DoubleSide,\n            depthTest: false,\n            transparent: true,\n        });\n        this.flashing = new THREE.Points(geometry, customMaterial);\n        this.flashing.name = 'flashing';\n        scene.add(this.flashing);\n    }\n\n    animationCamera(val) {\n        this.mainBrain.isRecording = false;\n        // this.isActive(true);\n        this.flashing.material.uniforms.uFadeTime.value = 1;\n        this.isFlashing = true;\n\n        if (this.alphaAnimation.v === 0.0) {\n            TweenMax.fromTo(\n                this.alphaAnimation,\n                2.5,\n                { v: 0.0 },\n                {\n                    v: 1.0,\n                    ease: Power1.easeInOut,\n                    onStart: () => {\n                        this.selectMemoryThinking(val);\n                    },\n                    onUpdate: () => {\n                        this.flashing.material.uniforms.uAlpha.value = this.alphaAnimation.v;\n                    },\n                },\n            );\n        } else {\n            TweenMax.fromTo(\n                this.alphaAnimation,\n                1.0,\n                { v: 1.0 },\n                {\n                    v: 0.0,\n                    ease: Power1.easeInOut,\n                    onUpdate: () => {\n                        this.flashing.material.uniforms.uAlpha.value = this.alphaAnimation.v;\n                    },\n                    onComplete: () => {\n                        this.thinkingFadeIn(val);\n                    },\n                },\n            );\n        }\n\n        this.flashing.geometry.setDrawRange(0, 1);\n    }\n\n    selectMemoryThinking(val) {\n        const lights = Object.keys(flashingCoordinates);\n        const light = lights[Math.floor(val)];\n\n        const locations = flashingCoordinates[light];\n        if (!locations) {\n            return;\n        }\n\n        const positions = this.flashing.geometry.attributes.position.array;\n\n        for (let i = 0; i < positions.length; i += 1) {\n            positions[i * 3] = locations.x;\n            positions[i * 3 + 1] = locations.y;\n            positions[i * 3 + 2] = locations.z;\n        }\n\n        this.flashing.material.uniforms.isCustomAlpha.value = true;\n\n        const { camera } = this.mainBrain;\n\n        const cameraPos = {\n            x: camera.position.x,\n            y: camera.position.y,\n            z: camera.position.z,\n        };\n\n        TweenMax.fromTo(\n            cameraPos,\n            1.5,\n            { x: cameraPos.x, y: cameraPos.y, z: cameraPos.z },\n            {\n                x: locations.camera.x,\n                y: locations.camera.y,\n                z: locations.camera.z,\n                ease: Power1.easeInOut,\n                onUpdate: () => {\n                    camera.position.x = cameraPos.x;\n                    camera.position.y = cameraPos.y;\n                    camera.position.z = cameraPos.z;\n                },\n                onComplete: () => {\n                    this.secuenceAnimation += 1;\n                    this.animationCamera(this.secuenceAnimation);\n                },\n            },\n        );\n    }\n\n    thinkingFadeIn(val) {\n        TweenMax.fromTo(\n            this.alphaAnimation,\n            2.5,\n            { v: 0.0 },\n            {\n                v: 1.0,\n                ease: Power1.easeInOut,\n                onUpdate: () => {\n                    this.flashing.material.uniforms.uAlpha.value = this.alphaAnimation.v;\n                },\n                onStart: () => {\n                    this.selectMemoryThinking(val);\n                },\n            },\n        );\n    }\n\n    updateSubSystem(subsystemPayload) {\n        this.bubbles.geometry.attributes.bubbles.needsUpdate = false;\n        const cameraPos = this.mainBrain.camera.position;\n        const { target } = this.mainBrain.orbitControls;\n        const bubblesAttr = this.bubbles.geometry.attributes.bubbles.array;\n        const progress = { p: 1.0 };\n\n        this.mainBrain.font.removeText();\n        TweenMax.fromTo(\n            progress,\n            2.5,\n            { p: 1.0 },\n            {\n                p: 0.0,\n                ease: Power1.easeInOut,\n                onUpdate: () => {\n                    this.updateBurbleUp(progress.p);\n                    this.mainBrain.orbitControls.target.set(\n                        target.x,\n                        target.y - progress.p,\n                        target.z,\n                    );\n                    this.mainBrain.camera.position.set(\n                        cameraPos.x,\n                        cameraPos.y - progress.p,\n                        cameraPos.z,\n                    );\n                },\n                onComplete: () => {\n                    this.getBubblesSelected(bubblesAttr, subsystemPayload);\n                    this.flashing.geometry.attributes.flashing.needsUpdate = true;\n                    this.animate(true);\n                },\n            },\n        );\n    }\n\n    update(camera, delta) {\n        this.flashing.material.uniforms.viewVector.value = new THREE.Vector3().subVectors(\n            camera.position,\n            this.flashing.position,\n        );\n        this.flashing.material.uniforms.uTime.value = delta;\n    }\n    isActive(val) {\n        if (val) {\n            const progress = { p: 0.0 };\n            TweenMax.fromTo(\n                progress,\n                2.5,\n                { p: 0.0 },\n                {\n                    p: 1.0,\n                    ease: Power1.easeInOut,\n                    onUpdate: () => {\n                        this.flashing.material.uniforms.uFadeTime.value = progress.p;\n                        this.isFlashing = true;\n                    },\n                },\n            );\n        } else {\n            const progress = { p: 1.0 };\n            TweenMax.fromTo(\n                progress,\n                2.5,\n                { p: 1.0 },\n                {\n                    p: 0.0,\n                    ease: Power1.easeInOut,\n                    onUpdate: () => {\n                        this.flashing.material.uniforms.uFadeTime.value = progress.p;\n                        this.isFlashing = false;\n                    },\n                },\n            );\n        }\n    }\n    updateMouse(coordinates) {\n        this.flashing.material.uniforms.uMouse.value = coordinates;\n    }\n\n    flashingAnimation(isActive) {\n        this.flashing.material.uniforms.uIsFlashing.value = isActive;\n\n        if (isActive) {\n            const progress = { p: 0.0 };\n            TweenMax.fromTo(\n                progress,\n                2.5,\n                { p: 0.0 },\n                {\n                    p: 1.0,\n                    ease: Power1.easeInOut,\n                    onUpdate: (value) => {\n                        this.flashing.material.uniforms.uFlashingAlpha.value = progress.p;\n                        this.isFlashing = true;\n                    },\n                },\n            );\n        } else {\n            const progress = { p: 1.0 };\n            TweenMax.fromTo(\n                progress,\n                2.5,\n                { p: 1.0 },\n                {\n                    p: 0.0,\n                    ease: Power1.easeInOut,\n                    onUpdate: (value) => {\n                        this.flashing.material.uniforms.uFlashingAlpha.value = progress.p;\n                        this.isFlashing = false;\n                    },\n                },\n            );\n        }\n    }\n\n    animate(isActive) {\n        const cameraPos = this.mainBrain.camera.position;\n        const { target } = this.mainBrain.orbitControls;\n        if (!this.isFlashing) {\n            this.flashingAnimation(true);\n        }\n        if (isActive) {\n            const progress = { p: 0.0 };\n            TweenMax.fromTo(\n                progress,\n                2.5,\n                { p: 0.0 },\n                {\n                    p: 1.0,\n                    ease: Power1.easeInOut,\n                    onUpdate: () => {\n                        this.updateBurbleUp(progress.p);\n                        this.mainBrain.orbitControls.target.set(\n                            target.x,\n                            target.y + progress.p,\n                            target.z,\n                        );\n                        this.mainBrain.camera.position.set(\n                            cameraPos.x,\n                            cameraPos.y + progress.p,\n                            cameraPos.z,\n                        );\n                    },\n                },\n            );\n        } else {\n            const progress = { p: 1.0 };\n            TweenMax.fromTo(\n                progress,\n                2.5,\n                { p: 1.0 },\n                {\n                    p: 0.0,\n                    ease: Power1.easeInOut,\n                    onUpdate: () => {\n                        this.updateBurbleUp(progress.p);\n                        this.mainBrain.orbitControls.target.set(\n                            target.x,\n                            target.y - progress.p,\n                            target.z,\n                        );\n                        this.mainBrain.camera.position.set(\n                            cameraPos.x,\n                            cameraPos.y - progress.p,\n                            cameraPos.z,\n                        );\n                    },\n                },\n            );\n        }\n    }\n}\n\nexport default ThinkingAnimation;\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/services/thinkingAnimation.js"],"sourceRoot":""}