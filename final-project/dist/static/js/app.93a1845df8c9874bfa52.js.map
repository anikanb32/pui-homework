{"version":3,"sources":["webpack:///./src/js/data/memories.json","webpack:///./src/js/shaders/glow.frag","webpack:///./src/js/services/chunks.js","webpack:///./src/js/shaders/flashing.frag","webpack:///./src/js/views/AbstractApplication.js","webpack:///./src/js/shaders/flashing.vert","webpack:///./src/js/shaders/xRay.frag","webpack:///./src/js/chunks/noise.raw.xml","webpack:///./src/js/MainBrain.js","webpack:///./src/js/services/bubblesAnimation.js","webpack:///./src/js/data/memoryMaping.json","webpack:///./src/js/chunks/random.raw.xml","webpack:///./src/js/data/testPayload.json","webpack:///./src/js/shaders/xRay.vert","webpack:///./src/app.js","webpack:///./src/js/data/flashingCoordinates.json","webpack:///./src/js/chunks/rotate.raw.xml","webpack:///./src/js/Loaders/Loaders.js","webpack:///./src/js/services/font.js","webpack:///./src/js/services/particlesSystem.js","webpack:///./src/js/shaders/glow.vert","webpack:///./src/js/services/thinkingAnimation.js"],"names":["module","exports","affective","analytic","process","semantic","episodic","cerebellum","bridge","amygdala","lines","__webpack_require__","noise","random","rotate","THREE","_postprocessing","AbstractApplication","_classCallCheck3","default","this","a_camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","a_scene","Scene","background","Color","a_blurScene","a_bloomScene","fog","Fog","a_renderer","WebGLRenderer","antialias","alpha","preserveDrawingBuffer","logarithmicDepthBuffer","setPixelRatio","devicePixelRatio","setSize","sortObjects","setClearColor","shadowMap","enabled","type","PCFSoftShadowMap","gammaInput","gammaOutput","shadowDepthMaterialSide","BackSide","composer","EffectComposer","stencilBuffer","depthTexture","renderPass","RenderPass","scene","camera","addPass","bloomPass","BloomPass","resolutionScale","resolution","intensity","distinction","blend","renderToScreen","blurMask","MaskPass","blurScene","renderPass2","document","body","appendChild","domElement","orbitControls","OrbitControls","enableDamping","dampingFactor","enableZoom","zoomSpeed","panSpeed","minDistance","maxDistance","autoRotate","autoRotateSpeed","rotateSpeed","screenSpacePanning","addEventListener","onWindowResize","bind","onMouseMove","aspect","updateProjectionMatrix","timestamp","requestAnimationFrame","animate","render","stats","_stats2","setMode","style","left","tip","e","_gsap","MainBrain","_this","_possibleConstructorReturn3","__proto__","_getPrototypeOf2","call","clock","Clock","addBrain","addFloor","addIllumination","deltaTime","particlesColor","particlesStartColor","loaders","_Loaders2","runAnimation","memories","_memories2","memorySelected","frame","frameName","isRecording","raycaster","Raycaster","mouse","Vector2","sectionMeshes","onMouseClick","_this2","redMaterial","MeshBasicMaterial","color","dotGeometry","SphereGeometry","redDots","x","y","name","description","forEach","pos","individualMaterial","clone","dot","Mesh","set","userData","add","push","event","setFromCamera","intersects","intersectObjects","length","clickedDot","object","selectedDot","material","displayText","infoBox","getElementById","innerHTML","display","geometry","PlaneBufferGeometry","MeshPhongMaterial","opacity","transparent","plane","receiveShadow","rotation","Math","PI","ambienlight","AmbientLight","spotLight","SpotLight","castShadow","shadow","LightShadow","bias","mapSize","width","height","spotLightHelper","SpotLightHelper","_this3","brainBufferGeometries","BRAIN_MODEL","traverse","child","LineSegments","_extends3","addLinesPath","verticesNeedUpdate","storeBrainVertices","endPointsCollections","BufferGeometryUtils","mergeBufferGeometries","brainMaterial","emissive","_this4","progress","p","TweenMax","fromTo","ease","Power4","easeInOut","onUpdate","onStart","particlesSystem","transform","onComplete","xRay","uniforms","c","value","startAutoDemo","_this5","memoryCount","memoryTimer","setTimeout","isXRayActive","setInterval","bubblesAnimation","updateSubSystem","clearInterval","addParticlesSystem","font","_font2","_bubblesAnimation2","initAnimation","thinkingAnimation","_thinkingAnimation2","particles","uProgress","addRedDots","update","getDelta","facingToCamera","flashing","attributes","needsUpdate","socket","emit","file","querySelector","toDataURL","clientX","clientY","_particlesSystem2","mesh","_keys2","map","l","includes","array","m","r","u","randFloat","v","theta","phi","acos","sin","cos","BubblesAnimation","mainBrain","isFlashing","isBubblesInserted","winner","winnerGroup","fistCameraReposition","bubbles","subsystem","bubbleList","console","log","subsystemResults","memoryGroup","getSubsystemGroup","memory","randomPos","randInt","parent","MeshNormalMaterial","group","Object3D","memoryPos","i","w","status","_loop","Power1","uWinnerAlpha","uWinnerSelected","isWinnerActive","_mainBrain","BufferGeometry","sizes","positions","delay","mSelector","altitude","addAttribute","Float32BufferAttribute","computeBoundingSphere","customMaterial","ShaderMaterial","glowColor","viewVector","uTime","uSlowTime","uBubblesUp","uIsFlashing","uFlashingAlpha","uMouse","vertexShader","fragmentShader","flatShading","SmoothShading","blending","AdditiveBlending","side","DoubleSide","depthTest","vertexColors","Points","subsystemPayload","payload","processSubsystemResponses","isActive","target","bubblesAttr","removeText","updateBurbleUp","getBubblesSelected","Vector3","subVectors","val","coordinates","cameraPos","flashingAnimation","memoryNumber","arguments","undefined","response","floor","_testPayload2","winningSubsystem","_lodash2","head","filter","_memoryMaping2","id","has","messageId","conversationId","inResponseToMessageId","sourceSessionId","sourceClass","messageText","inboundText","preProcessors","time","processor","initialContext","dialogState","contextId","preferredResponder","result","responses","finalContext","fromUserDisplayName","secureResponse","messageType","translated","voice","_MainBrain","size","semanticRight","analityc","afective","semanticLeft","Loaders","startAnimation","brainXRayLight","FONT","assets","_map2","models","loadingManager","LoadingManager","onLoad","handlerLoad","onProgress","handlerProgress","onError","handlerError","handlerStart","setModel","loadBrainTextures","loadOBJs","loadTextures","loadFont","loadSceneBackground","model","XRAY_MODEL","loader","OBJLoader","load","TextureLoader","t","spark","path","urls","CubeTextureLoader","textureCube","FontLoader","url","itemsLoaded","itemsTotal","Font","_message","_parentObject","_position","message","parentObject","Group","textMaterial","wireframe","textShapes","generateShapes","text3d","ShapeGeometry","computeBoundingBox","text","centerOffset","boundingBox","max","TweenLite","to","Power2","easeOut","parentGroup","obj","remove","lookAt","BAS","ParticleSystem","brainParticles","chuncks","_chunks2","_init","init","xRayEffect","systemPoints","brainPoints","count","me","PointBufferGeometry","loadingCircle","getLoadingPoints","createAttribute","data","index","num","startVec3","toArray","_me$particlesStartCol","g","b","setRGB","_me$particlesStartCol2","totalDuration","duration","PointsAnimationMaterial","VertexColors","deptWrite","uAngle","uPointSizeEffect","uColor","defines","uniformValues","scale","vertexFunctions","ShaderChunk","ease_expo_in_out","quaternion_rotation","vertexParameters","varyingParameters","vertexInit","vertexPosition","vertexColor","fragmentParameters","fragmentShape","xRayMaterial","lightningTexture","offsetY","depthWrite","error","xRayGeometry","Geometry","fromBufferGeometry","computeFaceNormals","mergeVertices","computeVertexNormals","frustumCulled","customDistanceMaterial","Utils","createDistanceAnimationMaterial","customDepthMaterial","brain","easeIn","updateTransitioning","RingBufferGeometry","ThinkingAnimation","alphaAnimation","secuenceAnimation","_flashingCoordinates2","light","uFadeTime","isCustomAlpha","uAlpha","uResolution","selectMemoryThinking","thinkingFadeIn","setDrawRange","locations","animationCamera","delta","_this6","_this7"],"mappings":"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","file":"static/js/app.93a1845df8c9874bfa52.js","sourcesContent":["module.exports = {\"affective\":[],\"analytic\":[],\"process\":[],\"semantic\":[],\"episodic\":[],\"cerebellum\":[],\"bridge\":[],\"amygdala\":[],\"lines\":{\"affective\":[],\"analytic\":[],\"process\":[],\"semantic\":[],\"episodic\":[]}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/data/memories.json\n// module id = 2J3f\n// module chunks = 1","module.exports = \"#define GLSLIFY 1\\nuniform vec3 glowColor;\\nvarying float intensity;\\nvarying float alpha;\\nuniform float uFlashingAlpha;\\nuniform bool uIsFlashing;\\nvarying vec4 vBubbles;\\nvarying vec4 vMemory;\\nuniform bool isWinnerActive;\\nuniform float uWinnerSelected;\\nvoid main()\\n{\\n\\n        float distanceToCenter = distance(gl_PointCoord, vec2(0.5));\\n        float pct = 1.0 - smoothstep(0.0, 0.5, distanceToCenter);\\n        vec3 color = vec3(1.0) * gl_FragColor.rgb;\\n\\n        vec3 glow = glowColor * intensity;\\n        if(vBubbles.w == 3.0){ //Winner Bubble\\n            // glow = vec3(0.0,0.9,0.0) * intensity;\\n        }\\n\\n        if(alpha == 5.0) {\\n            //discard;\\n        }\\n\\n        gl_FragColor = vec4(glow, clamp(alpha, 0.0, 1.0));\\n        gl_FragColor = vec4(glow, pct * gl_FragColor.a);\\n\\n        if(uIsFlashing){\\n             gl_FragColor = vec4(glow, pct * gl_FragColor.a * uFlashingAlpha);\\n        }\\n\\n        //Show only the brain section activate\\n        if(vMemory.w == uWinnerSelected && isWinnerActive){\\n            gl_FragColor += vec4(glow,pct * gl_FragColor.a);\\n        }\\n\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/shaders/glow.frag\n// module id = 6KJG\n// module chunks = 1","import noise from '../chunks/noise.raw.xml';\nimport random from '../chunks/random.raw.xml';\nimport rotate from '../chunks/rotate.raw.xml';\n\nexport default () => ({\n    noise,\n    random,\n    rotate,\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/services/chunks.js","module.exports = \"#define GLSLIFY 1\\nuniform vec3 glowColor;\\nuniform float uFadeTime;\\nvarying float intensity;\\nvarying float alpha;\\n\\nvoid main()\\n{\\n\\n float distanceToCenter = distance(gl_PointCoord, vec2(0.5));\\n        float pct = 1.0 - smoothstep(0.0, 0.5, distanceToCenter);\\n        vec3 color = vec3(1.0) * gl_FragColor.rgb;\\n\\n        vec3 glow = glowColor * intensity;\\n\\n        gl_FragColor = vec4(glow, clamp(alpha, 0.0, uFadeTime));\\n\\n        gl_FragColor = vec4(glow, pct * gl_FragColor.a);\\n\\n\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/shaders/flashing.frag\n// module id = 736u\n// module chunks = 1","import * as THREE from \"three\";\nimport io from \"socket.io-client\";\nimport \"three/examples/js/controls/OrbitControls\";\nimport \"three/examples/js/modifiers/BufferSubdivisionModifier\";\nimport Stats from \"three/examples/js/libs/stats.min\";\nimport {\n  EffectComposer,\n  RenderPass,\n  BloomPass,\n  MaskPass,\n} from \"postprocessing\";\n\nclass AbstractApplication {\n  constructor() {\n    this.a_camera = new THREE.PerspectiveCamera(\n      50,\n      window.innerWidth / window.innerHeight,\n      1,\n      1000\n    );\n    this.a_camera.position.z = 1000;\n\n    this.a_scene = new THREE.Scene();\n    this.a_scene.background = new THREE.Color(\"#a7b6d2\");\n\n    this.a_blurScene = new THREE.Scene();\n    this.a_bloomScene = new THREE.Scene();\n\n    this.a_scene.fog = new THREE.Fog(0xa7b6d2, 300, 1300);\n\n    this.a_renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true,\n      preserveDrawingBuffer: false,\n      logarithmicDepthBuffer: true,\n    });\n    this.a_renderer.setPixelRatio(window.devicePixelRatio);\n    this.a_renderer.setSize(window.innerWidth, window.innerHeight);\n    this.a_renderer.sortObjects = false;\n    this.a_renderer.setClearColor(0x00000, 0.0);\n\n    this.a_renderer.shadowMap.enabled = true;\n    this.a_renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    this.a_renderer.gammaInput = true;\n    this.a_renderer.gammaOutput = true;\n    this.a_renderer.shadowDepthMaterialSide = THREE.BackSide;\n\n    this.composer = new EffectComposer(this.a_renderer, {\n      stencilBuffer: true,\n      depthTexture: true,\n    });\n\n    // PASSES\n    this.renderPass = new RenderPass(this.scene, this.camera);\n    //this.renderPass.renderToScreen = true;\n    this.composer.addPass(this.renderPass);\n\n\n    this.bloomPass = new BloomPass({\n      resolutionScale: 0.7,\n      resolution: 2.9,\n      intensity: 2.3,\n      distinction: 9.0,\n      blend: true,\n    });\n\n    this.bloomPass.renderToScreen = true;\n    this.composer.addPass(this.bloomPass);\n\n    this.blurMask = new MaskPass(this.blurScene, this.camera);\n    this.renderPass2 = new RenderPass(this.blurScene, this.camera);\n\n    document.body.appendChild(this.a_renderer.domElement);\n\n    // this.stats = AbstractApplication.initStats(document.body);\n\n    this.orbitControls = new THREE.OrbitControls(\n      this.camera,\n      this.a_renderer.domElement\n    );\n    this.orbitControls.enableDamping = true;\n    this.orbitControls.dampingFactor = 0.25;\n    this.orbitControls.enableZoom = true;\n    this.orbitControls.zoomSpeed = 0.1;\n    this.orbitControls.panSpeed = 0.1;\n    this.orbitControls.minDistance = 50;\n    this.orbitControls.maxDistance = 2500;\n    this.orbitControls.autoRotate = false;\n    this.orbitControls.autoRotateSpeed = 1.0;\n    this.orbitControls.rotateSpeed = 0.1;\n    this.orbitControls.screenSpacePanning = true;\n\n    window.addEventListener(\"resize\", this.onWindowResize.bind(this), false);\n    window.addEventListener(\"mousemove\", this.onMouseMove.bind(this), false);\n  }\n\n  get renderer() {\n    return this.a_renderer;\n  }\n\n  get camera() {\n    return this.a_camera;\n  }\n\n  get scene() {\n    return this.a_scene;\n  }\n\n  get blurScene() {\n    return this.a_blurScene;\n  }\n  get bloomScene() {\n    return this.a_bloomScene;\n  }\n\n  static initStats(render) {\n    const stats = new Stats();\n    stats.setMode(0);\n    stats.domElement.style.position = \"absolute\";\n    stats.domElement.style.left = \"0px\";\n    stats.domElement.style.tip = \"0px\";\n    render.appendChild(stats.domElement);\n    return stats;\n  }\n\n  static onMouseMove(e) {}\n  onWindowResize() {\n    this.a_camera.aspect = window.innerWidth / window.innerHeight;\n    this.a_camera.updateProjectionMatrix();\n\n    this.a_renderer.setSize(window.innerWidth, window.innerHeight);\n  }\n\n  animate(timestamp) {\n    requestAnimationFrame(this.animate.bind(this));\n    this.a_renderer.render(this.a_scene, this.a_camera);\n  }\n}\n\nexport default AbstractApplication;\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/views/AbstractApplication.js","module.exports = \"#define GLSLIFY 1\\nuniform vec3 viewVector;\\nuniform float c;\\nuniform float p;\\nuniform float uTime;\\nuniform vec2 uMouse;\\nuniform float uFadeTime;\\nattribute vec2 aDelayDuration;\\nattribute float size;\\nvarying float intensity;\\nvarying float alpha;\\nuniform float uAlpha;\\nuniform bool isCustomAlpha;\\n\\nvoid main()\\n{\\n    if(uFadeTime > 0.00001){\\n\\n    vec3 vNormal = normalize( normalMatrix * normal );\\n\\tvec3 vNormel = normalize( normalMatrix * viewVector );\\n\\tintensity = pow( c - dot(vNormal, vNormel), p );\\n\\n    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n    gl_PointSize = size * ( 300.0 / -mvPosition.z );\\n\\n    float m = mod(size, sin( uTime * 10.0 + (position.x + position.y) / 100.0));\\n\\n        if(m > 0.5 && m < 0.7){\\n          alpha = clamp(abs(sin(uTime * 10.0)), 0.2, 0.5);\\n        }\\n        if(m > 0.8){\\n          alpha = clamp(abs(sin(uTime * 10.0)), 0.2, 0.5);\\n        }\\n\\n        if(m > 0.0 && m < 0.5){\\n          alpha = clamp(abs(sin(uTime * 10.0)), 0.2, 0.7);\\n        }\\n\\n\\n        //static ligthning\\n        if( isCustomAlpha ) {\\n            alpha = uAlpha;\\n        }\\n\\n\\n    gl_PointSize = 9.5 * size;\\n\\n    gl_Position += projectionMatrix * mvPosition;\\n\\n   }\\n\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/shaders/flashing.vert\n// module id = AvWz\n// module chunks = 1","module.exports = \"#define GLSLIFY 1\\nuniform vec3 glowColor;\\nuniform sampler2D lightningTexture;\\nvarying float intensity;\\nvarying vec2 vUv;\\nuniform float offsetY;\\nuniform float uTime;\\n\\nvoid main(){\\n    vec2 uv = vUv;\\n    uv.y += offsetY;\\n\\n  \\tvec3 glow = glowColor * intensity;\\n    vec3 color = vec3(step(0.1, uv.y) - step(0.2, uv.y)) - vec3(texture2D(lightningTexture, uv));\\n\\n\\tfloat alpha = clamp(cos(uTime* 3.0) , 0.5, 1.0);\\n\\n    gl_FragColor = vec4( glow + color, alpha);\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/shaders/xRay.frag\n// module id = EYp+\n// module chunks = 1","module.exports = \"float noise (in vec2 st) {\\n    vec2 i = floor(st);\\n    vec2 f = fract(st);\\n\\n    // Four corners in 2D of a tile\\n    float a = random(i);\\n    float b = random(i + vec2(1.0, 0.0));\\n    float c = random(i + vec2(0.0, 1.0));\\n    float d = random(i + vec2(1.0, 1.0));\\n\\n    // Smooth Interpolation\\n\\n    // Cubic Hermine Curve.  Same as SmoothStep()\\n    vec2 u = f*f*(3.0-2.0*f);\\n    // u = smoothstep(0.,1.,f);\\n\\n    // Mix 4 coorners porcentages\\n    return mix(a, b, u.x) +\\n        (c - a)* u.y * (1.0 - u.x) +\\n        (d - b) * u.x * u.y;\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/chunks/noise.raw.xml\n// module id = FAD+\n// module chunks = 1","/* eslint no-param-reassign: [\"error\", { \"props\": true, \"ignorePropertyModificationsFor\": [\"child\", memories] }] */\nimport * as THREE from \"three\";\nimport { Power4, TweenMax } from \"gsap\";\nimport \"three/examples/js/BufferGeometryUtils\";\nimport AbstractApplication from \"./views/AbstractApplication\";\nimport Loaders from \"./Loaders/Loaders\";\nimport BubblesAnimation from \"./services/bubblesAnimation\";\nimport ThinkingAnimation from \"./services/thinkingAnimation\";\n// import GUI from \"./services/gui\";\nimport Font from \"./services/font\";\nimport ParticleSystem from \"./services/particlesSystem\";\nimport Memories from \"./data/memories.json\";\n\n/* eslint-disable arrow-parens */\n\nclass MainBrain extends AbstractApplication {\n  constructor() {\n    super();\n\n    this.clock = new THREE.Clock();\n    this.addBrain = this.addBrain.bind(this);\n    this.addFloor();\n    this.addIllumination();\n\n    this.deltaTime = 0;\n    this.particlesColor = new THREE.Color(0x000000);\n    this.particlesStartColor = new THREE.Color(0x000000);\n    this.loaders = new Loaders(this.runAnimation.bind(this));\n    this.memories = Memories;\n    this.memorySelected = [\n      \"analytic\",\n      \"episodic\",\n      \"process\",\n      \"semantic\",\n      \"affective\",\n    ];\n    this.frame = 0;\n    this.frameName = 0;\n    this.isRecording = false;\n    // setTimeout(() => {\n    //   this.startIntro();\n    // }, 1000);\n    this.raycaster = new THREE.Raycaster();\n    this.mouse = new THREE.Vector2();\n    this.sectionMeshes = [];\n    document.addEventListener('mousedown', this.onMouseClick.bind(this), false);\n  }\n  addRedDots() {\n    const redMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 });\n    const dotGeometry = new THREE.SphereGeometry(5, 32, 32);\n    this.redDots = [];\n\n    // Example positions (adjust to fit your brain model)\n    const positions = [\n        {\n          x: -30, y: -70, z: -80, name: \"Cerebellum\", description: \"Controls muscles involving balance and movement. It can also control reward and social preference behavior.\"\n        },\n        {\n          x: -30, y: 30, z: -40, name: \"Thalamus\", description: \"Helps with sensory relay for all visual, auditory, gustatory, and somatosensory systems.\"\n        },\n        {\n          x: 30, y: -20, z: 20, name: \"Amygdala\", description: \"Plays an important role in processing emotions, including anger, fear, and anxiety.\"\n        },\n        {\n          x: -30, y: -100, z: 0, name: \"Brain Stem\", description: \"Connects the brain to the spinal cord and helps with balance and coordination.\"\n        },\n        {\n          x: 80, y: 50, z: 0, name: \"Frontal Lobe\", description: \"Helps control voluntary movement and cognition. This includes thinking, organizing, problem-solving, and memory.\"\n        },\n        {\n          x: -5, y: -40, z: 0, name: \"Pons\", description: \"Part of brain stem that handles unconscious processes - for example the sleep-wake cycle or breathing.\"\n        },\n        {\n          x: -5, y: -0, z: 0, name: \"Basal Ganglia\", description: \"Functions that are associated with reward and cognition as well as motor control - deciding actions.\"\n        },\n        {\n          x: -110, y: -0, z: 0, name: \"Occipital Lobe\", description: \"Helps decode visual signals from the retina (the eye) and helps with processes like recognition and language.\"\n        },\n        {\n          x: -5, y: 55, z: 0, name: \"Corpus Callosum\", description: \"Bundle of nerve fibers that connect the right and left hemispheres and send signals.\"\n        },\n        {\n          x: -50, y: 80, z: 0, name: \"Parietal Lobe\", description: \"Processes sensory information and spatial cognition. It can also affect encoding of memory.\"\n        },\n        {\n          x: 30, y: -45, z: 60, name: \"Temporal Lobe\", description: \"Houses memories, emotions, and language comprehension. It helps with location, people, and object recognition.\"\n        }\n    ];\n\n    positions.forEach((pos) => {\n        // Clone the material so each dot has its own material instance\n        const individualMaterial = redMaterial.clone();\n        const dot = new THREE.Mesh(dotGeometry, individualMaterial);\n        dot.position.set(pos.x, pos.y, pos.z);\n        dot.userData = { name: pos.name, description: pos.description };\n        this.scene.add(dot);\n        this.redDots.push(dot);\n    });\n}\n\n  onMouseClick(event) {\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n\n    // Check for intersections with red dots\n    const intersects = this.raycaster.intersectObjects(this.redDots);\n\n    if (intersects.length > 0) {\n        const clickedDot = intersects[0].object;\n\n        // If there's a previously selected dot, reset its color\n        if (this.selectedDot && this.selectedDot !== clickedDot) {\n            this.selectedDot.material.color.set(0xff0000); // Reset to original red\n        }\n\n        // Update the clicked dot color only if it is not already selected\n        if (this.selectedDot !== clickedDot) {\n            clickedDot.material.color.set(0xFFFFFF); // Darker red for selected dot\n            this.selectedDot = clickedDot; // Update the selected dot\n        } else {\n            // If the clicked dot is already selected, deselect it\n            this.selectedDot = null;\n        }\n\n        // Display the tooltip or description\n        this.displayText(clickedDot.userData.name, clickedDot.userData.description);\n    }\n}\n\n\n  displayText(name, description) {\n    const infoBox = document.getElementById('info-box');\n    if (infoBox) {\n        infoBox.innerHTML = `<h3>${name}</h3><p>${description}</p>`;\n        infoBox.style.display = 'block';\n    }\n  }\n  hideText() {\n    const infoBox = document.getElementById('info-box');\n    if (infoBox) {\n        infoBox.style.display = 'none';\n    }\n}\n\n  addFloor() {\n    const geometry = new THREE.PlaneBufferGeometry(20000, 20000);\n    const material = new THREE.MeshPhongMaterial({\n      opacity: 0.1,\n      transparent: true,\n      color: 0x000000\n    });\n    this.plane = new THREE.Mesh(geometry, material);\n    this.plane.receiveShadow = true;\n    this.plane.position.y = -160;\n    this.plane.rotation.x = -0.5 * Math.PI;\n    this.scene.add(this.plane);\n  }\n  addIllumination() {\n    this.ambienlight = new THREE.AmbientLight(0xb8c5cf, 0);\n    this.scene.add(this.ambienlight);\n\n    this.spotLight = new THREE.SpotLight(\n      0xb8c5cf,\n      1.45,\n      175,\n      Math.PI / 2,\n      0.0,\n      0.0\n    );\n    this.spotLight.position.set(0, 500, -10);\n    this.spotLight.castShadow = true;\n\n    this.spotLight.castShadow = true;\n    this.spotLight.shadow = new THREE.LightShadow(\n      new THREE.PerspectiveCamera(\n        54,\n        window.innerWidth / window.innerHeight,\n        1,\n        2000\n      )\n    );\n    this.spotLight.shadow.bias = -0.000222;\n    this.spotLight.shadow.mapSize.width = 1024;\n    this.spotLight.shadow.mapSize.height = 1024;\n\n    this.scene.add(this.spotLight);\n    this.spotLightHelper = new THREE.SpotLightHelper(this.spotLight);\n  }\n\n  addBrain() {\n    this.brainBufferGeometries = [];\n\n    this.loaders.BRAIN_MODEL.traverse((child) => {\n      if (child instanceof THREE.LineSegments) {\n        this.memories.lines = {\n          ...this.memories.lines,\n          ...MainBrain.addLinesPath(child, this.memories),\n        };\n      }\n      if (!(child instanceof THREE.Mesh)) {\n        return;\n      }\n      child.geometry.verticesNeedUpdate = true;\n      // child.material.map = this.loaders.lightTexture;\n      this.brainBufferGeometries.push(child.geometry);\n\n      this.memories = {\n        ...this.memories,\n        ...MainBrain.storeBrainVertices(child, this.memories),\n      };\n    });\n\n    this.endPointsCollections = THREE.BufferGeometryUtils.mergeBufferGeometries(\n      this.brainBufferGeometries\n    );\n    this.endPointsCollections = THREE.BufferGeometryUtils.mergeBufferGeometries(\n      this.brainBufferGeometries\n  );\n  const brainMaterial = new THREE.MeshPhongMaterial({\n      color: 0x666666, // Adjust color if needed\n      emissive: 0x111111,\n  });\n  const brainMesh = new THREE.Mesh(this.endPointsCollections, brainMaterial);\n  // this.scene.add(brainMesh);\n  }\n\n  startIntro() {\n    const progress = { p: 1000 };\n    TweenMax.fromTo(\n      progress,\n      6.5,\n      { p: 1000 },\n      {\n        p: 380,\n        ease: Power4.easeInOut,\n        onUpdate: () => {\n          this.camera.position.z = progress.p;\n          this.camera.position.set(0, 50, 200); // Adjust x, y, z as needed for your scene\n        },\n        onStart: () => {\n          this.particlesSystem.transform(true);\n        },\n        onComplete: () => {\n          //hide xray\n          this.particlesSystem.xRay.material.uniforms.c.value = 1.0;\n          this.startAutoDemo();\n        }\n      }\n    );\n  }\n\n  startAutoDemo() {\n    let memoryCount = 1;\n    this.scene.add(this.particlesSystem.xRay);\n    let memoryTimer;\n    const me = this;\n    setTimeout(() => {\n      //enable xRay Animation\n      this.particlesSystem.isXRayActive(true);\n      setTimeout(() => {\n        //remove animation\n        this.particlesSystem.isXRayActive(false);\n        //Enable Memories\n        memoryTimer = setInterval(() => {\n          if (memoryCount < 5) {\n            this.bubblesAnimation.updateSubSystem(memoryCount);\n            memoryCount += 1;\n          } else {\n            this.bubblesAnimation.updateSubSystem(0);\n            clearInterval(memoryTimer);\n          }\n        }, 9000);\n      }, 4000);\n    }, 2000);\n  }\n  // showTooltip(name, x, y) {\n  //   const tooltip = document.getElementById('tooltip');\n  //   if (tooltip) {\n  //     tooltip.style.left = (x + 10) + 'px'; // offset a bit so it's not directly under the cursor\n  //     tooltip.style.top = (y + 10) + 'px';\n  //     tooltip.innerHTML = name;\n  //     tooltip.style.display = 'block';\n  //   }\n  // }\n  // hideTooltip() {\n  //   const tooltip = document.getElementById('tooltip');\n  //   if (tooltip) {\n  //     tooltip.style.display = 'none';\n  //   }\n  // }\n\n  static addLinesPath(mesh, memories) {\n    const keys = Object.keys(memories.lines);\n    keys.map((l) => {\n      if (mesh.name.includes(l)) {\n        memories.lines[l] = mesh.geometry.attributes.position.array;\n        return memories.lines;\n      }\n      return [];\n    });\n  }\n\n  static storeBrainVertices(mesh, memories) {\n    const keys = Object.keys(memories);\n\n    keys.map((m) => {\n      if (mesh.name.includes(m)) {\n        if (memories[m].length) {\n          memories[m].push(mesh.geometry);\n          memories[m] = [\n            THREE.BufferGeometryUtils.mergeBufferGeometries(memories[m]),\n          ];\n          return memories;\n        }\n        return memories[m].push(mesh.geometry);\n      }\n      return [];\n    });\n  }\n\n  runAnimation() {\n    // this.gui = new GUI(this);\n    this.addBrain();\n    this.addParticlesSystem();\n    this.font = new Font(this.loaders, this.scene);\n    this.bubblesAnimation = new BubblesAnimation(this);\n    this.bubblesAnimation.initAnimation();\n\n    this.thinkingAnimation = new ThinkingAnimation(this);\n    this.thinkingAnimation.initAnimation();\n\n    // Set Background\n    // this.scene.background = this.loaders.assets.get('sky');\n    this.scene.background = new THREE.Color(0x000000); // Change to black\n\n    // this.particlesSystem.transform(false); // Initialize particles system in final state\n    this.particlesSystem.xRay.material.uniforms.c.value = 1.0; // Ensure x-ray is not active\n    this.particlesSystem.particles.material.uniforms.uProgress.value = 1.0;\n    this.camera.position.set(20, 50, 400); // Adjust x, y, z as needed for your scene\n    // Example materials for hovering sections: nearly transparent, non-visible \"hit\" areas\n    this.addRedDots();\n    // const sectionMaterial = new THREE.MeshBasicMaterial({ color: 0x00ff00, opacity: 0.1, transparent: true, visible: false });\n\n    // // Create and position four sections\n    // const sectionGeometry = new THREE.BoxGeometry(50, 50, 50);\n\n    // // Frontal Lobe\n    // const frontalLobe = new THREE.Mesh(sectionGeometry, sectionMaterial);\n    // frontalLobe.name = \"Frontal Lobe\";\n    // frontalLobe.position.set(0, 20, 50); // adjust these coordinates to fit your brain model\n    // this.scene.add(frontalLobe);\n    // this.sectionMeshes.push(frontalLobe);\n\n    // // Parietal Lobe\n    // const parietalLobe = new THREE.Mesh(sectionGeometry, sectionMaterial);\n    // parietalLobe.name = \"Parietal Lobe\";\n    // parietalLobe.position.set(0, 30, 0); // adjust accordingly\n    // this.scene.add(parietalLobe);\n    // this.sectionMeshes.push(parietalLobe);\n\n    // // Temporal Lobe\n    // const temporalLobe = new THREE.Mesh(sectionGeometry, sectionMaterial);\n    // temporalLobe.name = \"Temporal Lobe\";\n    // temporalLobe.position.set(-30, 0, 0); // adjust accordingly\n    // this.scene.add(temporalLobe);\n    // this.sectionMeshes.push(temporalLobe);\n\n    // // Occipital Lobe\n    // const occipitalLobe = new THREE.Mesh(sectionGeometry, sectionMaterial);\n    // occipitalLobe.name = \"Occipital Lobe\";\n    // occipitalLobe.position.set(0, 0, -50); // adjust accordingly\n    // this.scene.add(occipitalLobe);\n    // this.sectionMeshes.push(occipitalLobe);\n    this.animate();\n  }\n  animate(timestamp) {\n    this.orbitControls.update();\n    // this.orbitControls.autoRotateSpeed = this.gui.controls.rotationSpeed;\n    this.orbitControls.autoRotateSpeed = 0.5; // or any fixed speed\n\n    this.deltaTime += this.clock.getDelta();\n\n    this.particlesSystem.update(\n      this.deltaTime,\n      this.camera,\n      this.particlesSystem.xRay\n    );\n    this.bubblesAnimation.update(this.camera, this.deltaTime);\n    this.thinkingAnimation.update(this.camera, this.deltaTime);\n\n    // this.stats.update();\n    requestAnimationFrame(this.animate.bind(this));\n\n    //this.renderer.render(this.a_scene, this.a_camera);\n\n    this.font.facingToCamera(this.camera);\n    this.camera.updateProjectionMatrix();\n\n    this.thinkingAnimation.flashing.geometry.verticesNeedUpdate = true;\n    this.thinkingAnimation.flashing.geometry.attributes.position.needsUpdate = true;\n\n    // composer\n    this.composer.render();\n\n    if (this.isRecording) {\n      if (this.frame > 10) {\n        this.socket.emit(\"render-frame\", {\n          frame: (this.frameName += 1),\n          file: document.querySelector(\"canvas\").toDataURL(),\n        });\n      }\n      this.frame += 1;\n    }\n  }\n  // onMouseMove(event) {\n  //   const y = window.innerHeight - event.clientY;\n  //   const x = window.innerHeight - event.clientX;\n  //   //  this.bubblesAnimation.updateMouse(new THREE.Vector2(x, y));\n  // }\n  onMouseMove(event) {\n    // Convert the mouse position to normalized device coordinates (-1 to +1)\n    this.mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n    this.mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n    // Update the raycaster\n    // this.raycaster.setFromCamera(this.mouse, this.camera);\n    // // Check intersections\n    // const intersects = this.raycaster.intersectObjects(this.sectionMeshes);\n    // if (intersects.length > 0) {\n    //   // If we have an intersection, the first one is the closest hit\n    //   const hoveredSection = intersects[0].object;\n    //   // Show the tooltip with the name of the section\n    //   this.showTooltip(hoveredSection.name, event.clientX, event.clientY);\n    // } else {\n    //   // No intersections, hide the tooltip\n    //   this.hideTooltip();\n  }\n  addParticlesSystem() {\n    this.particlesSystem = new ParticleSystem(\n      this,\n      this.endPointsCollections,\n      this.memories\n    );\n    this.scene.add(this.particlesSystem.particles);\n  }\n\n  static getRandomPointOnSphere(r) {\n    const u = THREE.Math.randFloat(0, 1);\n    const v = THREE.Math.randFloat(0, 1);\n    const theta = 2 * Math.PI * u;\n    const phi = Math.acos(2 * v - 1);\n    const x = r * Math.sin(theta) * Math.sin(phi);\n    const y = r * Math.cos(theta) * Math.sin(phi);\n    const z = r * Math.cos(phi);\n    return {\n      x,\n      y,\n      z,\n    };\n  }\n}\n\nexport default MainBrain;\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/MainBrain.js","/* eslint no-param-reassign: [\"error\", { \"props\": true, \"ignorePropertyModificationsFor\": [\"bubbles\"] }] */\nimport * as THREE from 'three';\nimport { Power1, TweenMax } from 'gsap';\nimport _ from 'lodash';\nimport glowVertex from '../shaders/glow.vert';\nimport glowFrag from '../shaders/glow.frag';\nimport memoryMapping from '../data/memoryMaping.json';\nimport testPayload from '../data/testPayload.json';\n\nclass BubblesAnimation {\n    constructor(mainBrain) {\n        this.mainBrain = mainBrain;\n        this.isFlashing = false;\n        this.memorySelected = mainBrain.memorySelected;\n        this.isBubblesInserted = false;\n        this.winner = '';\n        this.winnerGroup = '';\n        this.fistCameraReposition = false;\n    }\n\n    /**\n     * memories //Array of 3 positions x y z\n     * @param bubbles\n     * @returns {Array} of 4 positions x y z w when 'w' is the selector bubble 2.0 = memory and 3.0 = winner\n     */\n    getBubblesSelected(bubbles, subsystem) {\n        const { memories } = this.mainBrain;\n        const bubbleList = [];\n        console.log(subsystem);\n        const { winner, winnerGroup, subsystemResults } = subsystem;\n\n        // Update Winner to use in Update animation\n        this.winner = winner;\n        this.winnerGroup = winnerGroup;\n\n        subsystemResults.forEach((m) => {\n            const memoryGroup = BubblesAnimation.getSubsystemGroup(m.subsystem) || 'episodic';\n\n            const memory = memories[memoryGroup][0].attributes.position.array;\n            const randomPos = THREE.Math.randInt(3 * 1500, (memory.length / 3) - 4);\n\n            const x = memory[(randomPos * 3) + 0] || 0;\n            const y = memory[(randomPos * 3) + 1] || 0;\n            const z = memory[(randomPos * 3) + 2] || 0;\n            let altitude = THREE.Math.randInt(120, 150);\n            const parent = this.mainBrain.particlesSystem.particles;\n\n            if (winner === m.subsystem) {\n                altitude = 200; // highest position\n\n                const geometry = new THREE.SphereGeometry(2, 32, 32);\n                const material = new THREE.MeshNormalMaterial();\n\n                const mesh = new THREE.Mesh(geometry, material);\n                parent.add(mesh);\n                mesh.position.set(x, y, z);\n\n                bubbleList.push(x, y + 150.0, z, 3.0); // w = 3.0 for the winner\n            }\n            const group = new THREE.Object3D();\n            parent.add(group);\n        });\n\n        // Inject bubbles selected in to the all flashing bubbles replace the older one\n        let memoryPos = 0;\n        if (this.isBubblesInserted) {\n            for (let i = 0; i < bubbles.length / 4; i += 1) {\n                const w = bubbles[(i * 4) + 3] || 0;\n\n                // Reset old position\n                if (w === 2.0 || w === 3.0) {\n                    if (memoryPos < bubbleList.length / 4) {\n                        bubbles[(i * 4) + 0] = bubbleList[(memoryPos * 4) + 0];\n                        bubbles[(i * 4) + 1] = bubbleList[(memoryPos * 4) + 1];\n                        bubbles[(i * 4) + 2] = bubbleList[(memoryPos * 4) + 2];\n                        memoryPos += 1;\n                    }\n                }\n            }\n        } else {\n            // New Burbles\n            for (let i = 0; i < bubbleList.length / 4; i += 1) {\n                bubbles[(i * 4) + 0] = bubbleList[(memoryPos * 4) + 0];\n                bubbles[(i * 4) + 1] = bubbleList[(memoryPos * 4) + 1];\n                bubbles[(i * 4) + 2] = bubbleList[(memoryPos * 4) + 2];\n                bubbles[(i * 4) + 3] = bubbleList[(memoryPos * 4) + 3];\n                memoryPos += 1;\n            }\n            this.isBubblesInserted = true;\n        }\n        return bubbleList;\n    }\n\n    isWinnerActive(status) {\n        if (status) {\n            // Getting Memory Id\n            for (let i = 0; i < this.mainBrain.memorySelected.length; i += 1) {\n                if (this.mainBrain.memorySelected[i] === this.winnerGroup) {\n                    const progress = { p: 0.0 };\n                    TweenMax.fromTo(progress, 2.5, { p: 0.0 }, {\n                        p: 1.0,\n                        ease: Power1.easeInOut,\n                        onUpdate: () => {\n                            this.bubbles.material.uniforms.uWinnerAlpha.value = progress.p;\n                        },\n                        onStart: () => {\n                            this.bubbles.material.uniforms.uWinnerSelected.value = i;\n                            this.bubbles.material.uniforms.isWinnerActive.value = true;\n                        },\n                    });\n                }\n            }\n        } else {\n            {\n                const progress = { p: 1.0 };\n                TweenMax.fromTo(progress, 2.5, { p: 1.0 }, {\n                    p: 0.0,\n                    ease: Power1.easeInOut,\n                    onUpdate: () => {\n                        this.bubbles.material.uniforms.uWinnerAlpha.value = progress.p;\n                    },\n                    onComplete: () => {\n                        this.bubbles.material.uniforms.isWinnerActive.value = false;\n                        this.bubbles.material.uniforms.uWinnerSelected.value = 0.0;\n                    },\n                });\n            }\n        }\n    }\n\n\n    initAnimation() {\n        const { scene, camera, memories } = this.mainBrain;\n\n        const particles = 100000;\n        const geometry = new THREE.BufferGeometry();\n        const sizes = [];\n        const positions = [];\n        const colors = [];\n        const delay = [];\n        const duration = 2.5;\n        const maxPointDelay = 1.5;\n        const bubbles = [];\n        const memory = [];\n\n        // Add fake shining bubbles\n        for (let i = 0; i < particles - (this.memorySelected.length * 3); i += 1) {\n            const r = THREE.Math.randInt(0, 4);\n            const mSelector = this.memorySelected[r];\n            const x = memories[mSelector][0].attributes.position.array[(i * 3) + 0] || 0;\n            const y = memories[mSelector][0].attributes.position.array[(i * 3) + 1] || 0;\n            const z = memories[mSelector][0].attributes.position.array[(i * 3) + 2] || 0;\n\n            positions.push(x, y, z);\n            memory.push(x, y, z, r);\n\n            sizes[i] = THREE.Math.randFloat(10.0, 20.0);\n            if ((i % 100) === 0) {\n                const altitude = THREE.Math.randInt(100, 250) + y;\n                bubbles.push(x, altitude, z, 1.0);\n            } else {\n                bubbles.push(x, y, z, 0.0);\n            }\n\n            delay[(i * 2) + 0] = THREE.Math.randFloat(0.5, maxPointDelay);\n            delay[(i * 2) + 1] = duration;\n        }\n\n        geometry.addAttribute('aDelayDuration', new THREE.Float32BufferAttribute(delay, 2));\n        geometry.addAttribute('bubbles', new THREE.Float32BufferAttribute(bubbles, 4));\n        geometry.addAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\n        geometry.addAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\n        geometry.addAttribute('size', new THREE.Float32BufferAttribute(sizes, 1));\n        geometry.addAttribute('aMemory', new THREE.Float32BufferAttribute(memory, 4));\n        geometry.computeBoundingSphere();\n        const customMaterial = new THREE.ShaderMaterial({\n            uniforms:\n                    {\n                        c: { type: 'f', value: 0.9 }, // Control the dynamically intensity.. Disabled\n                        p: { type: 'f', value: 2.8 }, // Control the dynamically intensity.. Disabled\n                        glowColor: { type: 'c', value: new THREE.Color(0x2C3E93) },\n                        viewVector: { type: 'v3', value: camera.position }, // To make intensity dynamically.. Disabled\n                        uTime: { type: 'f', value: 0.0 },\n                        uSlowTime: { type: 'f', value: 0.0 }, // Slow time to make some particles blinking slowly\n                        uBubblesUp: { type: 'f', value: 0.0 }, // Start the animation bubbling up\n                        uIsFlashing: { type: 'b', value: false }, // Make the whole brain flashing\n                        isWinnerActive: { type: 'b', value: false }, // Active the winner section of the brain\n                        uWinnerSelected: { type: 'f', value: 0.0 }, // activate section of the brain from 0 - 4 ['analytic', 'episodic', 'process', 'semantic', 'affective'];\n                        uWinnerAlpha: { type: 'f', value: 0.0 }, // smooth transition\n                        uFlashingAlpha: { type: 'f', value: 0.0 }, // Smooth fade out and fade in to activate or deactivate\n                        uMouse: { type: 'f', value: new THREE.Vector2(0.0) },\n                    },\n            vertexShader: glowVertex,\n            fragmentShader: glowFrag,\n            flatShading: THREE.SmoothShading,\n            blending: THREE.AdditiveBlending,\n            side: THREE.DoubleSide,\n            depthTest: false,\n            vertexColors: false,\n            transparent: true,\n\n        });\n        this.bubbles = new THREE.Points(geometry, customMaterial);\n        this.bubbles.name = 'memory';\n        scene.add(this.bubbles);\n        console.log('Bubble Object', this.bubbles);\n    }\n\n    updateSubSystem(subsystemPayload) {\n        const payload = BubblesAnimation.processSubsystemResponses(subsystemPayload);\n        this.mainBrain.thinkingAnimation.isActive(true);\n        this.bubbles.geometry.attributes.bubbles.needsUpdate = false;\n        const cameraPos = this.mainBrain.camera.position;\n        const { target } = this.mainBrain.orbitControls;\n        const bubblesAttr = this.bubbles.geometry.attributes.bubbles.array;\n        const progress = { p: 1.0 };\n\n        this.isWinnerActive(false);\n        this.mainBrain.font.removeText();\n        TweenMax.fromTo(progress, 2.5, { p: 1.0 }, {\n            p: 0.0,\n            ease: Power1.easeInOut,\n            onUpdate: () => {\n                this.updateBurbleUp(progress.p);\n            },\n            onStart: () => {\n                if (this.fistCameraReposition) {\n                    this.animate(false);\n                }\n            },\n            onComplete: () => {\n                // This function alter the bubblesAttr buffer\n                this.getBubblesSelected(bubblesAttr, payload);\n                this.bubbles.geometry.attributes.bubbles.needsUpdate = true;\n                this.animate(true);\n                this.mainBrain.thinkingAnimation.isActive(false);\n                this.fistCameraReposition = true;\n            },\n        });\n    }\n\n    static processSubsystemResponses(memoryNumber = 0) {\n        const response = Math.floor(testPayload[memoryNumber]) && Math.floor(testPayload[memoryNumber]).attributes || { subsystemResults: [] };\n\n        const winner = response.winningSubsystem;\n        const { subsystemResults } = response;\n        const winnerGroup = BubblesAnimation.getSubsystemGroup(winner);\n        return { winner, winnerGroup, subsystemResults };\n    }\n\n    static getSubsystemGroup(subsystem) {\n        const map = _.head(_.filter(memoryMapping, { id: subsystem }));\n        if (_.has(map, 'group')) {\n            return map.group;\n        }\n        return undefined;\n    }\n\n    update(camera) {\n        this.bubbles.material.uniforms.viewVector.value =\n          new THREE.Vector3().subVectors(camera.position, this.bubbles.position);\n        this.bubbles.material.uniforms.uTime.value += 1 / 20;\n        this.bubbles.material.uniforms.uSlowTime.value += (1 / 400);\n    }\n    updateBurbleUp(val) {\n        this.bubbles.material.uniforms.uBubblesUp.value = val;\n    }\n    updateMouse(coordinates) {\n        this.bubbles.material.uniforms.uMouse.value = coordinates;\n    }\n\n    flashingAnimation(isActive) {\n        this.bubbles.material.uniforms.uIsFlashing.value = isActive;\n        this.mainBrain.thinkingAnimation.isActive(false);\n        if (isActive) {\n            const progress = { p: 0.0 };\n            TweenMax.fromTo(progress, 2.5, { p: 0.0 }, {\n                p: 1.0,\n                ease: Power1.easeInOut,\n                onUpdate: () => {\n                    this.bubbles.material.uniforms.uFlashingAlpha.value = progress.p;\n                    this.isFlashing = true;\n                },\n            });\n        } else {\n            const progress = { p: 1.0 };\n            TweenMax.fromTo(progress, 2.5, { p: 1.0 }, {\n                p: 0.0,\n                ease: Power1.easeInOut,\n                onUpdate: () => {\n                    this.bubbles.material.uniforms.uFlashingAlpha.value = progress.p;\n                    this.isFlashing = false;\n                },\n            });\n        }\n    }\n\n    animate(isActive) {\n        const cameraPos = this.mainBrain.camera.position;\n        const { target } = this.mainBrain.orbitControls;\n        if (!this.isFlashing) {\n            this.flashingAnimation(true);\n        }\n        if (isActive) {\n            const progress = { p: 0.0, camera: 0.0 };\n            TweenMax.fromTo(progress, 2.5, { p: 0.0, camera: 0.0 }, {\n                p: 1.0,\n                camera: 0.5,\n                ease: Power1.easeInOut,\n                onUpdate: () => {\n                    this.updateBurbleUp(progress.p);\n                    this.mainBrain.orbitControls.target.set(target.x, target.y + progress.camera, target.z);\n                    this.mainBrain.camera.position.set(cameraPos.x, cameraPos.y + progress.camera, cameraPos.z);\n                },\n                onComplete: () => {\n                    this.isWinnerActive(true);\n                },\n            });\n        } else {\n            const progress = { p: 1.0, camera: 0.5 };\n            TweenMax.fromTo(progress, 2.5, { p: 1.0, camera: 0.5 }, {\n                p: 0.0,\n                camera: 0.0,\n                ease: Power1.easeInOut,\n                onUpdate: () => {\n                    this.updateBurbleUp(progress.p);\n                    this.mainBrain.orbitControls.target.set(target.x, target.y - progress.camera, target.z);\n                    this.mainBrain.camera.position.set(cameraPos.x, cameraPos.y - progress.camera, cameraPos.z);\n                },\n                onStart: () => {\n                    this.isWinnerActive(false);\n                },\n            });\n        }\n    }\n}\n\nexport default BubblesAnimation;\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/services/bubblesAnimation.js","module.exports = [{\"id\":\"IntentFAQ\",\"group\":\"semantic\"},{\"id\":\"SocialTalk\",\"group\":\"semantic\"},{\"id\":\"FAQ\",\"group\":\"semantic\"},{\"id\":\"Semnet\",\"group\":\"semantic\"},{\"id\":\"Escalate\",\"group\":\"semantic\"},{\"id\":\"EpisodicMemory\",\"group\":\"episodic\"},{\"id\":\"Affective\",\"group\":\"affective\"},{\"id\":\"AIML\",\"group\":\"affective\"},{\"id\":\"Bpn\",\"group\":\"process\"},{\"id\":\"Cqa\",\"group\":\"analytic\"},{\"id\":\"EQA\",\"group\":\"analytic\"},{\"id\":\"LogicNet\",\"group\":\"analytic\"}]\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/data/memoryMaping.json\n// module id = VGPT\n// module chunks = 1","module.exports = \"float random (in vec2 st) {\\n   return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/chunks/random.raw.xml\n// module id = XbjG\n// module chunks = 1","module.exports = [{\"messageId\":\"d542ac85-88c9-4d49-a5cb-08514cb67ba0\",\"conversationId\":\"LDWNSLVXAAIAA-1\",\"inResponseToMessageId\":\"76186dad-cba3-423f-ae27-35a796028c24\",\"sourceSessionId\":\"b9e1fdeb-4417-463f-a9f2-4f2253d9e38b\",\"sourceClass\":\"ContextDialogManagementService\",\"messageText\":null,\"attributes\":{\"inboundText\":\"hello\",\"preProcessors\":[{\"time\":\"21.31 μs\",\"processor\":\"SetCustomConversationAttributesProcessor\"},{\"time\":\"50.09 μs\",\"processor\":\"TranslationProcessor\"},{\"time\":\"723.8 ms\",\"processor\":\"InboundNlpProcessor\"},{\"time\":\"48.58 ms\",\"processor\":\"CorefProcessor\"},{\"time\":\"322.6 ms\",\"processor\":\"GoalAndEntityProcessor\"},{\"time\":\"221.3 ms\",\"processor\":\"UserAffectUpdateService\"},{\"time\":\"9.804 ms\",\"processor\":\"AnalyticsProcessor\"},{\"time\":\"29.28 μs\",\"processor\":\"BpnLearningProcessor\"}],\"winningSubsystem\":\"analytic\",\"initialContext\":{\"dialogState\":\"ACTIVE\",\"contextId\":\"763decf0-31b2-4e3c-b44b-531a294c6fcf\",\"preferredResponder\":null},\"subsystemResults\":[{\"result\":\"OK\",\"subsystem\":\"Semnet\",\"responses\":[],\"time\":\"13.63 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Bpn\",\"responses\":[],\"time\":\"18.43 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"AIML\",\"responses\":[\"Hi victor, How can I help you?.\"],\"time\":\"31.98 ms\"},{\"result\":\"NONE\",\"subsystem\":\"LogicNet\",\"responses\":[],\"time\":\"17.74 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"DontKnow\",\"responses\":[null],\"time\":\"15.94 ms\"},{\"result\":\"NONE\",\"subsystem\":\"FAQ\",\"responses\":[],\"time\":\"43.49 ms\"},{\"result\":\"NONE\",\"subsystem\":\"EQA\",\"responses\":[],\"time\":\"19.72 ms\"},{\"result\":\"NONE\",\"subsystem\":\"EpisodicMemory\",\"responses\":[],\"time\":\"706.8 ms\"},{\"result\":\"NONE\",\"subsystem\":\"IntentFAQ\",\"responses\":[],\"time\":\"55.04 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Affective\",\"responses\":[],\"time\":\"24.98 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Escalate\",\"responses\":[],\"time\":\"10.61 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"SocialTalk\",\"responses\":[null],\"time\":\"22.22 ms\"},{\"result\":\"NONE\",\"subsystem\":\"SemnetDoc\",\"responses\":[],\"time\":\"13.79 ms\"},{\"result\":\"NONE\",\"subsystem\":\"AcknowledgeDefault\",\"responses\":[],\"time\":\"24.76 ms\"}],\"finalContext\":{\"dialogState\":\"ACTIVE\",\"contextId\":\"763decf0-31b2-4e3c-b44b-531a294c6fcf\",\"preferredResponder\":null}},\"fromUserDisplayName\":\"Amelia\",\"secureResponse\":false,\"id\":\"d542ac85-88c9-4d49-a5cb-08514cb67ba0\",\"messageType\":\"OutboundArbitrationResultsMessage\",\"translated\":false,\"voice\":\"VW Julie\"},{\"messageId\":\"d542ac85-88c9-4d49-a5cb-08514cb67ba0\",\"conversationId\":\"LDWNSLVXAAIAA-1\",\"inResponseToMessageId\":\"76186dad-cba3-423f-ae27-35a796028c24\",\"sourceSessionId\":\"b9e1fdeb-4417-463f-a9f2-4f2253d9e38b\",\"sourceClass\":\"ContextDialogManagementService\",\"messageText\":null,\"attributes\":{\"inboundText\":\"hello\",\"preProcessors\":[{\"time\":\"21.31 μs\",\"processor\":\"SetCustomConversationAttributesProcessor\"},{\"time\":\"50.09 μs\",\"processor\":\"TranslationProcessor\"},{\"time\":\"723.8 ms\",\"processor\":\"InboundNlpProcessor\"},{\"time\":\"48.58 ms\",\"processor\":\"CorefProcessor\"},{\"time\":\"322.6 ms\",\"processor\":\"GoalAndEntityProcessor\"},{\"time\":\"221.3 ms\",\"processor\":\"UserAffectUpdateService\"},{\"time\":\"9.804 ms\",\"processor\":\"AnalyticsProcessor\"},{\"time\":\"29.28 μs\",\"processor\":\"BpnLearningProcessor\"}],\"winningSubsystem\":\"episodic\",\"initialContext\":{\"dialogState\":\"ACTIVE\",\"contextId\":\"763decf0-31b2-4e3c-b44b-531a294c6fcf\",\"preferredResponder\":null},\"subsystemResults\":[{\"result\":\"OK\",\"subsystem\":\"Semnet\",\"responses\":[],\"time\":\"13.63 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Bpn\",\"responses\":[],\"time\":\"18.43 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"AIML\",\"responses\":[\"Hi victor, How can I help you?.\"],\"time\":\"31.98 ms\"},{\"result\":\"NONE\",\"subsystem\":\"LogicNet\",\"responses\":[],\"time\":\"17.74 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"DontKnow\",\"responses\":[null],\"time\":\"15.94 ms\"},{\"result\":\"NONE\",\"subsystem\":\"FAQ\",\"responses\":[],\"time\":\"43.49 ms\"},{\"result\":\"NONE\",\"subsystem\":\"EQA\",\"responses\":[],\"time\":\"19.72 ms\"},{\"result\":\"NONE\",\"subsystem\":\"EpisodicMemory\",\"responses\":[],\"time\":\"706.8 ms\"},{\"result\":\"NONE\",\"subsystem\":\"IntentFAQ\",\"responses\":[],\"time\":\"55.04 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Affective\",\"responses\":[],\"time\":\"24.98 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Escalate\",\"responses\":[],\"time\":\"10.61 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"SocialTalk\",\"responses\":[null],\"time\":\"22.22 ms\"},{\"result\":\"NONE\",\"subsystem\":\"SemnetDoc\",\"responses\":[],\"time\":\"13.79 ms\"},{\"result\":\"NONE\",\"subsystem\":\"AcknowledgeDefault\",\"responses\":[],\"time\":\"24.76 ms\"}],\"finalContext\":{\"dialogState\":\"ACTIVE\",\"contextId\":\"763decf0-31b2-4e3c-b44b-531a294c6fcf\",\"preferredResponder\":null}},\"fromUserDisplayName\":\"Amelia\",\"secureResponse\":false,\"id\":\"d542ac85-88c9-4d49-a5cb-08514cb67ba0\",\"messageType\":\"OutboundArbitrationResultsMessage\",\"translated\":false,\"voice\":\"VW Julie\"},{\"messageId\":\"d542ac85-88c9-4d49-a5cb-08514cb67ba0\",\"conversationId\":\"LDWNSLVXAAIAA-1\",\"inResponseToMessageId\":\"76186dad-cba3-423f-ae27-35a796028c24\",\"sourceSessionId\":\"b9e1fdeb-4417-463f-a9f2-4f2253d9e38b\",\"sourceClass\":\"ContextDialogManagementService\",\"messageText\":null,\"attributes\":{\"inboundText\":\"hello\",\"preProcessors\":[{\"time\":\"21.31 μs\",\"processor\":\"SetCustomConversationAttributesProcessor\"},{\"time\":\"50.09 μs\",\"processor\":\"TranslationProcessor\"},{\"time\":\"723.8 ms\",\"processor\":\"InboundNlpProcessor\"},{\"time\":\"48.58 ms\",\"processor\":\"CorefProcessor\"},{\"time\":\"322.6 ms\",\"processor\":\"GoalAndEntityProcessor\"},{\"time\":\"221.3 ms\",\"processor\":\"UserAffectUpdateService\"},{\"time\":\"9.804 ms\",\"processor\":\"AnalyticsProcessor\"},{\"time\":\"29.28 μs\",\"processor\":\"BpnLearningProcessor\"}],\"winningSubsystem\":\"process\",\"initialContext\":{\"dialogState\":\"ACTIVE\",\"contextId\":\"763decf0-31b2-4e3c-b44b-531a294c6fcf\",\"preferredResponder\":null},\"subsystemResults\":[{\"result\":\"OK\",\"subsystem\":\"Semnet\",\"responses\":[],\"time\":\"13.63 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Bpn\",\"responses\":[],\"time\":\"18.43 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"AIML\",\"responses\":[\"Hi victor, How can I help you?.\"],\"time\":\"31.98 ms\"},{\"result\":\"NONE\",\"subsystem\":\"LogicNet\",\"responses\":[],\"time\":\"17.74 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"DontKnow\",\"responses\":[null],\"time\":\"15.94 ms\"},{\"result\":\"NONE\",\"subsystem\":\"FAQ\",\"responses\":[],\"time\":\"43.49 ms\"},{\"result\":\"NONE\",\"subsystem\":\"EQA\",\"responses\":[],\"time\":\"19.72 ms\"},{\"result\":\"NONE\",\"subsystem\":\"EpisodicMemory\",\"responses\":[],\"time\":\"706.8 ms\"},{\"result\":\"NONE\",\"subsystem\":\"IntentFAQ\",\"responses\":[],\"time\":\"55.04 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Affective\",\"responses\":[],\"time\":\"24.98 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Escalate\",\"responses\":[],\"time\":\"10.61 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"SocialTalk\",\"responses\":[null],\"time\":\"22.22 ms\"},{\"result\":\"NONE\",\"subsystem\":\"SemnetDoc\",\"responses\":[],\"time\":\"13.79 ms\"},{\"result\":\"NONE\",\"subsystem\":\"AcknowledgeDefault\",\"responses\":[],\"time\":\"24.76 ms\"}],\"finalContext\":{\"dialogState\":\"ACTIVE\",\"contextId\":\"763decf0-31b2-4e3c-b44b-531a294c6fcf\",\"preferredResponder\":null}},\"fromUserDisplayName\":\"Amelia\",\"secureResponse\":false,\"id\":\"d542ac85-88c9-4d49-a5cb-08514cb67ba0\",\"messageType\":\"OutboundArbitrationResultsMessage\",\"translated\":false,\"voice\":\"VW Julie\"},{\"messageId\":\"d542ac85-88c9-4d49-a5cb-08514cb67ba0\",\"conversationId\":\"LDWNSLVXAAIAA-1\",\"inResponseToMessageId\":\"76186dad-cba3-423f-ae27-35a796028c24\",\"sourceSessionId\":\"b9e1fdeb-4417-463f-a9f2-4f2253d9e38b\",\"sourceClass\":\"ContextDialogManagementService\",\"messageText\":null,\"attributes\":{\"inboundText\":\"hello\",\"preProcessors\":[{\"time\":\"21.31 μs\",\"processor\":\"SetCustomConversationAttributesProcessor\"},{\"time\":\"50.09 μs\",\"processor\":\"TranslationProcessor\"},{\"time\":\"723.8 ms\",\"processor\":\"InboundNlpProcessor\"},{\"time\":\"48.58 ms\",\"processor\":\"CorefProcessor\"},{\"time\":\"322.6 ms\",\"processor\":\"GoalAndEntityProcessor\"},{\"time\":\"221.3 ms\",\"processor\":\"UserAffectUpdateService\"},{\"time\":\"9.804 ms\",\"processor\":\"AnalyticsProcessor\"},{\"time\":\"29.28 μs\",\"processor\":\"BpnLearningProcessor\"}],\"winningSubsystem\":\"semantic\",\"initialContext\":{\"dialogState\":\"ACTIVE\",\"contextId\":\"763decf0-31b2-4e3c-b44b-531a294c6fcf\",\"preferredResponder\":null},\"subsystemResults\":[{\"result\":\"OK\",\"subsystem\":\"Semnet\",\"responses\":[],\"time\":\"13.63 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Bpn\",\"responses\":[],\"time\":\"18.43 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"AIML\",\"responses\":[\"Hi victor, How can I help you?.\"],\"time\":\"31.98 ms\"},{\"result\":\"NONE\",\"subsystem\":\"LogicNet\",\"responses\":[],\"time\":\"17.74 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"DontKnow\",\"responses\":[null],\"time\":\"15.94 ms\"},{\"result\":\"NONE\",\"subsystem\":\"FAQ\",\"responses\":[],\"time\":\"43.49 ms\"},{\"result\":\"NONE\",\"subsystem\":\"EQA\",\"responses\":[],\"time\":\"19.72 ms\"},{\"result\":\"NONE\",\"subsystem\":\"EpisodicMemory\",\"responses\":[],\"time\":\"706.8 ms\"},{\"result\":\"NONE\",\"subsystem\":\"IntentFAQ\",\"responses\":[],\"time\":\"55.04 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Affective\",\"responses\":[],\"time\":\"24.98 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Escalate\",\"responses\":[],\"time\":\"10.61 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"SocialTalk\",\"responses\":[null],\"time\":\"22.22 ms\"},{\"result\":\"NONE\",\"subsystem\":\"SemnetDoc\",\"responses\":[],\"time\":\"13.79 ms\"},{\"result\":\"NONE\",\"subsystem\":\"AcknowledgeDefault\",\"responses\":[],\"time\":\"24.76 ms\"}],\"finalContext\":{\"dialogState\":\"ACTIVE\",\"contextId\":\"763decf0-31b2-4e3c-b44b-531a294c6fcf\",\"preferredResponder\":null}},\"fromUserDisplayName\":\"Amelia\",\"secureResponse\":false,\"id\":\"d542ac85-88c9-4d49-a5cb-08514cb67ba0\",\"messageType\":\"OutboundArbitrationResultsMessage\",\"translated\":false,\"voice\":\"VW Julie\"},{\"messageId\":\"d542ac85-88c9-4d49-a5cb-08514cb67ba0\",\"conversationId\":\"LDWNSLVXAAIAA-1\",\"inResponseToMessageId\":\"76186dad-cba3-423f-ae27-35a796028c24\",\"sourceSessionId\":\"b9e1fdeb-4417-463f-a9f2-4f2253d9e38b\",\"sourceClass\":\"ContextDialogManagementService\",\"messageText\":null,\"attributes\":{\"inboundText\":\"hello\",\"preProcessors\":[{\"time\":\"21.31 μs\",\"processor\":\"SetCustomConversationAttributesProcessor\"},{\"time\":\"50.09 μs\",\"processor\":\"TranslationProcessor\"},{\"time\":\"723.8 ms\",\"processor\":\"InboundNlpProcessor\"},{\"time\":\"48.58 ms\",\"processor\":\"CorefProcessor\"},{\"time\":\"322.6 ms\",\"processor\":\"GoalAndEntityProcessor\"},{\"time\":\"221.3 ms\",\"processor\":\"UserAffectUpdateService\"},{\"time\":\"9.804 ms\",\"processor\":\"AnalyticsProcessor\"},{\"time\":\"29.28 μs\",\"processor\":\"BpnLearningProcessor\"}],\"winningSubsystem\":\"affective\",\"initialContext\":{\"dialogState\":\"ACTIVE\",\"contextId\":\"763decf0-31b2-4e3c-b44b-531a294c6fcf\",\"preferredResponder\":null},\"subsystemResults\":[{\"result\":\"OK\",\"subsystem\":\"Semnet\",\"responses\":[],\"time\":\"13.63 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Bpn\",\"responses\":[],\"time\":\"18.43 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"AIML\",\"responses\":[\"Hi victor, How can I help you?.\"],\"time\":\"31.98 ms\"},{\"result\":\"NONE\",\"subsystem\":\"LogicNet\",\"responses\":[],\"time\":\"17.74 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"DontKnow\",\"responses\":[null],\"time\":\"15.94 ms\"},{\"result\":\"NONE\",\"subsystem\":\"FAQ\",\"responses\":[],\"time\":\"43.49 ms\"},{\"result\":\"NONE\",\"subsystem\":\"EQA\",\"responses\":[],\"time\":\"19.72 ms\"},{\"result\":\"NONE\",\"subsystem\":\"EpisodicMemory\",\"responses\":[],\"time\":\"706.8 ms\"},{\"result\":\"NONE\",\"subsystem\":\"IntentFAQ\",\"responses\":[],\"time\":\"55.04 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Affective\",\"responses\":[],\"time\":\"24.98 ms\"},{\"result\":\"NONE\",\"subsystem\":\"Escalate\",\"responses\":[],\"time\":\"10.61 ms\"},{\"result\":\"RESPONDED\",\"subsystem\":\"SocialTalk\",\"responses\":[null],\"time\":\"22.22 ms\"},{\"result\":\"NONE\",\"subsystem\":\"SemnetDoc\",\"responses\":[],\"time\":\"13.79 ms\"},{\"result\":\"NONE\",\"subsystem\":\"AcknowledgeDefault\",\"responses\":[],\"time\":\"24.76 ms\"}],\"finalContext\":{\"dialogState\":\"ACTIVE\",\"contextId\":\"763decf0-31b2-4e3c-b44b-531a294c6fcf\",\"preferredResponder\":null}},\"fromUserDisplayName\":\"Amelia\",\"secureResponse\":false,\"id\":\"d542ac85-88c9-4d49-a5cb-08514cb67ba0\",\"messageType\":\"OutboundArbitrationResultsMessage\",\"translated\":false,\"voice\":\"VW Julie\"}]\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/data/testPayload.json\n// module id = cQvb\n// module chunks = 1","module.exports = \"#define GLSLIFY 1\\nuniform vec3 viewVector;\\nuniform float c;\\nuniform float p;\\nuniform float uTime;\\nvarying float intensity;\\nvarying  vec2 vUv;\\n\\nvoid main(){\\n\\n    vUv = uv;\\n\\n    vec3 vNormal = normalize( normalMatrix * normal );\\n\\tvec3 vNormel = normalize( normalMatrix * viewVector );\\n    intensity = pow(c - abs(dot(vNormal, vec3(0, 0, 1))), p);\\n\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n }\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/shaders/xRay.vert\n// module id = cRIw\n// module chunks = 1","import './css/style.css';\nimport MainBrain from './js/MainBrain';\n\n// eslint-disable-next-line\nnew MainBrain()\n\n\n\n// WEBPACK FOOTER //\n// ./src/app.js","module.exports = {\"episodic\":{\"x\":92,\"y\":45,\"z\":0,\"size\":50,\"camera\":{\"x\":144,\"y\":30,\"z\":284.6}},\"semanticRight\":{\"x\":20,\"y\":-30,\"z\":65,\"size\":50,\"camera\":{\"x\":100.92543906042464,\"y\":-0.9434978080745353,\"z\":-238.15054105700113}},\"analityc\":{\"x\":-80,\"y\":20,\"z\":0,\"size\":50,\"camera\":{\"x\":-231.7315097929428,\"y\":-17.545964846039936,\"z\":-221.1965290742952}},\"process\":{\"x\":-50,\"y\":75,\"z\":0,\"size\":50,\"camera\":{\"x\":-152.59773939016097,\"y\":152.71424382251672,\"z\":237.33425301574184}},\"afective\":{\"x\":-100,\"y\":-30,\"z\":0,\"size\":50,\"camera\":{\"x\":-236.1407685891055,\"y\":-15.365212485321477,\"z\":-221.51856763625176}},\"semanticLeft\":{\"x\":20,\"y\":-30,\"z\":-65,\"size\":50,\"camera\":-1}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/data/flashingCoordinates.json\n// module id = hmLD\n// module chunks = 1","module.exports = \"vec2 rotate2D(vec2 _st, float _angle){\\n        _st -= 0.5;\\n        _st =  mat2(cos(_angle),-sin(_angle), sin(_angle),cos(_angle)) * _st;\\n        _st += 0.5;\\n  return _st;\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/chunks/rotate.raw.xml\n// module id = joTG\n// module chunks = 1","import * as THREE from 'three';\nimport 'three/examples/js/loaders/OBJLoader';\n\nclass Loaders {\n    constructor(startAnimation) {\n        this.BRAIN_MODEL = {};\n        this.brainXRayLight = {};\n        this.FONT = {};\n        this.assets = new Map();\n        this.models = ['BrainUVs.obj'];\n        this.loadingManager = new THREE.LoadingManager();\n        this.startAnimation = startAnimation;\n        this.loadingManager.onLoad = this.handlerLoad.bind(this);\n        this.loadingManager.onProgress = this.handlerProgress;\n        this.loadingManager.onError = this.handlerError;\n        this.loadingManager.onStart = this.handlerStart;\n        this.setModel = this.setModel.bind(this);\n        this.loadBrainTextures();\n        this.loadOBJs();\n        this.loadTextures();\n        this.loadFont();\n        this.loadSceneBackground();\n    }\n\n    static handlerStart() {\n        console.log('Starting');\n    }\n    static handlerProgress(url, itemsLoaded, itemsTotal) {\n        console.log(`Loading file: ${url}.\\nLoaded ${itemsLoaded} of ${itemsTotal} files.`);\n    }\n    handlerLoad() {\n        console.log('loading Complete!');\n        this.startAnimation();\n    }\n    static handlerError(url) {\n        console.log(`There was an error loading ${url}`);\n    }\n    setModel(model, i) {\n        switch (i) {\n            case 0:\n                this.BRAIN_MODEL = model;\n                break;\n            case 1:\n                this.XRAY_MODEL = model;\n                break;\n            default:\n                this.BRAIN_MODEL = model;\n        }\n    }\n\n    loadOBJs() {\n        const loader = new THREE.OBJLoader(this.loadingManager);\n        this.models.forEach((m, i) => {\n            loader.load(`static/models/${m}`, (model) => {\n                this.setModel(model, i);\n            });\n        });\n    }\n\n    loadTextures() {\n        const loader = new THREE.TextureLoader(this.loadingManager);\n        loader.load('static/textures/spark1.png', (t) => {\n            this.spark = t;\n        });\n    }\n\n    loadBrainTextures() {\n        const loader = new THREE.TextureLoader(this.loadingManager);\n        loader.load('static/textures/brainXRayLight.png', (t) => {\n            this.brainXRayLight = t;\n        });\n    }\n\n    loadSceneBackground() {\n        const cubeTextureLoader = new THREE.CubeTextureLoader(this.loadingManager);\n        const path = 'static/textures/sky/';\n        const format = '.png';\n        const urls = [\n            `${path}px${format}`, `${path}nx${format}`,\n            `${path}py${format}`, `${path}ny${format}`,\n            `${path}pz${format}`, `${path}nz${format}`,\n        ];\n\n        cubeTextureLoader.load(urls, (textureCube) => {\n            this.assets.set('sky', textureCube);\n        });\n    }\n\n    loadFont() {\n        const fontLoader = new THREE.FontLoader(this.loadingManager);\n        fontLoader.load('static/fonts/Roboto_Regular.json', (font) => {\n            this.FONT = font;\n        });\n    }\n}\n\nexport default Loaders;\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/Loaders/Loaders.js","import * as THREE from 'three';\nimport { Power2, TweenLite } from 'gsap';\n\nclass Font {\n    constructor(loader, scene) {\n        this.font = loader.FONT;\n        this.scene = scene;\n    }\n\n    makeTextSprite(_message, _parentObject, _position, size = 2) {\n        const message = _message;\n        const parentObject = _parentObject;\n        const position = _position;\n        if (parentObject) {\n            const group = new THREE.Group();\n            this.scene.add(group);\n            const textMaterial = new THREE.MeshBasicMaterial({\n                color: new THREE.Color(1, 2, 1),\n                side: THREE.DoubleSide,\n                wireframe: false,\n            });\n            const textShapes = this.font.generateShapes(message, size, size);\n            const text3d = new THREE.ShapeGeometry(textShapes);\n            text3d.computeBoundingBox();\n            const text = new THREE.Mesh(text3d, textMaterial);\n            const centerOffset = text.geometry.boundingBox.max.x / 2.0;\n            text.position.set(position.x - centerOffset, position.y - 10, position.z);\n            text.type = 'Font';\n\n            text.material.opacity = 0;\n            text.material.transparent = true;\n            parentObject.add(text);\n\n            TweenLite.to(text.material, 2.5, { ease: Power2.easeOut, opacity: 1.0 });\n            TweenLite.to(text.position, 2.5, { ease: Power2.easeOut, y: position.y + 2 });\n        }\n    }\n\n    removeText(parentGroup) {\n        const removeFrom = parentGroup || this.scene || [];\n\n        removeFrom.traverse((obj) => {\n            if (obj instanceof THREE.Mesh && obj.type === 'Font') {\n                TweenLite.to(obj.material, 2.5, { ease: Power2.easeOut, opacity: 0.0 });\n                TweenLite.to(obj.position, 2.5, { ease: Power2.easeOut, y: obj.position.y - 10, onComplete: () => { obj.parent.remove(obj); } });\n            }\n        });\n    }\n\n    facingToCamera(camera, parentGroup) {\n        const facing = parentGroup || this.scene || [];\n\n        facing.traverse((obj) => {\n            if (obj instanceof THREE.Mesh && obj.type === 'Font') {\n                obj.lookAt(camera.position);\n            }\n        });\n    }\n}\nexport default Font;\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/services/font.js","/* eslint no-param-reassign: [\"error\", { \"props\": true, \"ignorePropertyModificationsFor\": [\"data\"] }] */\nimport * as BAS from 'three-bas';\nimport * as THREE from 'three';\nimport { Power1, TweenMax } from 'gsap';\nimport Chuncks from './chunks';\nimport xRayVertex from '../shaders/xRay.vert';\nimport xRayFrag from '../shaders/xRay.frag';\n\n\nclass ParticleSystem {\n    constructor(mainBrain, brainParticles, memories) {\n        this.chuncks = new Chuncks();\n        this.brainParticles = brainParticles;\n        this.memories = memories;\n        this.mainBrain = mainBrain;\n        this.particlesStartColor = new THREE.Color(0xffffff);\n        this.particlesColor = new THREE.Color(0xffffff);\n        const { xRayEffect, systemPoints } = this.init();\n        this.particles = systemPoints;\n        this.xRay = xRayEffect;\n    }\n\n    static getLoadingPoints() {\n        const geometry = new THREE.RingBufferGeometry(100, 40, 150, 150, 20);\n        return geometry.attributes.position.array;\n    }\n\n    init() {\n        const duration = 1.0;\n        const maxPointDelay = 0.3;\n\n        const brainPoints = this.brainParticles.attributes.position.array;\n\n        const count = brainPoints.length / 3;\n        const me = this;\n\n        const geometry = new BAS.PointBufferGeometry(count);\n\n        const loadingCircle = ParticleSystem.getLoadingPoints();\n        geometry.createAttribute('aStartLoading', 3, (data, index, num) => {\n            const startVec3 = new THREE.Vector3();\n            if (loadingCircle.length < brainPoints.length) {\n                startVec3.x = loadingCircle[(index * 3) + 0] || 0.0;\n                startVec3.y = loadingCircle[(index * 3) + 1] || 0.0;\n                startVec3.z = THREE.Math.randFloat(-80.0, 1500.0); // loadingCircle[index * 3 + 2] || 0\n            } else {\n                startVec3.x = 100.0;\n                startVec3.y = 100.0;\n                startVec3.z = THREE.Math.randFloat(-80.0, 1500.0); // loadingCircle[index * 3 + 2] || 0\n            }\n            startVec3.toArray(data);\n        });\n\n        const color = new THREE.Color();\n        geometry.createAttribute('aStartColor', 3, (data) => {\n            const { r, g, b } = me.particlesStartColor;\n\n            color.setRGB(r, g, b);\n            color.toArray(data);\n        });\n\n        geometry.createAttribute('scale', 1, (data) => {\n            data[0] = THREE.Math.randFloat(200.0, 400.0);\n        });\n\n        geometry.createAttribute('aEndColor', 3, (data) => {\n            const { r, g, b } = me.particlesStartColor;\n\n            color.setRGB(r, g, b);\n            color.toArray(data);\n        });\n\n        geometry.createAttribute('aEndPos', 3, (data, index) => {\n            const startVec3 = new THREE.Vector3();\n            startVec3.x = brainPoints[(index * 3) + 0];\n            startVec3.y = brainPoints[(index * 3) + 1];\n            startVec3.z = brainPoints[(index * 3) + 2];\n            startVec3.toArray(data);\n        });\n\n        this.totalDuration = duration + maxPointDelay;\n\n        geometry.createAttribute('aDelayDuration', 3, (data) => {\n            data[0] = Math.random() * maxPointDelay;\n            data[1] = duration;\n        });\n\n\n        const geometry2 = new BAS.PointBufferGeometry(count);\n\n        geometry2.createAttribute('position', 3, (data, index) => {\n            const startVec3 = new THREE.Vector3();\n            startVec3.x = brainPoints[(index * 3) + 0];\n            startVec3.y = brainPoints[(index * 3) + 1];\n            startVec3.z = brainPoints[(index * 3) + 2];\n            startVec3.toArray(data);\n        });\n\n\n        const material = new BAS.PointsAnimationMaterial({\n            // transparent: true,\n            // blending: THREE.AdditiveBlending,\n            vertexColors: THREE.VertexColors,\n            deptWrite: false,\n\n            blending: THREE.AdditiveBlending,\n            depthTest: true,\n            transparent: true,\n            uniforms: {\n                uTime: { type: 'f', value: 0 },\n                uProgress: { type: 'float', value: 0.0 },\n                uAngle: { type: 'f', value: 1.0 },\n                uPointSizeEffect: { type: 'f', value: 0.1 },\n                uColor: { value: new THREE.Color(0xffffff) },\n            },\n            defines: {\n                // USE_SIZEATTENUATION: false, // Change size of the particle depending of the camera\n            },\n            uniformValues: {\n                size: 1.9,\n                scale: 400,\n            },\n            vertexFunctions: [\n                BAS.ShaderChunk.ease_expo_in_out,\n                BAS.ShaderChunk.quaternion_rotation,\n                this.chuncks.rotate,\n                this.chuncks.random,\n                this.chuncks.noise,\n            ],\n\n            vertexParameters: [\n                'uniform float uTime;',\n                'uniform float uPointSizeEffect;',\n                'uniform float uProgress;',\n                'uniform float uAngle;',\n                'attribute vec2 aDelayDuration;',\n                'attribute vec3 aStartLoading;',\n                'attribute vec3 aStartPos;',\n                'attribute vec3 aEndPos;',\n                'attribute vec3 aStartColor;',\n                'attribute vec3 aEndColor;',\n                'attribute float aStartOpacity;',\n                'attribute float aEndOpacity;',\n\n            ],\n            varyingParameters: [\n                `\n          varying vec3 vParticle;\n          varying vec3 vEndPos;\n          varying vec3 vStartLoading;\n          `,\n            ],\n            // this chunk is injected 1st thing in the vertex shader main() function\n            // variables declared here are available in all subsequent chunks\n            vertexInit: [\n                // calculate a progress value between 0.0 and 1.0 based on the vertex delay and duration, and the uniform time\n                'float tProgress = clamp(uProgress - aDelayDuration.x, 0.0, aDelayDuration.y) / aDelayDuration.y;',\n                // // ease the progress using one of the available easing functions\n                'tProgress = easeExpoInOut(tProgress);',\n                // 'tProgress = uProgress;'\n                // 'if(test){ tProgress = 0.0; } else { tProgress = 1.0 ;}'\n            ],\n            // this chunk is injected before all default position calculations (including the model matrix multiplication)\n            vertexPosition: [`\n        // linearly interpolate between the start and end position based on tProgress\n        // and add the value as a delta\n \n         if(tProgress < 0.5){ \n         vec2 pos = vec2(aStartLoading.xy*5.0);\n\n        // Use the noise function\n        float n = noise(aStartLoading.yx);\n     vec2 test;\n      if(mod(aStartLoading.x, 2.0) < 0.2){\n            test = rotate2D(aStartLoading.xy, PI*2.0 * uTime * uAngle * n);\n             transformed += vec3(test.x, test.y, aStartLoading.z * n);\n        }else if (mod(aStartLoading.x, 2.0) >= 0.2 && mod(aStartLoading.x, 2.0) < 1.5){\n            test = rotate2D(aStartLoading.xy + n, PI*2.0 * uTime * 0.05 * uAngle * n);\n            transformed += vec3(test.x, test.y, aStartLoading.z * n);\n        }else {\n            test = rotate2D(aStartLoading.xy + n, PI*2.0 * uTime * 0.01 * uAngle * n);\n            transformed += vec3(test.x, test.y , aStartLoading.z * n);\n        }\n        }else{\n        \n  \n        //Brain Particles\n           transformed += mix(aStartLoading, aEndPos, tProgress);\n        }   \n        `,\n            ],\n            // this chunk is injected before all default color calculations\n            vertexColor: [\n                // linearly interpolate between the start and end position based on tProgress\n                // and add the value as a delta\n                ` \n         vParticle = aEndPos;\n         \n        vEndPos = aEndPos;\n        vStartLoading = aStartLoading;\n        `,\n            ],\n\n            fragmentParameters: [\n\n                'uniform float uTime;',\n                'uniform vec3 uColor;',\n            ],\n            // convert the point (default is square) to circle shape, make sure transparent of material is true\n            // you can create more shapes: https://thebookofshaders.com/07/\n            fragmentShape: [\n                `\n        float distanceToCenter = distance(gl_PointCoord, vec2(0.5));\n        float pct = 1.0 - smoothstep(0.0, 0.5, distanceToCenter);\n        vec3 color = vec3(1.0) * gl_FragColor.rgb;\n        gl_FragColor = vec4(color, pct * gl_FragColor.a);\n\n       `],\n\n        });\n\n        const xRayMaterial = new THREE.ShaderMaterial({\n            uniforms: {\n                c: { type: 'f', value: 0.9 },\n                p: { type: 'f', value: 6.7 },\n                glowColor: { type: 'c', value: new THREE.Color(0x84ccff) },\n                viewVector: { type: 'v3', value: new THREE.Vector3(0, 0, 0) },\n                lightningTexture: { type: 't', value: this.mainBrain.loaders.brainXRayLight },\n                offsetY: { type: 'f', value: 0.3 },\n                uTime: { type: 'f', value: 0.0 },\n            },\n            vertexShader: xRayVertex,\n            fragmentShader: xRayFrag,\n            side: THREE.DoubleSide,\n            blending: THREE.AdditiveBlending,\n            transparent: true,\n            depthWrite: false,\n        });\n\n        const systemPoints = new THREE.Points(geometry, material);\n\n        console.error('MEMORIES', this.memories);\n        const xRayGeometry = new THREE.Geometry().fromBufferGeometry(this.mainBrain.endPointsCollections);\n        xRayGeometry.computeFaceNormals();\n        xRayGeometry.mergeVertices();\n        xRayGeometry.computeVertexNormals();\n\n        const xRayEffect = new THREE.Mesh(xRayGeometry, xRayMaterial);\n\n        // systemPoints.visible = false;\n        // system.scale.multiplyScalar(1.05);\n        systemPoints.castShadow = true;\n        systemPoints.frustumCulled = false;\n        // systemPoints.visible = false;\n\n        // // depth material is used for directional & spot light shadows\n        // systemPoints.customDepthMaterial = BAS.Utils.createDepthAnimationMaterial(material);\n        // // distance material is used for point light shadows\n        systemPoints.customDistanceMaterial = BAS.Utils.createDistanceAnimationMaterial(material);\n\n        systemPoints.customDepthMaterial = new THREE.ShaderMaterial({\n            vertexShader: material.vertexShader,\n            fragmentShader: material.fragmentShader,\n            uniforms: material.uniforms,\n        });\n\n        return { xRayEffect, systemPoints };\n    }\n\n\n    update(deltaTime, camera, brain) {\n        this.particles.material.uniforms.uTime.value = deltaTime;\n        this.xRay.material.uniforms.viewVector.value = new THREE.Vector3().subVectors(camera.position, brain.position);\n        this.xRay.material.uniforms.uTime.value = deltaTime;\n    }\n\n    isXRayActive(status) {\n        if (status) {\n            const progress = { p: 0.0 };\n            TweenMax.fromTo(progress, 3.0, { p: 3.0 }, {\n                p: 5.0,\n                ease: Power1.easeIn,\n                onUpdate: () => {\n                    this.xRay.material.uniforms.offsetY.value = Math.sin(progress.p);\n                },\n                onComplete: () => {\n                },\n            });\n        } else {\n            const progress = { p: 1.0 };\n            TweenMax.fromTo(progress, 3.0, { p: 5.0 }, {\n                p: 3.0,\n                ease: Power1.easeIn,\n                onUpdate: () => {\n                    this.xRay.material.uniforms.offsetY.value = Math.sin(progress.p);\n                },\n            });\n        }\n    }\n\n    updateTransitioning(val) {\n        this.particles.material.uniforms.uProgress.value += 1 / 300;\n        this.particles.customDepthMaterial.uniforms.uProgress.value += 1 / 300;\n        this.particles.customDistanceMaterial.uniforms.uProgress.value += 1 / 300;\n    }\n\n    transform(status) {\n        if (status) {\n            const progress = { p: 0.0 };\n            TweenMax.fromTo(progress, 5.9, { p: 0.0 }, {\n                p: 1.5,\n                ease: Power1.easeIn,\n                onUpdate: () => {\n                    this.updateTransitioning(progress.p);\n                },\n                onComplete: () => {\n                    this.mainBrain.orbitControls.maxDistance = 700;\n                    this.mainBrain.orbitControls.autoRotate = true;\n                    this.updateTransitioning(1.5);\n                },\n            });\n        } else {\n            const progress = { p: 1.0 };\n            TweenMax.fromTo(progress, 2.0, { p: 1.0 }, {\n                p: 0.5,\n                ease: Power1.easeIn,\n                onUpdate: () => {\n                    this.updateTransitioning(progress.p);\n                },\n            });\n        }\n    }\n}\n\nexport default ParticleSystem;\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/services/particlesSystem.js","module.exports = \"#define GLSLIFY 1\\nuniform vec3 viewVector;\\nuniform float c;\\nuniform float p;\\nuniform float uTime;\\nuniform float uSlowTime;\\nuniform float uBubblesUp;\\nuniform bool uIsFlashing;\\nuniform vec2 uMouse;\\nuniform bool isWinnerActive;\\nuniform float uWinnerSelected;\\nuniform float uWinnerAlpha;\\nvarying float intensity;\\nvarying vec4 vMemory;\\nattribute vec2 aDelayDuration;\\nattribute float size;\\nattribute vec4 aMemory;\\nattribute vec4 bubbles;\\nvarying float alpha;\\nvarying vec4 vBubbles;\\n\\n\\n\\nfloat easeExpoInOut(float p) {\\n    return ((p *= 2.0) < 1.0) ? 0.5 * pow(2.0, 10.0 * (p - 1.0)) : 0.5 * (2.0 - pow(2.0, -10.0 * (p - 1.0)));\\n}\\n\\nvoid main()\\n{\\n\\n\\tintensity = 0.9;\\n\\n    if(uIsFlashing){\\n\\n    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n    gl_PointSize = size * ( 300.0 / -mvPosition.z );\\n    float m = mod(size, sin(uSlowTime * 0.12 + size ));\\n\\n    alpha = step(0.5, abs(m));\\n    if(m > 0.5 && m < 0.7){\\n         gl_PointSize = 0.9 * size;\\n    }\\n    if(m > 0.8){\\n           gl_PointSize = 0.9 * size;\\n        }\\n\\n    gl_Position = projectionMatrix * mvPosition;\\n\\n    if(bubbles.w > 0.0 && bubbles.w < 2.0 && bubbles.x != 0.0 && bubbles.y != 0.0 ) {\\n        gl_PointSize = size + 15.0;\\n        alpha = clamp(abs(sin(uTime - bubbles.y)), 0.3, 1.0);\\n\\n        float tProgress = smoothstep(0.0, aDelayDuration.x, uBubblesUp);\\n        vec3 tranlated = mix(position, bubbles.xyz, tProgress);\\n        vec4 bPosition = modelViewMatrix * vec4( tranlated, 1.0 );\\n\\n        gl_PointSize = uBubblesUp * gl_PointSize;\\n        gl_Position +=  projectionMatrix * bPosition ;\\n        alpha = 5.0;\\n    }\\n\\n    if(bubbles.w == 2.0) {\\n           alpha = clamp(abs(sin(uTime - bubbles.y)), 0.3, 0.6);\\n           gl_PointSize = size + 60.0;\\n\\n           gl_PointSize = uBubblesUp * gl_PointSize;\\n           float normalized = clamp(uBubblesUp, 0.0, 2.0)* 2.0;\\n           vec3 tranlated = mix(position, bubbles.xyz, normalized);\\n           vec4 bPosition = modelViewMatrix * vec4( tranlated, 1.0 );\\n           gl_Position +=  projectionMatrix * bPosition ;\\n    }\\n      if(bubbles.w == 3.0) {\\n               alpha = clamp(abs(sin(uTime - bubbles.y)), 0.3, 1.0);\\n               gl_PointSize = size + 90.0;\\n\\n               gl_PointSize = uBubblesUp * gl_PointSize;\\n               float normalized = clamp(uBubblesUp, 0.0, 2.0)* 2.0;\\n               vec3 tranlated = mix(position, bubbles.xyz, normalized);\\n               vec4 bPosition = modelViewMatrix * vec4( tranlated, 1.0 );\\n               gl_Position +=  projectionMatrix * bPosition ;\\n        }\\n    vBubbles = bubbles;\\n\\n    }\\n\\n    //Show only the brain section activate and hide all blinking dots ecept memory bubbles\\n    if(aMemory.w == uWinnerSelected && isWinnerActive){\\n        vMemory = aMemory;\\n        intensity = 0.9;\\n    }else if(bubbles.w != 2.0  && bubbles.w != 3.0 && isWinnerActive ){\\n        alpha = mix(1.0, 0.0, uWinnerAlpha);\\n    }\\n\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/shaders/glow.vert\n// module id = tE7Q\n// module chunks = 1","/* eslint no-param-reassign: [\"error\", { \"props\": true, \"ignorePropertyModificationsFor\": [\"bubbles\"] }] */\nimport * as THREE from 'three';\nimport { Power1, TweenMax, Power2 } from 'gsap';\nimport _ from 'lodash';\nimport flashingV from '../shaders/flashing.vert';\nimport flashingF from '../shaders/flashing.frag';\nimport flashingCoordinates from '../data/flashingCoordinates.json';\n\nclass ThinkingAnimation {\n    constructor(mainBrain) {\n        this.mainBrain = mainBrain;\n        this.isFlashing = false;\n        this.memorySelected = mainBrain.memorySelected;\n        this.alphaAnimation = { v: 0.0 };\n        this.secuenceAnimation = 0;\n    }\n\n    initAnimation() {\n        const { scene, camera } = this.mainBrain;\n\n        const particles = 10;\n        const geometry = new THREE.BufferGeometry();\n        const sizes = [];\n        const positions = [];\n        const colors = [];\n        const delay = [];\n        const duration = 2.5;\n        const maxPointDelay = 1.5;\n\n        Object.keys(flashingCoordinates).forEach((memory, index) => {\n            const light = flashingCoordinates[memory];\n\n            positions.push(light.x, light.y, light.z);\n\n            sizes[index] = light.size;\n\n            delay[index * 2 + 0] = THREE.Math.randFloat(0.5, maxPointDelay);\n            delay[index * 2 + 1] = duration;\n        });\n\n        geometry.addAttribute(\n            'aDelayDuration',\n            new THREE.Float32BufferAttribute(delay, 2),\n        );\n        geometry.addAttribute(\n            'position',\n            new THREE.Float32BufferAttribute(positions, 3),\n        );\n        geometry.addAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\n        geometry.addAttribute('size', new THREE.Float32BufferAttribute(sizes, 1));\n        geometry.computeBoundingSphere();\n        const customMaterial = new THREE.ShaderMaterial({\n            uniforms: {\n                c: { type: 'f', value: 0.9 },\n                p: { type: 'f', value: 2.8 },\n                glowColor: { type: 'c', value: new THREE.Color(0x2c3e93) },\n                viewVector: { type: 'v3', value: camera.position },\n                uTime: { type: 'f', value: 0.0 },\n                uFadeTime: { type: 'f', value: 0.0 },\n                uMouse: { type: 'f', value: new THREE.Vector2(0.0) },\n                isCustomAlpha: { type: 'b', value: false },\n                uAlpha: { type: 'float', value: 0.0 },\n                uResolution: {\n                    type: 'v2',\n                    value: new THREE.Vector2(window.innerWidth, window.innerHeight),\n                },\n            },\n            vertexShader: flashingV,\n            fragmentShader: flashingF,\n            vertexColors: THREE.VertexColors,\n            blending: THREE.AdditiveBlending,\n            side: THREE.DoubleSide,\n            depthTest: false,\n            transparent: true,\n        });\n        this.flashing = new THREE.Points(geometry, customMaterial);\n        this.flashing.name = 'flashing';\n        scene.add(this.flashing);\n    }\n\n    animationCamera(val) {\n        this.mainBrain.isRecording = false;\n        // this.isActive(true);\n        this.flashing.material.uniforms.uFadeTime.value = 1;\n        this.isFlashing = true;\n\n        if (this.alphaAnimation.v === 0.0) {\n            TweenMax.fromTo(\n                this.alphaAnimation,\n                2.5,\n                { v: 0.0 },\n                {\n                    v: 1.0,\n                    ease: Power1.easeInOut,\n                    onStart: () => {\n                        this.selectMemoryThinking(val);\n                    },\n                    onUpdate: () => {\n                        this.flashing.material.uniforms.uAlpha.value = this.alphaAnimation.v;\n                    },\n                },\n            );\n        } else {\n            TweenMax.fromTo(\n                this.alphaAnimation,\n                1.0,\n                { v: 1.0 },\n                {\n                    v: 0.0,\n                    ease: Power1.easeInOut,\n                    onUpdate: () => {\n                        this.flashing.material.uniforms.uAlpha.value = this.alphaAnimation.v;\n                    },\n                    onComplete: () => {\n                        this.thinkingFadeIn(val);\n                    },\n                },\n            );\n        }\n\n        this.flashing.geometry.setDrawRange(0, 1);\n    }\n\n    selectMemoryThinking(val) {\n        const lights = Object.keys(flashingCoordinates);\n        const light = lights[Math.floor(val)];\n\n        const locations = flashingCoordinates[light];\n        if (!locations) {\n            return;\n        }\n\n        const positions = this.flashing.geometry.attributes.position.array;\n\n        for (let i = 0; i < positions.length; i += 1) {\n            positions[i * 3] = locations.x;\n            positions[i * 3 + 1] = locations.y;\n            positions[i * 3 + 2] = locations.z;\n        }\n\n        this.flashing.material.uniforms.isCustomAlpha.value = true;\n\n        const { camera } = this.mainBrain;\n\n        const cameraPos = {\n            x: camera.position.x,\n            y: camera.position.y,\n            z: camera.position.z,\n        };\n\n        TweenMax.fromTo(\n            cameraPos,\n            1.5,\n            { x: cameraPos.x, y: cameraPos.y, z: cameraPos.z },\n            {\n                x: locations.camera.x,\n                y: locations.camera.y,\n                z: locations.camera.z,\n                ease: Power1.easeInOut,\n                onUpdate: () => {\n                    camera.position.x = cameraPos.x;\n                    camera.position.y = cameraPos.y;\n                    camera.position.z = cameraPos.z;\n                },\n                onComplete: () => {\n                    this.secuenceAnimation += 1;\n                    this.animationCamera(this.secuenceAnimation);\n                },\n            },\n        );\n    }\n\n    thinkingFadeIn(val) {\n        TweenMax.fromTo(\n            this.alphaAnimation,\n            2.5,\n            { v: 0.0 },\n            {\n                v: 1.0,\n                ease: Power1.easeInOut,\n                onUpdate: () => {\n                    this.flashing.material.uniforms.uAlpha.value = this.alphaAnimation.v;\n                },\n                onStart: () => {\n                    this.selectMemoryThinking(val);\n                },\n            },\n        );\n    }\n\n    updateSubSystem(subsystemPayload) {\n        this.bubbles.geometry.attributes.bubbles.needsUpdate = false;\n        const cameraPos = this.mainBrain.camera.position;\n        const { target } = this.mainBrain.orbitControls;\n        const bubblesAttr = this.bubbles.geometry.attributes.bubbles.array;\n        const progress = { p: 1.0 };\n\n        this.mainBrain.font.removeText();\n        TweenMax.fromTo(\n            progress,\n            2.5,\n            { p: 1.0 },\n            {\n                p: 0.0,\n                ease: Power1.easeInOut,\n                onUpdate: () => {\n                    this.updateBurbleUp(progress.p);\n                    this.mainBrain.orbitControls.target.set(\n                        target.x,\n                        target.y - progress.p,\n                        target.z,\n                    );\n                    this.mainBrain.camera.position.set(\n                        cameraPos.x,\n                        cameraPos.y - progress.p,\n                        cameraPos.z,\n                    );\n                },\n                onComplete: () => {\n                    this.getBubblesSelected(bubblesAttr, subsystemPayload);\n                    this.flashing.geometry.attributes.flashing.needsUpdate = true;\n                    this.animate(true);\n                },\n            },\n        );\n    }\n\n    update(camera, delta) {\n        this.flashing.material.uniforms.viewVector.value = new THREE.Vector3().subVectors(\n            camera.position,\n            this.flashing.position,\n        );\n        this.flashing.material.uniforms.uTime.value = delta;\n    }\n    isActive(val) {\n        if (val) {\n            const progress = { p: 0.0 };\n            TweenMax.fromTo(\n                progress,\n                2.5,\n                { p: 0.0 },\n                {\n                    p: 1.0,\n                    ease: Power1.easeInOut,\n                    onUpdate: () => {\n                        this.flashing.material.uniforms.uFadeTime.value = progress.p;\n                        this.isFlashing = true;\n                    },\n                },\n            );\n        } else {\n            const progress = { p: 1.0 };\n            TweenMax.fromTo(\n                progress,\n                2.5,\n                { p: 1.0 },\n                {\n                    p: 0.0,\n                    ease: Power1.easeInOut,\n                    onUpdate: () => {\n                        this.flashing.material.uniforms.uFadeTime.value = progress.p;\n                        this.isFlashing = false;\n                    },\n                },\n            );\n        }\n    }\n    updateMouse(coordinates) {\n        this.flashing.material.uniforms.uMouse.value = coordinates;\n    }\n\n    flashingAnimation(isActive) {\n        this.flashing.material.uniforms.uIsFlashing.value = isActive;\n\n        if (isActive) {\n            const progress = { p: 0.0 };\n            TweenMax.fromTo(\n                progress,\n                2.5,\n                { p: 0.0 },\n                {\n                    p: 1.0,\n                    ease: Power1.easeInOut,\n                    onUpdate: (value) => {\n                        this.flashing.material.uniforms.uFlashingAlpha.value = progress.p;\n                        this.isFlashing = true;\n                    },\n                },\n            );\n        } else {\n            const progress = { p: 1.0 };\n            TweenMax.fromTo(\n                progress,\n                2.5,\n                { p: 1.0 },\n                {\n                    p: 0.0,\n                    ease: Power1.easeInOut,\n                    onUpdate: (value) => {\n                        this.flashing.material.uniforms.uFlashingAlpha.value = progress.p;\n                        this.isFlashing = false;\n                    },\n                },\n            );\n        }\n    }\n\n    animate(isActive) {\n        const cameraPos = this.mainBrain.camera.position;\n        const { target } = this.mainBrain.orbitControls;\n        if (!this.isFlashing) {\n            this.flashingAnimation(true);\n        }\n        if (isActive) {\n            const progress = { p: 0.0 };\n            TweenMax.fromTo(\n                progress,\n                2.5,\n                { p: 0.0 },\n                {\n                    p: 1.0,\n                    ease: Power1.easeInOut,\n                    onUpdate: () => {\n                        this.updateBurbleUp(progress.p);\n                        this.mainBrain.orbitControls.target.set(\n                            target.x,\n                            target.y + progress.p,\n                            target.z,\n                        );\n                        this.mainBrain.camera.position.set(\n                            cameraPos.x,\n                            cameraPos.y + progress.p,\n                            cameraPos.z,\n                        );\n                    },\n                },\n            );\n        } else {\n            const progress = { p: 1.0 };\n            TweenMax.fromTo(\n                progress,\n                2.5,\n                { p: 1.0 },\n                {\n                    p: 0.0,\n                    ease: Power1.easeInOut,\n                    onUpdate: () => {\n                        this.updateBurbleUp(progress.p);\n                        this.mainBrain.orbitControls.target.set(\n                            target.x,\n                            target.y - progress.p,\n                            target.z,\n                        );\n                        this.mainBrain.camera.position.set(\n                            cameraPos.x,\n                            cameraPos.y - progress.p,\n                            cameraPos.z,\n                        );\n                    },\n                },\n            );\n        }\n    }\n}\n\nexport default ThinkingAnimation;\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/services/thinkingAnimation.js"],"sourceRoot":""}